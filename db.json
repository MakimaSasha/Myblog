{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/widget.yml","hash":"7e6cda4f440a4bdf3807e270f1df89bd0c072453","modified":1677155592735},{"_id":"source/_posts/C++ 算法模板.md","hash":"a6af0883850003804db07a59aa65b38ea2503023","modified":1677163009275},{"_id":"source/_posts/Git基础笔记.md","hash":"5521bf84f68f77f4312b43aa201edb907a5f3ca5","modified":1677169624420},{"_id":"source/_posts/Markdown基础笔记.md","hash":"f70913a3d02fdb9800cc9b2ace9ed6a5c0019122","modified":1677164035906},{"_id":"source/_posts/hello-world.md","hash":"cf0026b7638eca78954a46a47b56fdae7655bf81","modified":1677169410401},{"_id":"source/_posts/TDD.md","hash":"b2eb8e770fcc367f31d85c1779d8451225e9d88f","modified":1677164118206},{"_id":"source/categories/index.md","hash":"4e079de48a98cedf0e9ac1ae48f41fe7cd3bba4f","modified":1677164698219},{"_id":"source/tags/index.md","hash":"585c1c5e77f18e5ab2b8349e4616689d4bbec97b","modified":1677173492678},{"_id":"source/_posts/PowerShell基础.md","hash":"0e3b7c5a506ed89cc28915fc03620d3e000a4f27","modified":1677169672068},{"_id":"source/_posts/VSCode环境配置.md","hash":"c0fc59fc0651fce7e73bb8484a095ed1c377458e","modified":1677164141170},{"_id":"source/_posts/vim基础教程.md","hash":"da1458c4e34f8dcc7474597b0bcbe9653d429419","modified":1677164349265},{"_id":"source/_posts/C++基础.md","hash":"b4518da536db1ff2042de2678ca4eaa15b84ec60","modified":1677164009966},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1677146558090},{"_id":"themes/butterfly/README.md","hash":"c34579d9d7239828ce7d8abc235521eaf4ea9e17","modified":1677146558090},{"_id":"themes/butterfly/README_CN.md","hash":"25cfdbaf9883095322259c4f49bd08f0a7cffa0e","modified":1677146558090},{"_id":"themes/butterfly/_config.yml","hash":"c91dc8685e0901643bfe1671264716fd9c357d96","modified":1677174538317},{"_id":"themes/butterfly/package.json","hash":"bd5ad5964ea343cb62368e372e0d09e70ce54bc0","modified":1677146558098},{"_id":"themes/butterfly/plugins.yml","hash":"20741046d3c58d059ab0e503e7d569a7fda1baf1","modified":1677146558098},{"_id":"themes/butterfly/languages/default.yml","hash":"9b9c5b8158d1296c64a354e57a3b0b809575a77d","modified":1677146558094},{"_id":"themes/butterfly/._config.yml.swp","hash":"e4b0f151413bbdd725ce67b32c7c65c194717cc5","modified":1677174116999},{"_id":"themes/butterfly/languages/en.yml","hash":"e0e52a7ba52fa70c3557f00ddf681f66098ac8b7","modified":1677146558094},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"0b994863599d62c56d2bc50d20b94332ed9d98cf","modified":1677146558094},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"5b9ce449bd4f7e3ba46131546e75976efe31a1f6","modified":1677146558094},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1677146558094},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1677146558094},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1677146558098},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1677146558098},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1677146558098},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1677146558098},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1677146558090},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1677146558090},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1677146558090},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1677146558090},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1677146558094},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1677146558090},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"c63de7ad306943115696555457d58e8bb043f4bf","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"12a1e92257855cc1a6a48d8eb442472459c88b5e","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"a8720f01c429c839149d7f5991c49541011f4796","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1677146558094},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1677146558098},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1677146558098},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"f5cbd41c6afb49639b59ab5ad659da0d3b7f25dd","modified":1677146558098},{"_id":"themes/butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1677146558098},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1677146558098},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1677146558098},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"d1a5b26c8239189493c1f7d8fd0b8f8ec3d11eaa","modified":1677146558098},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1677146558098},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1677146558098},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1677146558098},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1677146558098},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"867b839501d5bbf7ab79da991952d8926f8d8805","modified":1677146558098},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"4e412f6a3e2a9a4855a0c110ace6c1b1c3a88938","modified":1677146558098},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1677146558098},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1677146558102},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1677146558098},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1677146558102},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1677146558102},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1677146558102},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1677146558102},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1677146558102},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1677146558102},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1677146558102},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1677146558102},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1677146558102},{"_id":"themes/butterfly/source/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1677146558106},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1677146558106},{"_id":"themes/butterfly/source/js/utils.js","hash":"85bae4adcec638fa3ef1e734414025c6b2c90f3c","modified":1677146558106},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"428e3c39053b44760463682848f2eae238ff9d64","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1677146558094},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1677146558106},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"c4b86758f3a3deae4612c31d725814c8753a7804","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"278855fe4399489bdef0393697bb87420e671fe9","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"35223531f8e086d57caec2d17d45ddbcb39deb74","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"51df61ddcaf5b9723efa15f178979f2f0caac413","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1677146558098},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1677146558102},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1677146558102},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4f5636c326f794417296bdb6bcfd6a8b207d69d8","modified":1677146558102},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1677146558102},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"2099b302735146031334f7e133a3a888aeb935dd","modified":1677146558102},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1677146558102},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1677146558098},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1677146558102},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1677146558102},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":1677146558102},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1677146558102},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1677146558102},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"23db4e3cab68fed78601fc8a9c39ff5753bcc716","modified":1677146558102},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1677146558102},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1677146558102},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1677146558102},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1677146558102},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"56389925671c7e8da0c033769421269e15e8f795","modified":1677146558102},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"7ff0c456fae2717ddbbb9f8fae2734d449a5448b","modified":1677146558102},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1677146558102},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1677146558102},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1677146558102},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1677146558102},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1677146558102},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1677146558102},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":1677146558102},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1677146558102},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"bd0f7363244eff39a12d1ea658325ddaf5916ccd","modified":1677146558102},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1677146558102},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"dd021a44177e2184bbf26e5d2460938841bdb310","modified":1677146558102},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1677146558102},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1677146558102},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1677146558102},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1677146558102},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1677146558102},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1677146558102},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1677146558102},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1677146558102},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1677146558102},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1677146558102},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"5f2ddfd705a85c6a6d327ffcb51d530d8f167e52","modified":1677146558106},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1677146558106},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"b2aadea7351fae8382b8c2a3b9de810d922b0ec1","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"0611d9216f4c128ebdea4cc21454c3dc4a6398d5","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"ccb7d8ce3ded7364f9a15334b68ad73869fca757","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"95738f110598f999d627234e78ff9e9decac1b9b","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3ba842bf4801b2f115c2cfe5657f35a732ce589f","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"eefdaa94956adc7a3ca90dd8edcd70a7574b439c","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c3a87393cb49915940c2dd206356c2a16549767","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1677146558094},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"26ba1fc99117993087b1c6e02daa2626627d8eb1","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"0ea633b11b357afa50c200290d19c32467d58a1d","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"e6ebbe137dd86b6d8750a6843e350fcd16030981","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"441d87067d87d9996b53b25c05b8e620bd94b027","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"662268ed67c85120091a3f076b0fe78cf9614a62","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"15928e341f5cedaa24a06d6ead16b980a5c6d69c","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1677146558098},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1677146558098},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1677146558102},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1677146558102},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1677146558102},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1677146558102},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1677146558102},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"9457b64392014044e9d6fc9145651e940944378a","modified":1677146558098},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1677146558102},{"_id":"public/search.xml","hash":"1a380de558ecb69911212fe623ca8a9b33fd5273","modified":1677173167430},{"_id":"public/404.html","hash":"73540e820b3907d06ac14e8dcc873eb97d135f57","modified":1677173167430},{"_id":"public/categories/index.html","hash":"d835d848bffce78700b9d48aa2bb19399a353b31","modified":1677173167430},{"_id":"public/tags/index.html","hash":"bcee00e0e2fa6453772c1d059f46941dfe9002ad","modified":1677173167430},{"_id":"public/2022/05/24/Git基础笔记/index.html","hash":"fcb5474d59b112b838e79aac871fd91d5af7ddc1","modified":1677173167430},{"_id":"public/2022/05/22/PowerShell基础/index.html","hash":"844a7b81f0c4e38ff857542916784322237c2311","modified":1677173167430},{"_id":"public/2022/05/12/VSCode环境配置/index.html","hash":"043478dabf910eb96531de6a9c26f2e10d7e58e9","modified":1677173167430},{"_id":"public/2022/04/24/C++基础/index.html","hash":"45add7808a09bd6cc20c10189ed382198782a001","modified":1677173167430},{"_id":"public/2022/03/24/TDD/index.html","hash":"d6bce39f8804c6883b44d8432302933473b2a024","modified":1677173167430},{"_id":"public/2022/03/10/Markdown基础笔记/index.html","hash":"9306b48f4290a6abc521d78567b3e88a470d48ab","modified":1677173167430},{"_id":"public/2022/03/01/vim基础教程/index.html","hash":"4bda1a4e0f889d5f3e64857082263a7660749d6e","modified":1677173167430},{"_id":"public/2022/02/22/C++ 算法模板/index.html","hash":"9cc183cc3fe38b9c265fef553c3c6258912c39d6","modified":1677173167430},{"_id":"public/2022/01/16/hello-world/index.html","hash":"cd66e7524bd8f1975ad4b714e719445634fabc0f","modified":1677173167430},{"_id":"public/archives/index.html","hash":"efc16c3eba30e6a46dc60006740d28475c2d07d7","modified":1677173167430},{"_id":"public/archives/2022/index.html","hash":"f5fce7df9ccdc18a0081d9cd225c248b33343c7d","modified":1677173167430},{"_id":"public/archives/2022/01/index.html","hash":"428a4721fb8ce7bd1ee9bfbe3464e2f46ae15ff2","modified":1677173167430},{"_id":"public/archives/2022/02/index.html","hash":"cec845abecbc396b173ccefff9040330e1cb4590","modified":1677173167430},{"_id":"public/archives/2022/03/index.html","hash":"771c54dd4e65e2772071d84277b021203dc05d4c","modified":1677173167430},{"_id":"public/archives/2022/04/index.html","hash":"be3ed7a45abffbe1c196f5309c254c45f3d36f9e","modified":1677173167430},{"_id":"public/archives/2022/05/index.html","hash":"9d085467317e192ae46f0767ceb0fe40eb0e2418","modified":1677173167430},{"_id":"public/index.html","hash":"418014fed5de176ae2a1594b0e3f3bf3179a9cf9","modified":1677173167430},{"_id":"public/tags/算法/index.html","hash":"4fea33d2df8f468dd7449e4864acb93e4af5c472","modified":1677173167430},{"_id":"public/tags/计算机语言/index.html","hash":"a7759920f54129aed3c876b5c89bf448c56501c1","modified":1677173167430},{"_id":"public/tags/其他/index.html","hash":"df5e00eabb1eb66365a57c527645c86e488c26ab","modified":1677173167430},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1677173167430},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1677173167430},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1677173167430},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677173167430},{"_id":"public/js/utils.js","hash":"85bae4adcec638fa3ef1e734414025c6b2c90f3c","modified":1677173167430},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1677173167430},{"_id":"public/js/search/local-search.js","hash":"5f2ddfd705a85c6a6d327ffcb51d530d8f167e52","modified":1677173167430},{"_id":"public/css/index.css","hash":"94ca7f433c1e867f59b4b22a713a1108a8cfcef8","modified":1677173167430},{"_id":"public/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1677173167430},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1677173167430}],"Category":[],"Data":[{"_id":"widget","data":{"top":[{"class_name":{"id_name":null,"name":null,"icon":null,"html":null}}],"bottom":[{"class_name":"user-map","id_name":"user-map","name":"访客地图","icon":"fas fa-heartbeat","order":null,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}}],"Page":[{"title":"categories","date":"2023-02-23T15:04:01.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-02-23 23:04:01\ntype: \"categories\"\n---\n","updated":"2023-02-23T15:04:58.219Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clehaba8l0000tcvc6r3c695p","content":"","site":{"data":{"widget":{"top":[{"class_name":{"id_name":null,"name":null,"icon":null,"html":null}}],"bottom":[{"class_name":"user-map","id_name":"user-map","name":"访客地图","icon":"fas fa-heartbeat","order":null,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}}},"cover":false,"excerpt":"","more":""},{"title":"标签","date":"2023-02-23T15:10:10.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-02-23 23:10:10\ntype: \"tags\"\norderby: random\norder: 1\n---\n","updated":"2023-02-23T17:31:32.678Z","path":"tags/index.html","_id":"clehaba8t0002tcvc7j3semul","comments":1,"layout":"page","content":"","site":{"data":{"widget":{"top":[{"class_name":{"id_name":null,"name":null,"icon":null,"html":null}}],"bottom":[{"class_name":"user-map","id_name":"user-map","name":"访客地图","icon":"fas fa-heartbeat","order":null,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"C++算法模板","date":"2022-02-22T14:25:32.000Z","_content":"\n### 常见算法\n\n\n```c++\nsscanf(,,)\t转换字符串的格式，如\n\tsscanf(s,\"%d\",&a) 将字符串s转换为整型并存储到a中\nsprintf(,,,,,) 格式化输出\t如\n\tsprintf(s,\"%d%d%d\",a,b,c) 将a,b,c的值按%d%d%d输出到字符串s中\n\nios::sync_with_stdio(false);\t关闭c++cin和cout与scanf和printf的流相关。\ncin.tie(0);cin.tie(0);\n\nsort(a,a+n,cmp);\nsort(a,b,cmp);\t将a，到b范围内数据排序，自定义排序方式cmp函数构造，对自己定义的结构体数组排序时也要用cmp。如果认为第一个参数比第二个小，也就是第一个参数需要排在第二个参数前面时返回true，反之返回 false。系统默认a<b时返回true，于是从小到大排。而上面的例子是当b小于a时，认为a小于b。所以排序的结果就是将元素按从大到小的顺序排序。\n重载<运算符 \nbool operator<(const int &a, const int &b){\n\treturn a<b;\n}\n返回值作用同sort的cmp，需要a排在b前时返回true。\n```\n\n\n\n### 快排\n\n```c++\nvoid qsort(int l, int r){\n\tint i=l,j=r;\t\t\t\t//i，j工作指针\n\tint pivot = d[(l+r)/2];\t\t//选择中间元素作为枢纽，当然也可以选择其他位置的元素\n\twhile(i<=j){\t\t\t\t//当i大于j时完成一次划分\n\t\twhile(d[j]>pivot)j--;\t//从右向左找比枢纽小的数\n\t\twhile(d[i]<pivot)i++;\t//从左向右找比枢纽大的数\n\t\tif(i<=j){\t\t\t\t//不加‘=’的话，当i==j 且d[i]==pivot时，会死循环\t如：1 2 4 5 4序列\n\t\t\tint temp=d[i];d[i]=d[j];d[j]=temp;\t//交换d[i]，d[j]的值\n\t\t\tj--;i++;\t\t\t//i，j移向各自的下一位\n\t\t}\n\t}\t\t\t\t\t\t\t//划分成的两部分继续进行划分\n\tif(i<r)qsort(i,r);\t\t\t//剩下的右半部分\n\tif(j>l)qsort(l,j);\t\t\t//剩下的左半部分\n}\n```\n\n### 找第K小的元素（可以开O2的话，直接快排完所有元素大概率能过）\n\n```c++\nvoid qsort_to_find_nth(int l, int r, int ind){\t//查找第ind个元素，从第1个元素开始计数\n\tint i=l,j=r;\t\t\t\t//i，j工作指针\n\tint pivot=d[(l+r)/2];\t\t//选中间元素为枢纽\n\twhile(i<=j){\t\t\t\t//当i大于j时完成一次划分，此时i，j中剩一个元素时，且那个元素是序列是ind是走最后的else\n\t\twhile(d[i]<pivot)i++;\n\t\twhile(d[j]>pivot)j--;\n\t\tif(i<=j){\n\t\t\tswap(d[i],d[j]);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n\tif(ind<=j)qsort_to_find_nth(l,j,ind);\t\t//当i，j中间剩下的那个元素是序列是ind时结束\n\telse if(ind>=i)qsort_to_find_nth(i,r,ind);\n\telse cout<<d[j+1];\n}\n```\n\n### 快速幂\n\n```c++\n一般的快速幂（一般会让求余数）\n    如：base^index mod c\t\t\t\t//index在c++中是关键字，一下用indx代替\n    for(int i=1;i<=n;i++){\n        ans = (ans%c*(base%c))%c;\t//等价于 ans = (ans*base)%c\n    }\n\tans %= c;\t\t\t\t\t\t//最后再求一次于。因为：(a*b*c*d)%e == ((a%e)*(b%e)*(c%e)*(d%e))%e\n\n优化一：把base的index次方看成base的index/2次方的平方和index%2次方的乘积 \n    即：base^index = base^(index/2)*base^(index/2)*base^(index%2) 然后递归\n    long long qpow(long long base, long long indx, long long c){\n    \tif(indx == 0)return 1;\n    \telse if(indx == 1)return base;\n    \telse{\n            long long ans = (qpow(base,index/2,c))%c;\t//先把指数拆两半，每一半的结果再%c\n            ans = ((ans%c)*(ans%c))%c;\t\t\t\t\t//把两半对c的余数的乘积对c求余数，这样写是避免爆long long\n            \t\t\t\t\t\t\t\t\t\t\t//即：(ans*ans)%c = ((ans%c)*(ans%c))%c\n            if(index%2 == 1) ans = ((ans%c)*(base%c))%c;//判断index是否为奇数，奇数得(ans*base)%c\n            return ans;\n\t\t}\n\t}\n\tans = qpow(base, indx, c);\n\tans %= c;\t\t\t\t//以免出现index等于1时，没对c取余\n\n优化二：将index转化为二进制\n    long long qpow(long long base, long long indx, long long c){\n    \tlong long ans=1,tmp=base;\n    \twhile(indx != 0){\n            if(indx&1)\t\t\t\t\t\t//1表示二进制中最后一位为1，用于判断indx最后一位是否为1\n                ans = ((ans%c)*(temp%c))%c;\t//indx最后一位为1，实质就是指indx是个奇数，所以要算(ans*temp)%c\n            temp = ((temp%c)*(temp%c))%c;\t//temp自乘，相当于再算temp*temp % c\n            indx = indx>>1;\t\t\t\t\t//indx左移一位，相当于除以二\n        }\n    \tans %= c;\n    \treturn ans;\n\t}\n\tans = qpow(base,indx,c);\n\tans %= c;\t\t\t\t\t\t\t\t//避免出现indx为0，c为1时ans为1，结果没有取余的情况\n```\n\n### KMP算法\n\n```c++\n\n```\n\n[KMPblog(不推荐)](http://www.matrix67.com/blog/archives/115) \t[KMP题解](https://www.luogu.com.cn/problem/solution/P3375)\n\n[Trie树](https://blog.csdn.net/qq_30974369/article/details/74936845)\n\n[AC自动机](https://www.cnblogs.com/cjyyb/p/7196308.html)\n\n[AC自动机学习笔记](https://xminh.github.io/2018/06/02/KMP+AC%E8%87%AA%E5%8A%A8%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html)\n\n### 高精度模板\n\n#### 加法——两个数相加后的位数最多比两个数中位数较大的一个多一位\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nint main(){\n\tchar s1[1001];\t\t\t//用字符串保存大数\n\tchar s2[1001];\n\tint d1[1001];\t\t\t//实际运算使用的数组\n\tint d2[1001];\n\tint ans[1001];\t\t\t//最终结果保存的数组\n\tcin>>s1>>s2;\n\tint s1_l = strlen(s1);\n\tint s2_l = strlen(s2);\n\tfor(int i=0;i<s1_l;i++){\n\t\td1[i] = s1[s1_l - i - 1] - '0';\t\t//将字符串转化为整型数字，并把低位储存在数组的低位\n\t}\n\tfor(int i=0;i<s2_l;i++){\n\t\td2[i] = s2[s2_l - i - 1] - '0';\n\t}\n\tint ca = 0;\t\t\t\t\t\t\t\t//ca用于保存是否进位，ca只会是0或1，因为最多进1，初始值为0\n\tint max_len = max(s1_l,s2_l);\t\t\t//使用较大的一个数的位数作为循环的次数\n\tfor(int i=0;i<max_len;i++){\n\t\tans[i] = d1[i] + d2[i] + ca;\t\t//对应位数相加并加上上一次的进位\n\t\tca = ans[i] / 10;\t\t\t\t\t//将十位上的数赋给ca\n\t\tans[i] %= 10;\t\t\t\t\t\t//数组的每一个元素仅保留一位\n\t}\n\tif(ca != 0)cout<<ca;\t\t\t\t\t//若最后一次有进位就先输出它\n\tfor(int i=max_len-1;i>=0;i--){\n\t\tcout<<ans[i];\t\t\t\t\t\t//倒着输出剩下的位\n\t}\n\treturn 0;\n}\n```\n\n#### 乘法——两个数相乘结果最大有它俩位数之和位\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);cout.tie(0);\n\tchar s1[2005],s2[2005];\t\t\t\t\t\t\t//两个字符串用于储存最初的大数字符\n\tcin>>s1>>s2;\t\t\t\t\t\t\t\t\t//不要忘记输入，不要忘记输入，不要忘记输入\n\tint d1[2005]={0},d2[2005]={0},ans[4010]={0};   //两个整型数组用于储存俩个大数，ans数组用于存储最终结果\n\tint s1_l = strlen(s1);\n\tint s2_l = strlen(s2);\n\tfor(int i=0;i<s1_l;i++)\n\t\td1[i] = s1[s1_l - i -1] - '0';\t\t//将字符串转化位整型\n\tfor(int i=0;i<s2_l;i++)\n\t\td2[i] = s2[s2_l - i -1] - '0';\n\tfor(int i=0;i<s1_l;i++)\t\t\t\t//模拟竖式乘法，这里没进位。ans中现在保存的数都是竖式中一列的和\n\t\tfor(int j=0;j<s2_l;j++)\n\t\t\tans[i+j] += d1[i] * d2[j];\t\t//注意此处是 +=\n\tint indx = s1_l + s2_l;\t\t\t\t//indx保存的是最终结果的位数\n\tfor(int i=0;i<indx;i++){\t//进位操作，当ans数组的元素不止一位时，把个位留下，其他位加到下一个元素中\n\t\tif(ans[i]>9){\n\t\t\tans[i+1] += ans[i] / 10;\n\t\t\tans[i] %= 10;\n\t\t}\n\t}\n\twhile(ans[indx] == 0 && indx>=1)indx--;\t\t//计算实际位数\n\tfor(int i=indx;i>=0;i--)cout<<ans[i];\t\t//输出\n\treturn 0;\n}\n```\n\n### 高精度*单精度\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nint func(int n, int a){\n\tint d[5000]={1};\t//给数组的第一位赋初值\n\tint ret = 0;\n\tint num = 1;\n\tint i,j;\n\tfor(i=2;i<=n;i++){\n\t\tint ca = 0;\n\t\tfor(j=0;j<num;j++){\n\t\t\td[j] = i * d[j] + ca;\t//单精度*高精度的每一位 + 上一次的进位\n\t\t\tca = d[j] /10;\t\t\t//当前位只保留个位\n\t\t\td[j] %= 10;\n\t\t}\n\t\twhile(ca>0){\n\t\t\td[j] = ca%10;\n\t\t\tca /= 10;\n\t\t\tj++;\n\t\t}\n\t\tnum = j;\n\t}\n\tfor(i=0;i<num;i++){\n\t\tif(d[i] == a)ret++;\n\t}\n\treturn ret;\n}\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);cout.tie(0);\n\tint n;\n\tcin>>n;\n\twhile(n--){\n\t\tint temp,target;\n\t\tcin>>temp>>target;\n\t\tint ans = func(temp,target);\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}\n```\n\n[对应的习题](https://www.luogu.com.cn/problem/P1591)\n\n\n\n### 二叉搜索树第K大节点\n\n```c++\n// 非递归，用栈来暂存\n// 思路：二叉搜索树的中序遍历（左根右）得到的序列是从小到大的序列，而找第k大节点，可以倒着找，（右根左）\nint kthLargest(TreeNode* root, int k) {\n    stack<TreeNode*> s;\n    TreeNode *cur = root;\n    while(cur != nullptr || !s.empty()){\n        if(cur != nullptr){\n            s.push(cur);\n            cur = cur->right;\n        }else{\n            cur = s.top();s.pop();\n            if(--k == 0)return cur->val;\n            cur = cur->left;\n        }\n    }\n    return -1;\n}\n```\n\n","source":"_posts/C++ 算法模板.md","raw":"---\ntitle: C++算法模板\ndate: 2022-02-22 22:25:32\ntags: 算法\n---\n\n### 常见算法\n\n\n```c++\nsscanf(,,)\t转换字符串的格式，如\n\tsscanf(s,\"%d\",&a) 将字符串s转换为整型并存储到a中\nsprintf(,,,,,) 格式化输出\t如\n\tsprintf(s,\"%d%d%d\",a,b,c) 将a,b,c的值按%d%d%d输出到字符串s中\n\nios::sync_with_stdio(false);\t关闭c++cin和cout与scanf和printf的流相关。\ncin.tie(0);cin.tie(0);\n\nsort(a,a+n,cmp);\nsort(a,b,cmp);\t将a，到b范围内数据排序，自定义排序方式cmp函数构造，对自己定义的结构体数组排序时也要用cmp。如果认为第一个参数比第二个小，也就是第一个参数需要排在第二个参数前面时返回true，反之返回 false。系统默认a<b时返回true，于是从小到大排。而上面的例子是当b小于a时，认为a小于b。所以排序的结果就是将元素按从大到小的顺序排序。\n重载<运算符 \nbool operator<(const int &a, const int &b){\n\treturn a<b;\n}\n返回值作用同sort的cmp，需要a排在b前时返回true。\n```\n\n\n\n### 快排\n\n```c++\nvoid qsort(int l, int r){\n\tint i=l,j=r;\t\t\t\t//i，j工作指针\n\tint pivot = d[(l+r)/2];\t\t//选择中间元素作为枢纽，当然也可以选择其他位置的元素\n\twhile(i<=j){\t\t\t\t//当i大于j时完成一次划分\n\t\twhile(d[j]>pivot)j--;\t//从右向左找比枢纽小的数\n\t\twhile(d[i]<pivot)i++;\t//从左向右找比枢纽大的数\n\t\tif(i<=j){\t\t\t\t//不加‘=’的话，当i==j 且d[i]==pivot时，会死循环\t如：1 2 4 5 4序列\n\t\t\tint temp=d[i];d[i]=d[j];d[j]=temp;\t//交换d[i]，d[j]的值\n\t\t\tj--;i++;\t\t\t//i，j移向各自的下一位\n\t\t}\n\t}\t\t\t\t\t\t\t//划分成的两部分继续进行划分\n\tif(i<r)qsort(i,r);\t\t\t//剩下的右半部分\n\tif(j>l)qsort(l,j);\t\t\t//剩下的左半部分\n}\n```\n\n### 找第K小的元素（可以开O2的话，直接快排完所有元素大概率能过）\n\n```c++\nvoid qsort_to_find_nth(int l, int r, int ind){\t//查找第ind个元素，从第1个元素开始计数\n\tint i=l,j=r;\t\t\t\t//i，j工作指针\n\tint pivot=d[(l+r)/2];\t\t//选中间元素为枢纽\n\twhile(i<=j){\t\t\t\t//当i大于j时完成一次划分，此时i，j中剩一个元素时，且那个元素是序列是ind是走最后的else\n\t\twhile(d[i]<pivot)i++;\n\t\twhile(d[j]>pivot)j--;\n\t\tif(i<=j){\n\t\t\tswap(d[i],d[j]);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n\tif(ind<=j)qsort_to_find_nth(l,j,ind);\t\t//当i，j中间剩下的那个元素是序列是ind时结束\n\telse if(ind>=i)qsort_to_find_nth(i,r,ind);\n\telse cout<<d[j+1];\n}\n```\n\n### 快速幂\n\n```c++\n一般的快速幂（一般会让求余数）\n    如：base^index mod c\t\t\t\t//index在c++中是关键字，一下用indx代替\n    for(int i=1;i<=n;i++){\n        ans = (ans%c*(base%c))%c;\t//等价于 ans = (ans*base)%c\n    }\n\tans %= c;\t\t\t\t\t\t//最后再求一次于。因为：(a*b*c*d)%e == ((a%e)*(b%e)*(c%e)*(d%e))%e\n\n优化一：把base的index次方看成base的index/2次方的平方和index%2次方的乘积 \n    即：base^index = base^(index/2)*base^(index/2)*base^(index%2) 然后递归\n    long long qpow(long long base, long long indx, long long c){\n    \tif(indx == 0)return 1;\n    \telse if(indx == 1)return base;\n    \telse{\n            long long ans = (qpow(base,index/2,c))%c;\t//先把指数拆两半，每一半的结果再%c\n            ans = ((ans%c)*(ans%c))%c;\t\t\t\t\t//把两半对c的余数的乘积对c求余数，这样写是避免爆long long\n            \t\t\t\t\t\t\t\t\t\t\t//即：(ans*ans)%c = ((ans%c)*(ans%c))%c\n            if(index%2 == 1) ans = ((ans%c)*(base%c))%c;//判断index是否为奇数，奇数得(ans*base)%c\n            return ans;\n\t\t}\n\t}\n\tans = qpow(base, indx, c);\n\tans %= c;\t\t\t\t//以免出现index等于1时，没对c取余\n\n优化二：将index转化为二进制\n    long long qpow(long long base, long long indx, long long c){\n    \tlong long ans=1,tmp=base;\n    \twhile(indx != 0){\n            if(indx&1)\t\t\t\t\t\t//1表示二进制中最后一位为1，用于判断indx最后一位是否为1\n                ans = ((ans%c)*(temp%c))%c;\t//indx最后一位为1，实质就是指indx是个奇数，所以要算(ans*temp)%c\n            temp = ((temp%c)*(temp%c))%c;\t//temp自乘，相当于再算temp*temp % c\n            indx = indx>>1;\t\t\t\t\t//indx左移一位，相当于除以二\n        }\n    \tans %= c;\n    \treturn ans;\n\t}\n\tans = qpow(base,indx,c);\n\tans %= c;\t\t\t\t\t\t\t\t//避免出现indx为0，c为1时ans为1，结果没有取余的情况\n```\n\n### KMP算法\n\n```c++\n\n```\n\n[KMPblog(不推荐)](http://www.matrix67.com/blog/archives/115) \t[KMP题解](https://www.luogu.com.cn/problem/solution/P3375)\n\n[Trie树](https://blog.csdn.net/qq_30974369/article/details/74936845)\n\n[AC自动机](https://www.cnblogs.com/cjyyb/p/7196308.html)\n\n[AC自动机学习笔记](https://xminh.github.io/2018/06/02/KMP+AC%E8%87%AA%E5%8A%A8%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html)\n\n### 高精度模板\n\n#### 加法——两个数相加后的位数最多比两个数中位数较大的一个多一位\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nint main(){\n\tchar s1[1001];\t\t\t//用字符串保存大数\n\tchar s2[1001];\n\tint d1[1001];\t\t\t//实际运算使用的数组\n\tint d2[1001];\n\tint ans[1001];\t\t\t//最终结果保存的数组\n\tcin>>s1>>s2;\n\tint s1_l = strlen(s1);\n\tint s2_l = strlen(s2);\n\tfor(int i=0;i<s1_l;i++){\n\t\td1[i] = s1[s1_l - i - 1] - '0';\t\t//将字符串转化为整型数字，并把低位储存在数组的低位\n\t}\n\tfor(int i=0;i<s2_l;i++){\n\t\td2[i] = s2[s2_l - i - 1] - '0';\n\t}\n\tint ca = 0;\t\t\t\t\t\t\t\t//ca用于保存是否进位，ca只会是0或1，因为最多进1，初始值为0\n\tint max_len = max(s1_l,s2_l);\t\t\t//使用较大的一个数的位数作为循环的次数\n\tfor(int i=0;i<max_len;i++){\n\t\tans[i] = d1[i] + d2[i] + ca;\t\t//对应位数相加并加上上一次的进位\n\t\tca = ans[i] / 10;\t\t\t\t\t//将十位上的数赋给ca\n\t\tans[i] %= 10;\t\t\t\t\t\t//数组的每一个元素仅保留一位\n\t}\n\tif(ca != 0)cout<<ca;\t\t\t\t\t//若最后一次有进位就先输出它\n\tfor(int i=max_len-1;i>=0;i--){\n\t\tcout<<ans[i];\t\t\t\t\t\t//倒着输出剩下的位\n\t}\n\treturn 0;\n}\n```\n\n#### 乘法——两个数相乘结果最大有它俩位数之和位\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);cout.tie(0);\n\tchar s1[2005],s2[2005];\t\t\t\t\t\t\t//两个字符串用于储存最初的大数字符\n\tcin>>s1>>s2;\t\t\t\t\t\t\t\t\t//不要忘记输入，不要忘记输入，不要忘记输入\n\tint d1[2005]={0},d2[2005]={0},ans[4010]={0};   //两个整型数组用于储存俩个大数，ans数组用于存储最终结果\n\tint s1_l = strlen(s1);\n\tint s2_l = strlen(s2);\n\tfor(int i=0;i<s1_l;i++)\n\t\td1[i] = s1[s1_l - i -1] - '0';\t\t//将字符串转化位整型\n\tfor(int i=0;i<s2_l;i++)\n\t\td2[i] = s2[s2_l - i -1] - '0';\n\tfor(int i=0;i<s1_l;i++)\t\t\t\t//模拟竖式乘法，这里没进位。ans中现在保存的数都是竖式中一列的和\n\t\tfor(int j=0;j<s2_l;j++)\n\t\t\tans[i+j] += d1[i] * d2[j];\t\t//注意此处是 +=\n\tint indx = s1_l + s2_l;\t\t\t\t//indx保存的是最终结果的位数\n\tfor(int i=0;i<indx;i++){\t//进位操作，当ans数组的元素不止一位时，把个位留下，其他位加到下一个元素中\n\t\tif(ans[i]>9){\n\t\t\tans[i+1] += ans[i] / 10;\n\t\t\tans[i] %= 10;\n\t\t}\n\t}\n\twhile(ans[indx] == 0 && indx>=1)indx--;\t\t//计算实际位数\n\tfor(int i=indx;i>=0;i--)cout<<ans[i];\t\t//输出\n\treturn 0;\n}\n```\n\n### 高精度*单精度\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\nint func(int n, int a){\n\tint d[5000]={1};\t//给数组的第一位赋初值\n\tint ret = 0;\n\tint num = 1;\n\tint i,j;\n\tfor(i=2;i<=n;i++){\n\t\tint ca = 0;\n\t\tfor(j=0;j<num;j++){\n\t\t\td[j] = i * d[j] + ca;\t//单精度*高精度的每一位 + 上一次的进位\n\t\t\tca = d[j] /10;\t\t\t//当前位只保留个位\n\t\t\td[j] %= 10;\n\t\t}\n\t\twhile(ca>0){\n\t\t\td[j] = ca%10;\n\t\t\tca /= 10;\n\t\t\tj++;\n\t\t}\n\t\tnum = j;\n\t}\n\tfor(i=0;i<num;i++){\n\t\tif(d[i] == a)ret++;\n\t}\n\treturn ret;\n}\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);cout.tie(0);\n\tint n;\n\tcin>>n;\n\twhile(n--){\n\t\tint temp,target;\n\t\tcin>>temp>>target;\n\t\tint ans = func(temp,target);\n\t\tcout<<ans<<endl;\n\t}\n\treturn 0;\n}\n```\n\n[对应的习题](https://www.luogu.com.cn/problem/P1591)\n\n\n\n### 二叉搜索树第K大节点\n\n```c++\n// 非递归，用栈来暂存\n// 思路：二叉搜索树的中序遍历（左根右）得到的序列是从小到大的序列，而找第k大节点，可以倒着找，（右根左）\nint kthLargest(TreeNode* root, int k) {\n    stack<TreeNode*> s;\n    TreeNode *cur = root;\n    while(cur != nullptr || !s.empty()){\n        if(cur != nullptr){\n            s.push(cur);\n            cur = cur->right;\n        }else{\n            cur = s.top();s.pop();\n            if(--k == 0)return cur->val;\n            cur = cur->left;\n        }\n    }\n    return -1;\n}\n```\n\n","slug":"C++ 算法模板","published":1,"updated":"2023-02-23T14:36:49.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clehaba8p0001tcvchb2b1npb","content":"<h3 id=\"常见算法\"><a href=\"#常见算法\" class=\"headerlink\" title=\"常见算法\"></a>常见算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sscanf</span>(,,)\t转换字符串的格式，如</span><br><span class=\"line\">\t<span class=\"built_in\">sscanf</span>(s,<span class=\"string\">&quot;%d&quot;</span>,&amp;a) 将字符串s转换为整型并存储到a中</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(,,,,,) 格式化输出\t如</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(s,<span class=\"string\">&quot;%d%d%d&quot;</span>,a,b,c) 将a,b,c的值按%d%d%d输出到字符串s中</span><br><span class=\"line\"></span><br><span class=\"line\">ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);\t关闭c++cin和cout与scanf和printf的流相关。</span><br><span class=\"line\">cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(a,a+n,cmp);</span><br><span class=\"line\"><span class=\"built_in\">sort</span>(a,b,cmp);\t将a，到b范围内数据排序，自定义排序方式cmp函数构造，对自己定义的结构体数组排序时也要用cmp。如果认为第一个参数比第二个小，也就是第一个参数需要排在第二个参数前面时返回<span class=\"literal\">true</span>，反之返回 <span class=\"literal\">false</span>。系统默认a&lt;b时返回<span class=\"literal\">true</span>，于是从小到大排。而上面的例子是当b小于a时，认为a小于b。所以排序的结果就是将元素按从大到小的顺序排序。</span><br><span class=\"line\">重载&lt;运算符 </span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a, <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a&lt;b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">返回值作用同sort的cmp，需要a排在b前时返回<span class=\"literal\">true</span>。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">qsort</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i=l,j=r;\t\t\t\t<span class=\"comment\">//i，j工作指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> pivot = d[(l+r)/<span class=\"number\">2</span>];\t\t<span class=\"comment\">//选择中间元素作为枢纽，当然也可以选择其他位置的元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i&lt;=j)&#123;\t\t\t\t<span class=\"comment\">//当i大于j时完成一次划分</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(d[j]&gt;pivot)j--;\t<span class=\"comment\">//从右向左找比枢纽小的数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(d[i]&lt;pivot)i++;\t<span class=\"comment\">//从左向右找比枢纽大的数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i&lt;=j)&#123;\t\t\t\t<span class=\"comment\">//不加‘=’的话，当i==j 且d[i]==pivot时，会死循环\t如：1 2 4 5 4序列</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> temp=d[i];d[i]=d[j];d[j]=temp;\t<span class=\"comment\">//交换d[i]，d[j]的值</span></span><br><span class=\"line\">\t\t\tj--;i++;\t\t\t<span class=\"comment\">//i，j移向各自的下一位</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t\t\t\t\t\t\t<span class=\"comment\">//划分成的两部分继续进行划分</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i&lt;r)<span class=\"built_in\">qsort</span>(i,r);\t\t\t<span class=\"comment\">//剩下的右半部分</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(j&gt;l)<span class=\"built_in\">qsort</span>(l,j);\t\t\t<span class=\"comment\">//剩下的左半部分</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"找第K小的元素（可以开O2的话，直接快排完所有元素大概率能过）\"><a href=\"#找第K小的元素（可以开O2的话，直接快排完所有元素大概率能过）\" class=\"headerlink\" title=\"找第K小的元素（可以开O2的话，直接快排完所有元素大概率能过）\"></a>找第K小的元素（可以开O2的话，直接快排完所有元素大概率能过）</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">qsort_to_find_nth</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> ind)</span></span>&#123;\t<span class=\"comment\">//查找第ind个元素，从第1个元素开始计数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> i=l,j=r;\t\t\t\t<span class=\"comment\">//i，j工作指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> pivot=d[(l+r)/<span class=\"number\">2</span>];\t\t<span class=\"comment\">//选中间元素为枢纽</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i&lt;=j)&#123;\t\t\t\t<span class=\"comment\">//当i大于j时完成一次划分，此时i，j中剩一个元素时，且那个元素是序列是ind是走最后的else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(d[i]&lt;pivot)i++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(d[j]&gt;pivot)j--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i&lt;=j)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(d[i],d[j]);</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ind&lt;=j)<span class=\"built_in\">qsort_to_find_nth</span>(l,j,ind);\t\t<span class=\"comment\">//当i，j中间剩下的那个元素是序列是ind时结束</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ind&gt;=i)<span class=\"built_in\">qsort_to_find_nth</span>(i,r,ind);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> cout&lt;&lt;d[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速幂\"><a href=\"#快速幂\" class=\"headerlink\" title=\"快速幂\"></a>快速幂</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一般的快速幂（一般会让求余数）</span><br><span class=\"line\">    如：base^index mod c\t\t\t\t<span class=\"comment\">//index在c++中是关键字，一下用indx代替</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        ans = (ans%c*(base%c))%c;\t<span class=\"comment\">//等价于 ans = (ans*base)%c</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tans %= c;\t\t\t\t\t\t<span class=\"comment\">//最后再求一次于。因为：(a*b*c*d)%e == ((a%e)*(b%e)*(c%e)*(d%e))%e</span></span><br><span class=\"line\"></span><br><span class=\"line\">优化一：把base的index次方看成base的index/<span class=\"number\">2</span>次方的平方和index%<span class=\"number\">2</span>次方的乘积 </span><br><span class=\"line\">    即：base^index = base^(index/<span class=\"number\">2</span>)*base^(index/<span class=\"number\">2</span>)*base^(index%<span class=\"number\">2</span>) 然后递归</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"built_in\">qpow</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> base, <span class=\"type\">long</span> <span class=\"type\">long</span> indx, <span class=\"type\">long</span> <span class=\"type\">long</span> c)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(indx == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(indx == <span class=\"number\">1</span>)<span class=\"keyword\">return</span> base;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> ans = (<span class=\"built_in\">qpow</span>(base,index/<span class=\"number\">2</span>,c))%c;\t<span class=\"comment\">//先把指数拆两半，每一半的结果再%c</span></span><br><span class=\"line\">            ans = ((ans%c)*(ans%c))%c;\t\t\t\t\t<span class=\"comment\">//把两半对c的余数的乘积对c求余数，这样写是避免爆long long</span></span><br><span class=\"line\">            \t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//即：(ans*ans)%c = ((ans%c)*(ans%c))%c</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index%<span class=\"number\">2</span> == <span class=\"number\">1</span>) ans = ((ans%c)*(base%c))%c;<span class=\"comment\">//判断index是否为奇数，奇数得(ans*base)%c</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans = <span class=\"built_in\">qpow</span>(base, indx, c);</span><br><span class=\"line\">\tans %= c;\t\t\t\t<span class=\"comment\">//以免出现index等于1时，没对c取余</span></span><br><span class=\"line\"></span><br><span class=\"line\">优化二：将index转化为二进制</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> base, <span class=\"type\">long</span> <span class=\"type\">long</span> indx, <span class=\"type\">long</span> <span class=\"type\">long</span> c)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1</span>,tmp=base;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(indx != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(indx&amp;<span class=\"number\">1</span>)\t\t\t\t\t\t<span class=\"comment\">//1表示二进制中最后一位为1，用于判断indx最后一位是否为1</span></span><br><span class=\"line\">                ans = ((ans%c)*(temp%c))%c;\t<span class=\"comment\">//indx最后一位为1，实质就是指indx是个奇数，所以要算(ans*temp)%c</span></span><br><span class=\"line\">            temp = ((temp%c)*(temp%c))%c;\t<span class=\"comment\">//temp自乘，相当于再算temp*temp % c</span></span><br><span class=\"line\">            indx = indx&gt;&gt;<span class=\"number\">1</span>;\t\t\t\t\t<span class=\"comment\">//indx左移一位，相当于除以二</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \tans %= c;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans = <span class=\"built_in\">qpow</span>(base,indx,c);</span><br><span class=\"line\">\tans %= c;\t\t\t\t\t\t\t\t<span class=\"comment\">//避免出现indx为0，c为1时ans为1，结果没有取余的情况</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"KMP算法\"><a href=\"#KMP算法\" class=\"headerlink\" title=\"KMP算法\"></a>KMP算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.matrix67.com/blog/archives/115\">KMPblog(不推荐)</a> \t<a href=\"https://www.luogu.com.cn/problem/solution/P3375\">KMP题解</a></p>\n<p><a href=\"https://blog.csdn.net/qq_30974369/article/details/74936845\">Trie树</a></p>\n<p><a href=\"https://www.cnblogs.com/cjyyb/p/7196308.html\">AC自动机</a></p>\n<p><a href=\"https://xminh.github.io/2018/06/02/KMP+AC%E8%87%AA%E5%8A%A8%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html\">AC自动机学习笔记</a></p>\n<h3 id=\"高精度模板\"><a href=\"#高精度模板\" class=\"headerlink\" title=\"高精度模板\"></a>高精度模板</h3><h4 id=\"加法——两个数相加后的位数最多比两个数中位数较大的一个多一位\"><a href=\"#加法——两个数相加后的位数最多比两个数中位数较大的一个多一位\" class=\"headerlink\" title=\"加法——两个数相加后的位数最多比两个数中位数较大的一个多一位\"></a>加法——两个数相加后的位数最多比两个数中位数较大的一个多一位</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> s1[<span class=\"number\">1001</span>];\t\t\t<span class=\"comment\">//用字符串保存大数</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> s2[<span class=\"number\">1001</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> d1[<span class=\"number\">1001</span>];\t\t\t<span class=\"comment\">//实际运算使用的数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> d2[<span class=\"number\">1001</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans[<span class=\"number\">1001</span>];\t\t\t<span class=\"comment\">//最终结果保存的数组</span></span><br><span class=\"line\">\tcin&gt;&gt;s1&gt;&gt;s2;</span><br><span class=\"line\">\t<span class=\"type\">int</span> s1_l = <span class=\"built_in\">strlen</span>(s1);</span><br><span class=\"line\">\t<span class=\"type\">int</span> s2_l = <span class=\"built_in\">strlen</span>(s2);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s1_l;i++)&#123;</span><br><span class=\"line\">\t\td1[i] = s1[s1_l - i - <span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;\t\t<span class=\"comment\">//将字符串转化为整型数字，并把低位储存在数组的低位</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s2_l;i++)&#123;</span><br><span class=\"line\">\t\td2[i] = s2[s2_l - i - <span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ca = <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">//ca用于保存是否进位，ca只会是0或1，因为最多进1，初始值为0</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> max_len = <span class=\"built_in\">max</span>(s1_l,s2_l);\t\t\t<span class=\"comment\">//使用较大的一个数的位数作为循环的次数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;max_len;i++)&#123;</span><br><span class=\"line\">\t\tans[i] = d1[i] + d2[i] + ca;\t\t<span class=\"comment\">//对应位数相加并加上上一次的进位</span></span><br><span class=\"line\">\t\tca = ans[i] / <span class=\"number\">10</span>;\t\t\t\t\t<span class=\"comment\">//将十位上的数赋给ca</span></span><br><span class=\"line\">\t\tans[i] %= <span class=\"number\">10</span>;\t\t\t\t\t\t<span class=\"comment\">//数组的每一个元素仅保留一位</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ca != <span class=\"number\">0</span>)cout&lt;&lt;ca;\t\t\t\t\t<span class=\"comment\">//若最后一次有进位就先输出它</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=max_len<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;ans[i];\t\t\t\t\t\t<span class=\"comment\">//倒着输出剩下的位</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"乘法——两个数相乘结果最大有它俩位数之和位\"><a href=\"#乘法——两个数相乘结果最大有它俩位数之和位\" class=\"headerlink\" title=\"乘法——两个数相乘结果最大有它俩位数之和位\"></a>乘法——两个数相乘结果最大有它俩位数之和位</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\tcin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span> s1[<span class=\"number\">2005</span>],s2[<span class=\"number\">2005</span>];\t\t\t\t\t\t\t<span class=\"comment\">//两个字符串用于储存最初的大数字符</span></span><br><span class=\"line\">\tcin&gt;&gt;s1&gt;&gt;s2;\t\t\t\t\t\t\t\t\t<span class=\"comment\">//不要忘记输入，不要忘记输入，不要忘记输入</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> d1[<span class=\"number\">2005</span>]=&#123;<span class=\"number\">0</span>&#125;,d2[<span class=\"number\">2005</span>]=&#123;<span class=\"number\">0</span>&#125;,ans[<span class=\"number\">4010</span>]=&#123;<span class=\"number\">0</span>&#125;;   <span class=\"comment\">//两个整型数组用于储存俩个大数，ans数组用于存储最终结果</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> s1_l = <span class=\"built_in\">strlen</span>(s1);</span><br><span class=\"line\">\t<span class=\"type\">int</span> s2_l = <span class=\"built_in\">strlen</span>(s2);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s1_l;i++)</span><br><span class=\"line\">\t\td1[i] = s1[s1_l - i <span class=\"number\">-1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;\t\t<span class=\"comment\">//将字符串转化位整型</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s2_l;i++)</span><br><span class=\"line\">\t\td2[i] = s2[s2_l - i <span class=\"number\">-1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s1_l;i++)\t\t\t\t<span class=\"comment\">//模拟竖式乘法，这里没进位。ans中现在保存的数都是竖式中一列的和</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;s2_l;j++)</span><br><span class=\"line\">\t\t\tans[i+j] += d1[i] * d2[j];\t\t<span class=\"comment\">//注意此处是 +=</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> indx = s1_l + s2_l;\t\t\t\t<span class=\"comment\">//indx保存的是最终结果的位数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;indx;i++)&#123;\t<span class=\"comment\">//进位操作，当ans数组的元素不止一位时，把个位留下，其他位加到下一个元素中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ans[i]&gt;<span class=\"number\">9</span>)&#123;</span><br><span class=\"line\">\t\t\tans[i+<span class=\"number\">1</span>] += ans[i] / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\tans[i] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ans[indx] == <span class=\"number\">0</span> &amp;&amp; indx&gt;=<span class=\"number\">1</span>)indx--;\t\t<span class=\"comment\">//计算实际位数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=indx;i&gt;=<span class=\"number\">0</span>;i--)cout&lt;&lt;ans[i];\t\t<span class=\"comment\">//输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高精度-单精度\"><a href=\"#高精度-单精度\" class=\"headerlink\" title=\"高精度*单精度\"></a>高精度*单精度</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> d[<span class=\"number\">5000</span>]=&#123;<span class=\"number\">1</span>&#125;;\t<span class=\"comment\">//给数组的第一位赋初值</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i,j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ca = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;num;j++)&#123;</span><br><span class=\"line\">\t\t\td[j] = i * d[j] + ca;\t<span class=\"comment\">//单精度*高精度的每一位 + 上一次的进位</span></span><br><span class=\"line\">\t\t\tca = d[j] /<span class=\"number\">10</span>;\t\t\t<span class=\"comment\">//当前位只保留个位</span></span><br><span class=\"line\">\t\t\td[j] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(ca&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\td[j] = ca%<span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\tca /= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\tj++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnum = j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;num;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(d[i] == a)ret++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\tcin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> temp,target;</span><br><span class=\"line\">\t\tcin&gt;&gt;temp&gt;&gt;target;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ans = <span class=\"built_in\">func</span>(temp,target);</span><br><span class=\"line\">\t\tcout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.luogu.com.cn/problem/P1591\">对应的习题</a></p>\n<h3 id=\"二叉搜索树第K大节点\"><a href=\"#二叉搜索树第K大节点\" class=\"headerlink\" title=\"二叉搜索树第K大节点\"></a>二叉搜索树第K大节点</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非递归，用栈来暂存</span></span><br><span class=\"line\"><span class=\"comment\">// 思路：二叉搜索树的中序遍历（左根右）得到的序列是从小到大的序列，而找第k大节点，可以倒着找，（右根左）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">kthLargest</span><span class=\"params\">(TreeNode* root, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">    TreeNode *cur = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur != <span class=\"literal\">nullptr</span> || !s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur != <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(cur);</span><br><span class=\"line\">            cur = cur-&gt;right;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur = s.<span class=\"built_in\">top</span>();s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(--k == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> cur-&gt;val;</span><br><span class=\"line\">            cur = cur-&gt;left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"widget":{"top":[{"class_name":{"id_name":null,"name":null,"icon":null,"html":null}}],"bottom":[{"class_name":"user-map","id_name":"user-map","name":"访客地图","icon":"fas fa-heartbeat","order":null,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}}},"cover":false,"excerpt":"","more":"<h3 id=\"常见算法\"><a href=\"#常见算法\" class=\"headerlink\" title=\"常见算法\"></a>常见算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sscanf</span>(,,)\t转换字符串的格式，如</span><br><span class=\"line\">\t<span class=\"built_in\">sscanf</span>(s,<span class=\"string\">&quot;%d&quot;</span>,&amp;a) 将字符串s转换为整型并存储到a中</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(,,,,,) 格式化输出\t如</span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(s,<span class=\"string\">&quot;%d%d%d&quot;</span>,a,b,c) 将a,b,c的值按%d%d%d输出到字符串s中</span><br><span class=\"line\"></span><br><span class=\"line\">ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);\t关闭c++cin和cout与scanf和printf的流相关。</span><br><span class=\"line\">cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(a,a+n,cmp);</span><br><span class=\"line\"><span class=\"built_in\">sort</span>(a,b,cmp);\t将a，到b范围内数据排序，自定义排序方式cmp函数构造，对自己定义的结构体数组排序时也要用cmp。如果认为第一个参数比第二个小，也就是第一个参数需要排在第二个参数前面时返回<span class=\"literal\">true</span>，反之返回 <span class=\"literal\">false</span>。系统默认a&lt;b时返回<span class=\"literal\">true</span>，于是从小到大排。而上面的例子是当b小于a时，认为a小于b。所以排序的结果就是将元素按从大到小的顺序排序。</span><br><span class=\"line\">重载&lt;运算符 </span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a, <span class=\"type\">const</span> <span class=\"type\">int</span> &amp;b)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a&lt;b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">返回值作用同sort的cmp，需要a排在b前时返回<span class=\"literal\">true</span>。</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">qsort</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i=l,j=r;\t\t\t\t<span class=\"comment\">//i，j工作指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> pivot = d[(l+r)/<span class=\"number\">2</span>];\t\t<span class=\"comment\">//选择中间元素作为枢纽，当然也可以选择其他位置的元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i&lt;=j)&#123;\t\t\t\t<span class=\"comment\">//当i大于j时完成一次划分</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(d[j]&gt;pivot)j--;\t<span class=\"comment\">//从右向左找比枢纽小的数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(d[i]&lt;pivot)i++;\t<span class=\"comment\">//从左向右找比枢纽大的数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i&lt;=j)&#123;\t\t\t\t<span class=\"comment\">//不加‘=’的话，当i==j 且d[i]==pivot时，会死循环\t如：1 2 4 5 4序列</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> temp=d[i];d[i]=d[j];d[j]=temp;\t<span class=\"comment\">//交换d[i]，d[j]的值</span></span><br><span class=\"line\">\t\t\tj--;i++;\t\t\t<span class=\"comment\">//i，j移向各自的下一位</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t\t\t\t\t\t\t<span class=\"comment\">//划分成的两部分继续进行划分</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i&lt;r)<span class=\"built_in\">qsort</span>(i,r);\t\t\t<span class=\"comment\">//剩下的右半部分</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(j&gt;l)<span class=\"built_in\">qsort</span>(l,j);\t\t\t<span class=\"comment\">//剩下的左半部分</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"找第K小的元素（可以开O2的话，直接快排完所有元素大概率能过）\"><a href=\"#找第K小的元素（可以开O2的话，直接快排完所有元素大概率能过）\" class=\"headerlink\" title=\"找第K小的元素（可以开O2的话，直接快排完所有元素大概率能过）\"></a>找第K小的元素（可以开O2的话，直接快排完所有元素大概率能过）</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">qsort_to_find_nth</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> ind)</span></span>&#123;\t<span class=\"comment\">//查找第ind个元素，从第1个元素开始计数</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> i=l,j=r;\t\t\t\t<span class=\"comment\">//i，j工作指针</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> pivot=d[(l+r)/<span class=\"number\">2</span>];\t\t<span class=\"comment\">//选中间元素为枢纽</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i&lt;=j)&#123;\t\t\t\t<span class=\"comment\">//当i大于j时完成一次划分，此时i，j中剩一个元素时，且那个元素是序列是ind是走最后的else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(d[i]&lt;pivot)i++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(d[j]&gt;pivot)j--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i&lt;=j)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(d[i],d[j]);</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t\tj--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ind&lt;=j)<span class=\"built_in\">qsort_to_find_nth</span>(l,j,ind);\t\t<span class=\"comment\">//当i，j中间剩下的那个元素是序列是ind时结束</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ind&gt;=i)<span class=\"built_in\">qsort_to_find_nth</span>(i,r,ind);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> cout&lt;&lt;d[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速幂\"><a href=\"#快速幂\" class=\"headerlink\" title=\"快速幂\"></a>快速幂</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一般的快速幂（一般会让求余数）</span><br><span class=\"line\">    如：base^index mod c\t\t\t\t<span class=\"comment\">//index在c++中是关键字，一下用indx代替</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        ans = (ans%c*(base%c))%c;\t<span class=\"comment\">//等价于 ans = (ans*base)%c</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tans %= c;\t\t\t\t\t\t<span class=\"comment\">//最后再求一次于。因为：(a*b*c*d)%e == ((a%e)*(b%e)*(c%e)*(d%e))%e</span></span><br><span class=\"line\"></span><br><span class=\"line\">优化一：把base的index次方看成base的index/<span class=\"number\">2</span>次方的平方和index%<span class=\"number\">2</span>次方的乘积 </span><br><span class=\"line\">    即：base^index = base^(index/<span class=\"number\">2</span>)*base^(index/<span class=\"number\">2</span>)*base^(index%<span class=\"number\">2</span>) 然后递归</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"built_in\">qpow</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> base, <span class=\"type\">long</span> <span class=\"type\">long</span> indx, <span class=\"type\">long</span> <span class=\"type\">long</span> c)&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(indx == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(indx == <span class=\"number\">1</span>)<span class=\"keyword\">return</span> base;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> ans = (<span class=\"built_in\">qpow</span>(base,index/<span class=\"number\">2</span>,c))%c;\t<span class=\"comment\">//先把指数拆两半，每一半的结果再%c</span></span><br><span class=\"line\">            ans = ((ans%c)*(ans%c))%c;\t\t\t\t\t<span class=\"comment\">//把两半对c的余数的乘积对c求余数，这样写是避免爆long long</span></span><br><span class=\"line\">            \t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//即：(ans*ans)%c = ((ans%c)*(ans%c))%c</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index%<span class=\"number\">2</span> == <span class=\"number\">1</span>) ans = ((ans%c)*(base%c))%c;<span class=\"comment\">//判断index是否为奇数，奇数得(ans*base)%c</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans = <span class=\"built_in\">qpow</span>(base, indx, c);</span><br><span class=\"line\">\tans %= c;\t\t\t\t<span class=\"comment\">//以免出现index等于1时，没对c取余</span></span><br><span class=\"line\"></span><br><span class=\"line\">优化二：将index转化为二进制</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> base, <span class=\"type\">long</span> <span class=\"type\">long</span> indx, <span class=\"type\">long</span> <span class=\"type\">long</span> c)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"type\">long</span> <span class=\"type\">long</span> ans=<span class=\"number\">1</span>,tmp=base;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(indx != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(indx&amp;<span class=\"number\">1</span>)\t\t\t\t\t\t<span class=\"comment\">//1表示二进制中最后一位为1，用于判断indx最后一位是否为1</span></span><br><span class=\"line\">                ans = ((ans%c)*(temp%c))%c;\t<span class=\"comment\">//indx最后一位为1，实质就是指indx是个奇数，所以要算(ans*temp)%c</span></span><br><span class=\"line\">            temp = ((temp%c)*(temp%c))%c;\t<span class=\"comment\">//temp自乘，相当于再算temp*temp % c</span></span><br><span class=\"line\">            indx = indx&gt;&gt;<span class=\"number\">1</span>;\t\t\t\t\t<span class=\"comment\">//indx左移一位，相当于除以二</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \tans %= c;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans = <span class=\"built_in\">qpow</span>(base,indx,c);</span><br><span class=\"line\">\tans %= c;\t\t\t\t\t\t\t\t<span class=\"comment\">//避免出现indx为0，c为1时ans为1，结果没有取余的情况</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"KMP算法\"><a href=\"#KMP算法\" class=\"headerlink\" title=\"KMP算法\"></a>KMP算法</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.matrix67.com/blog/archives/115\">KMPblog(不推荐)</a> \t<a href=\"https://www.luogu.com.cn/problem/solution/P3375\">KMP题解</a></p>\n<p><a href=\"https://blog.csdn.net/qq_30974369/article/details/74936845\">Trie树</a></p>\n<p><a href=\"https://www.cnblogs.com/cjyyb/p/7196308.html\">AC自动机</a></p>\n<p><a href=\"https://xminh.github.io/2018/06/02/KMP+AC%E8%87%AA%E5%8A%A8%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html\">AC自动机学习笔记</a></p>\n<h3 id=\"高精度模板\"><a href=\"#高精度模板\" class=\"headerlink\" title=\"高精度模板\"></a>高精度模板</h3><h4 id=\"加法——两个数相加后的位数最多比两个数中位数较大的一个多一位\"><a href=\"#加法——两个数相加后的位数最多比两个数中位数较大的一个多一位\" class=\"headerlink\" title=\"加法——两个数相加后的位数最多比两个数中位数较大的一个多一位\"></a>加法——两个数相加后的位数最多比两个数中位数较大的一个多一位</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> s1[<span class=\"number\">1001</span>];\t\t\t<span class=\"comment\">//用字符串保存大数</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> s2[<span class=\"number\">1001</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> d1[<span class=\"number\">1001</span>];\t\t\t<span class=\"comment\">//实际运算使用的数组</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> d2[<span class=\"number\">1001</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> ans[<span class=\"number\">1001</span>];\t\t\t<span class=\"comment\">//最终结果保存的数组</span></span><br><span class=\"line\">\tcin&gt;&gt;s1&gt;&gt;s2;</span><br><span class=\"line\">\t<span class=\"type\">int</span> s1_l = <span class=\"built_in\">strlen</span>(s1);</span><br><span class=\"line\">\t<span class=\"type\">int</span> s2_l = <span class=\"built_in\">strlen</span>(s2);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s1_l;i++)&#123;</span><br><span class=\"line\">\t\td1[i] = s1[s1_l - i - <span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;\t\t<span class=\"comment\">//将字符串转化为整型数字，并把低位储存在数组的低位</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s2_l;i++)&#123;</span><br><span class=\"line\">\t\td2[i] = s2[s2_l - i - <span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">int</span> ca = <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">//ca用于保存是否进位，ca只会是0或1，因为最多进1，初始值为0</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> max_len = <span class=\"built_in\">max</span>(s1_l,s2_l);\t\t\t<span class=\"comment\">//使用较大的一个数的位数作为循环的次数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;max_len;i++)&#123;</span><br><span class=\"line\">\t\tans[i] = d1[i] + d2[i] + ca;\t\t<span class=\"comment\">//对应位数相加并加上上一次的进位</span></span><br><span class=\"line\">\t\tca = ans[i] / <span class=\"number\">10</span>;\t\t\t\t\t<span class=\"comment\">//将十位上的数赋给ca</span></span><br><span class=\"line\">\t\tans[i] %= <span class=\"number\">10</span>;\t\t\t\t\t\t<span class=\"comment\">//数组的每一个元素仅保留一位</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ca != <span class=\"number\">0</span>)cout&lt;&lt;ca;\t\t\t\t\t<span class=\"comment\">//若最后一次有进位就先输出它</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=max_len<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">\t\tcout&lt;&lt;ans[i];\t\t\t\t\t\t<span class=\"comment\">//倒着输出剩下的位</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"乘法——两个数相乘结果最大有它俩位数之和位\"><a href=\"#乘法——两个数相乘结果最大有它俩位数之和位\" class=\"headerlink\" title=\"乘法——两个数相乘结果最大有它俩位数之和位\"></a>乘法——两个数相乘结果最大有它俩位数之和位</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\tcin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">char</span> s1[<span class=\"number\">2005</span>],s2[<span class=\"number\">2005</span>];\t\t\t\t\t\t\t<span class=\"comment\">//两个字符串用于储存最初的大数字符</span></span><br><span class=\"line\">\tcin&gt;&gt;s1&gt;&gt;s2;\t\t\t\t\t\t\t\t\t<span class=\"comment\">//不要忘记输入，不要忘记输入，不要忘记输入</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> d1[<span class=\"number\">2005</span>]=&#123;<span class=\"number\">0</span>&#125;,d2[<span class=\"number\">2005</span>]=&#123;<span class=\"number\">0</span>&#125;,ans[<span class=\"number\">4010</span>]=&#123;<span class=\"number\">0</span>&#125;;   <span class=\"comment\">//两个整型数组用于储存俩个大数，ans数组用于存储最终结果</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> s1_l = <span class=\"built_in\">strlen</span>(s1);</span><br><span class=\"line\">\t<span class=\"type\">int</span> s2_l = <span class=\"built_in\">strlen</span>(s2);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s1_l;i++)</span><br><span class=\"line\">\t\td1[i] = s1[s1_l - i <span class=\"number\">-1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;\t\t<span class=\"comment\">//将字符串转化位整型</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s2_l;i++)</span><br><span class=\"line\">\t\td2[i] = s2[s2_l - i <span class=\"number\">-1</span>] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s1_l;i++)\t\t\t\t<span class=\"comment\">//模拟竖式乘法，这里没进位。ans中现在保存的数都是竖式中一列的和</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;s2_l;j++)</span><br><span class=\"line\">\t\t\tans[i+j] += d1[i] * d2[j];\t\t<span class=\"comment\">//注意此处是 +=</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> indx = s1_l + s2_l;\t\t\t\t<span class=\"comment\">//indx保存的是最终结果的位数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;indx;i++)&#123;\t<span class=\"comment\">//进位操作，当ans数组的元素不止一位时，把个位留下，其他位加到下一个元素中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ans[i]&gt;<span class=\"number\">9</span>)&#123;</span><br><span class=\"line\">\t\t\tans[i+<span class=\"number\">1</span>] += ans[i] / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\tans[i] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ans[indx] == <span class=\"number\">0</span> &amp;&amp; indx&gt;=<span class=\"number\">1</span>)indx--;\t\t<span class=\"comment\">//计算实际位数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=indx;i&gt;=<span class=\"number\">0</span>;i--)cout&lt;&lt;ans[i];\t\t<span class=\"comment\">//输出</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高精度-单精度\"><a href=\"#高精度-单精度\" class=\"headerlink\" title=\"高精度*单精度\"></a>高精度*单精度</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> d[<span class=\"number\">5000</span>]=&#123;<span class=\"number\">1</span>&#125;;\t<span class=\"comment\">//给数组的第一位赋初值</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i,j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ca = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;num;j++)&#123;</span><br><span class=\"line\">\t\t\td[j] = i * d[j] + ca;\t<span class=\"comment\">//单精度*高精度的每一位 + 上一次的进位</span></span><br><span class=\"line\">\t\t\tca = d[j] /<span class=\"number\">10</span>;\t\t\t<span class=\"comment\">//当前位只保留个位</span></span><br><span class=\"line\">\t\t\td[j] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(ca&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\td[j] = ca%<span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\tca /= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\tj++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnum = j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;num;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(d[i] == a)ret++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\tcin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\tcin&gt;&gt;n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> temp,target;</span><br><span class=\"line\">\t\tcin&gt;&gt;temp&gt;&gt;target;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ans = <span class=\"built_in\">func</span>(temp,target);</span><br><span class=\"line\">\t\tcout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.luogu.com.cn/problem/P1591\">对应的习题</a></p>\n<h3 id=\"二叉搜索树第K大节点\"><a href=\"#二叉搜索树第K大节点\" class=\"headerlink\" title=\"二叉搜索树第K大节点\"></a>二叉搜索树第K大节点</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非递归，用栈来暂存</span></span><br><span class=\"line\"><span class=\"comment\">// 思路：二叉搜索树的中序遍历（左根右）得到的序列是从小到大的序列，而找第k大节点，可以倒着找，（右根左）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">kthLargest</span><span class=\"params\">(TreeNode* root, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    stack&lt;TreeNode*&gt; s;</span><br><span class=\"line\">    TreeNode *cur = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur != <span class=\"literal\">nullptr</span> || !s.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur != <span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(cur);</span><br><span class=\"line\">            cur = cur-&gt;right;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur = s.<span class=\"built_in\">top</span>();s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(--k == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> cur-&gt;val;</span><br><span class=\"line\">            cur = cur-&gt;left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"C++ 面向对象","date":"2022-04-24T02:29:36.000Z","_content":"\n## 基本概念_1——杂项篇\n\n\n\n```markdown\n一个类应该要有的函数：\n\tdefault constructor //默认构造函数\n\tvirtual destructor\t//带virtual关键字的析构函数\n\tcopy constructor\t//拷贝构造函数\n```\n\n\n\n#### What to do not How to do\n\n``` markdown\n\tClass 类，指具有相似特点的东西的抽象集合，类是虚的，是一种观点，像是对象的说明\n\tObject 实体，对象，是实例化的Class，是实的\n\tInterface 接口，即对象接收外部消息的途径，方法。主要是为了低耦合，隐藏内部实现\n注：Interface也可以理解成一个类对外公开的部分，可以是成员函数，也可以是成员变量\n\tEncapsulation 封装，把数据和对数据的操作放在对象里，隐藏数据的细节，其他对象只能通过受允许的操作来操作数据\n\t:: 域名解析符，用法<Class Name>::<function name>   不加Class Name时意味着为全局函数，同理 ::a++，意味着全局变量a++\n```\n\n#### 一些基本常识：\n\n```markdown\n\t{\n\t\tcode;\n\t}\n可以使用大括号来把一些代码括起来，其中的变量仅在大括号中存在，离开大括号就会自动销毁\n\n\t# 开头的代码是编译预处理指令 如：#ifndef xxx 如果没有定义xxx #define xxx就定义xxx  #endif 定义结束\n\t注：#ifndef 常用于可能会出现反复定义的情况时 如：a.h中include了b.h，b.h中include了a.h，导致a.h中的定义出现不止一次\n因此引入了标准头文件结构避免出现重复定义：\n\t#ifndef HEADER_FLAG\n\t#define HEADER_FLAG\n\t//code\n\t#endif\n\t一个头文件只放一个Class的声明（Class大概是只有声明）\n\t\"xxx.h\"\t用\"\"括起来的头文件，编译器会去当前目录查找 \n\t<xxx.h>\t用<>括起来的头文件，编译器会去系统目录查找\n\t<xxx>\tc++特有的插入方法\n\t*.h\t文件中放声明（只有头没有body）declaration  **全局变量的declaration用关键字 extern <var type> <var name>**\n该方式等价于对编译器说，我知道有一个全局变量，叫什么，什么类型，但我不知道它在哪里，然后编译器就会给它留个位置\n\t头文件 Header == interface\n\t*.cpp 文件中放定义（有头有body，实现）  definition，一个.cpp文件就是一个编译单元，在编译环节，编译器只会关注这一个编译单元，所以就是存在和其他编译单元同名的全局变量也是能通过编译的\n\tAbstract 抽象，只看某个层次，屏蔽其他部分的做法就叫抽象\n```\n\n```markdown\n一般来说a.h文件是用来给调用a.cpp文件中的实现的其他文件看的，a.cpp文件是用来实现的。但也有特例，如内联函数的定义就需要直接写在.h文件中\n```\n\n### [内联函数](#内联函数)\n\n#### 编译过程：\t\n\n```mermaid\ngraph LR;\n\tb(编译预处理) --> c[编译]\n\tc --> d[汇编]\n\td --> e(链接)\n```\n\n```mermaid\ngraph LR;\n\ta(.ii)-->b[.o]\n\tb-->c[.s]\n\tc-->d(.out)\n\tc-->e(.exe)\n```\n\n#### g++命令\n\n```markdown\n\t--save-temps  保留中间文件\n\t-Wall  输出所有可能的warning\n\t-c 只编译不链接\n```\n\n\n\n## 基本概念_2——变量篇\n\n#### 常识\n\n```markdown\n    local variable 本地变量，函数中定义的变量\n    parameters\t函数参数\n两种variable都是一样的，仅在对应函数运行时存在，放在本地\n```\n\n#### **重点**\n\n```markdown\n    field （一般）成员变量，类中的变量。存在于对应实例化的对象中，如，a，b都为A类的对象，则a中的成员变量值与b中可以不同\n```\n\n[参看检验代码_1 ](#分析类不同实例的成员变量值\t\t\t==检验代码_1==)\n\n```markdown\n注：c++对象中实际仅有成员变量，也就是说，A a，实际a指向的地址中只有a的成员变量，没有成员函数在里面\n```\n\n[参考检验代码_2](#探究c++对象实质\t\t\t==检验代码_2==)\n\n```markdown\n\tfield_function 成员函数，类的函数，属于类，不属于任何某个对象（实例）,相当于是该类所有对象的公共函数，但它（成员函数）会知道自己本次控制的是哪一个对象的成员变量\n注：实际就是采用了  this 是一个hidden parameter this的类型就是成员函数所属的类的指针，也就是说，所有的成员变量系统实际上是默认在其前面加上了this->，当然主动加上也是可以的\n\n\t对于成员变量和成员函数可以这样理解，动物会运动，运动就是一种动物类的成员函数，如鸟会飞，飞这个动作不是属于某个鸟的，而是鸟这类的。但每一个动物的大小，颜色属于成员变量，如某只鸟的颜色，大小，\n```\n\n\n\n## 基本概念_3——构造析构篇\n\n#### 构造函数\n\n```markdown\n\tconstructor 构造，构造函数。无返回类型和返回值，且与类同名。在对象实例化时自动调用（无法干预），也在此时传参数给构造函数。其他同成员函数\n```\n\n##### 例子 如：\n\n```c++\nclass Tree(){\n\tint i;\npublic:\n\tTree(int x);\t//类Tree的构造函数，这里的形参名必须和构造函数定义处的形参一致\t\n    void f();\n};\nTree::Tree(int x){\t\t//实现一些初始化的操作，实例化对象时调用\n    i = x;\n}\nint main(){\n    Tree t(12);\n}\n\n\n```\n\n### 析构函数\n\n```markdown\n\tdestructor 析构，析构函数。无返回类型，且与类同名，但前面多一个tilde ~符号。在对象要被结束掉时调用，无参数。析构意味着该对象的空间即将被收回，此时调用析构函数。\n```\n\n##### 例子 如：\n\n```c++\nclass Cat(){\n\tint i;\npublic:\n    Cat(int init);\n    ~Cat();\n    void func();\n}\n\nCat::Cat(int init){ //构造函数\n    i = init;\n}\nCat::~Cat(){\t\t//析构函数，一般执行释放系统资源等操作\n    cout << \"Game Over\" << endl;\n}\nint main(){\n \tcout << \"before create \" << endl;\n\t{\n    \tCat cat(1);\n\t}   \n    cout << \"after destructure\" << endl;\n}\n```\n\n\n\n## 基础概念_4——对象初始化 && new和delete\n\n#### 常识：\n\n```markdown\n\tc++中的struct和class基本是一样，都可以称为类，只是struct在没有声明访问属性的地方默认为public，而class默认为private。一般只有当类非常简单时用struct，其他情况都用class\n```\n\n```c++\nstruct X{\n    int i;\n    float f;\n    char c;\n};\nX x1 = {1, 1.1, 'c'};\t//结构体初始化的一种方式\n```\n\n#### 默认构造函数\n\n```markdown\n\tdefault constructor \t没有参数，有参数就不是默认构造函数\n如：\n\tclass Y{\n\t\tint a;\n\t\tpublic:\n\t\t\tY(int a);\t\t//有参数，不是默认构造函数\n\t};\n\t\n\tclass B{\n\t\tint b;\n\t\tpublic:\n\t\t\tB();\t\t//没有参数，是默认\n\t};\n```\n\n### new与delete\n\n```markdown\n\tnew------------对应-------------delete\n\tnew <class name> 申请对应类的空间并返回指向改空间的地址\n\tnew <class name>[<num>]------------对应-----------delete [] <class name>\n```\n\n#### 实现流程\n\n```mermaid\ngraph LR;\n\ta(new) --> b[系统申请一片内存空间]\n\tb --> c[调用类对应的构造函数]\n\tc --> d(返回该空间的地址)\n```\n\n```mermaid\ngraph LR;\n\ta(delete) --> b[调用类的析构函数]\n\tb --> c(回收内存空间)\n```\n\n#### 拓展：\n\n```markdown\n\tc++运行时，会有一个inch table用于记录动态申请空间的变量表，记录申请的大小（单位是byte）和地址（首地址），所以若指向某数组空间的指针++后，调用delete时会报错，因为inch table中只记录了首地址\n```\n\n#### 例子\n\n```c++\nint * psome = new int [10];\t\t//new 10个int \ndelete [] psome;\t\t\t//new时使用了[]，delete时也要用[]，不带[]只会执行第一个对象的析构函数，[]会提示系统，这里要析构多个对象，且会从最后一个对象开始析构\n注1：无论使不使用[]，空间都会收回，收回空间查inch table就可以知道要收回的大小和起始地址了，能运行但会死循环\n注2：delete可以delete NULL\n```\n\n[参考检验代码_3](#解密new与delete\t测试1\t不带[]\t\t==检验代码_3==)\n\n[参考检验代码_4](#解密new与delete\t测试2\t带[]\t==检验代码_4==)\n\n\n\n## 基础概念_5——访问控制&&初始化列表（成员变量初始化首选，且父类的初始化只能初始化列表，否则父类得有默认构造函数）\n\n```markdown\n 基础知识：\n \tpublic 公共的，任何人都可以访问\n \tprivate 私有的，只有这个类的成员函数可以访问这个类的成员变量或成员函数，子类也不能直接访问，这是对类来说的，如果是同一个类的不同对象则它们之间可以相互访问对方的private 成员变量\n \tprotected 受保护的，只有这个类自己和它的子类可以访问，在其他地方则不能直接使用\n \tfriends\t朋友，声明别的类，别的函数，或者别的类的某个函数是朋友，这样朋友就可以访问该类的private。一般用在运算符重载\n注：c++的访问控制只在编译环节存在，运行时其实没有访问控制。运行时对象b也可以访问对象a的私有变量和函数\n```\n\n[参考检验代码_5](#解密new与delete\t\t\t\t==检验代码_5==)\n\n\n```c++\n初始化：\n类中的成员变量可以在构造函数中实现“初始化”，这样写实际是赋值，并非初始化，当成员变量是一个类，系统会去找该类的默认构造函数，当其没有默认构造函数时，报错。\n如：\n\tclass A{\n\tprivate:\n\t\tint i;\n\t\tint *p;\n\tpublic:\n\t\tA(){p=0;i=0;}\t//在构造函数中初始化成员变量p和i\n\t\t~A();\n\t};\n\t\n使用初始化列表 格式：\t构造函数(形参):<成员变量1>(初始值1), <成员变量2>(初始值2){}\t\t\n\t\t\t\t\tname(args)[:init-list]{}\n如：\n\tclass A{\n\tprivate:\n\t\tint i;\n\t\tint *p;\n\tpublic:\n\t\tA():p(0), i(0){} //在构造函数:后使用初始化列表，这样写，p和i的初始化会在构造函数之前完成\n\t\t~A();\n\t};\n注：当初始化\n```\n\n### friend的使用\n\n```c++\n//注2：前项声明，一种用于通知编译器的方式，告诉编译器，有一个叫X的东西存在，因为Y中使用了X，不这样写会报错\nstruct X;\nstruct Y{\n    void f(X*);\t\t//任何指针的大小都是一样的，且没有用到X内部的成员，因此前项声明可以使用\n};\n\nclass X{\nprivate:\n    int i;\npublic:\n    void initialize();\n    friend void g(X*, int);\t//函数朋友\n    friend void Y::f(X*);\t//某个类的某个函数朋友，此处为Y类的f函数是X类朋友\n    friend struct Z;\t\t//类/结构体朋友\n    friend void h();\n};\n```\n\n### 特别注意\n\n```markdown\n实际上在c++中主要拿到对象的地址就可以为所欲为，哪怕成员变量是private一样想改就改\n```\n\n[参考检验代码_14](#C++ conversion\t\t\t\t==检验代码_14==)\n\n\n\n## 基础概念_6——组合，继承，软件重用\n\n### 类的组合  composition\n\n```markdown\n将一些已有的类的对象组合在一起拼凑成一个类，称为组合\n如：\n\t现在有一个class engine的对象和class tyre的对象，把它们组合在一起，拼凑成一个class car\n即：\n\tclass中的成员变量可以是其他的class的对象\n分类：\n\tFully:当一个类就是另一个类的一部分时称为fully\t就像肚子里的孩子\n\tBy reference:当一个类知道另一个类在哪里，能调用其方法，但其并非是它的一部分时称为by reference\t就像已经生出来的孩子\n\t\n在代码中，fully实际就是成员变量是一个类，而by reference是一个类的指针，指向的。\n\t一般当一个类是另一个类的一部分时用fully形式，当一个类属于另一个类但不是其一部分时用by reference形式\n如：\n\t人是一个类，书包是一个类，心脏是一个类，则心脏用fully形式，书包用by reference形式\n```\n\n#### 例子：\n\n```c++\nclass Person{...};\nclass Currency{...};\nclass SavingAccount{\n   \tpublic:\n    \tSavingsAccount(const char* name, const char* address, int cents); //构造函数，有参数所以不是默认构造函数\n    \t~SavingAccount();\t//析构函数\n    \tvoid print();\t\t//一般成员函数\n   \tprivate:\n    \tPerson m_saver;\t\t//fully形式的组合\n    \tCurrency m_balance;\t//fully形式的组合\n};\n\nSavingAccount::SavingAccount(const char* name, const char* address, int cents):m_saver(name, address), m_balance(0,cents){}; \t//SavingAccount的构造函数，需要负责把其fully形式的成员变量初始化，类成员变量也需要，否则系统会去找其类成员变量的默认构造函数\nSavingAccount::print(){\n    m_saver.print();\t//对象自己调用自己的print()\n    m_balance.print();\n}\n```\n\n### 类的继承 inheritance\n\n```markdown\n使用一个现有的类来改造，形成一个新的类\n如：\n\tstudent继承于person则称student是person的超类，因为student继承于person则person有的student都有，但student还有一些person没有的，所以称student是person的superset，即超集\n\n分类：\n\tBase\t基类\n\tSuper\t超类\n\tParent\t父类\n\tDerived\t派生类\n\tSub\t\t次类\n\tChild\t子类\n使用方法：class B : public A{};\t\tB继承于A\n```\n\n[参考检验代码_6](#继承初体验\t\t\t\t==检验代码_6==)\n\n### 知识点\n\n```markdown\n\t父类有的成员，子类继承后都会有，但是父类中private的成员子类不能直接用。相当于父辈给子辈留了一笔钱，但钱由信托保管，子辈不能直接使用。编译通不过。\n注：protected属性的成员则子类可以直接访问，相当于父类留了一些让子类访问父类private成员的接口，但这些接口别人不能使用\n```\n\n### 子类父类构造和析构的顺序\n\n```markdown\n构造\n\t先调用父类构造函数，然后调用子类构造函数，\n注：此时若父类没有默认构造函数，则需要在子类的构造函数中使用初始化列表的方式初始化父类且需要给其传参数，即使用构造函数初始化，而非默认构造函数，不这样的话，若父类无默认初始化构造函数编译时就会报错\n\n析构\n\t先调用子类的析构函数，再调用父类的析构函数\n```\n\n[参考检验代码_7](#继承再体验\t\t\t\t==检验代码_7==)\n\n### 名字隐藏（C++独有）\n\n```markdown\n\t当父类中有overload的成员函数，且和子类中的成员函数同名时，c++会自动隐藏父类中的那些成员函数，只保留的子类自己的成员函数\n注1：此时想调用父类的那些函数得用域解析符 ::\n注2：当子类和父类有同名且同参数的成员函数时，默认使用的是子类的成员函数，如果想要使用父类的则需要使用 域解析符 ::\n如：\n\tclass A{...};\n\tclass B : public A {...};\n\tB b;\n\tb.func();\t//使用B中的成员函数func\n\tb.A::func();//使用A中的成员函数func\n```\n\n[参考检验代码_8](#c++名字隐藏\t\t\t\t==检验代码_8==)\n\n\n\n## 基础概念_7——函数重载 &&内联函数\n\n### 函数重载\n\n```markdown\n重载——overloading\n\t指一些函数可以具有相同的函数名，但它们的参数不一样（类型，个数...），调用函数时编译器会根据给出的参数来判断调用的哪一个函数\n注：返回类型不能作为构成overloading的条件\n\n缺省值——default arguments（少用）\n\t可以预先给函数的形参赋上值\n\t写法：\n\t\tint func(int i, int j, int k=1, int m=2){};\n注1：没有缺省值的形参要放在有缺省值的形参前面\n注2：如果有多个编译单元，即.cpp文件，记得一起编译，否则会找不到定义\n```\n\n[参考检验代码_9](#C++重载\t\t\t\t==检验代码_9==)\n\n### 特别注意：\n\n```markdown\n\t缺省值一般是写在.h文件中，即写在函数声明中，当然函数的声明也可以写在.cpp文件中（这样的话，假如别人的函数实际上是没有缺省值的，但你在自己的.cpp文件中给它加上一个带有缺省值的声明也是可以的，且此时仅自己的.cpp文件中声明生效），且如果没有声明，只有定义也可以直接写在定义中\n```\n\n[参考检验代码_10](#C++缺省声明探究\t\t\t\t==检验代码_10==)\n\n### 内联函数\n\n```markdown\n提出原因：\n\t函数调用涉及一系列的压栈出栈操作，在存在同一个函数大量调用时，影响效率，因此提出了内联函数\n使用方法：\n\tinline <callback type> <function_name> (){}\n原理：\n\t当编译器检测到inline关键词时会将inline函数的代码嵌入到调用它的地方，且仍保持inline函数的独立性（函数有自己的变量，空间...）\n与C的#define的不同：\n\t#define不做类型检查，inline定义的函数会对参数做类型检查\n如：\n\t#define f(a) (a) + (a)\t\t//不会检查传来的参数是什么类型\n\tinline int f(int a){return a*2;} //会检查传来的参数是否是int类型\n注：\n\t当用户定义的inline太过复杂时，编译器可能会拒绝嵌入\n```\n\n### 例子\n\n```c++\ninline int func(int i){\n    return i*2;\n}\nint main(){\n    int a = 4;\n    int b = f(a);\n    return 0;\n}\n\n//实际上现在f(a)等价于 a + a，编译器会自己优化成这样\n```\n\n### 特别注意：\n\n```markdown\n内联函数的要求：\n\t当内联函数需要被其他编译单元调用时，需要将内联函数的函数体（即函数实现，定义）放在.h文件中，因为编译器要在调用的地方嵌入内联函数的代码，而编译器同一时间只能处理一个编译单元，所以必须在预处理时将内联代码放入调用其的编译单元内\n注1：只在本编译单元调用inline函数时，不用写到.h文件中（废话）\n注2：非常小的函数，编译器自动inline，太大的函数，inline无效，递归函数不要inline。建议只有两三行，且调用次数多的函数使用inline\n```\n\n[参考检验代码_11](#C++其他编译单元调用内联函数\t\t\t\t==检验代码_11==)\n\n### 类中的内联函数\n\n```markdown\n\t当在类中直接给出成员函数的body时，编译器默认为inline\n```\n\n```c++\nclass A\n{\npublic:\n\tvoid print() { cout << \"A::print\" << endl; } \t//默认为内联函数\n\tvoid test();\t\t\t\t\t\t\t\t//一般成员函数\n\tvoid inline_test();\t\t\t//这也是inline型，只是放在类外面\n\tvoid set_i(int ii) { i = ii; }\t\t\t\t // inline型成员函数\nprivate:\n\tint i;\n} void A::test()\n{ \t\t\t\t\t\t\t\t\t\t\t//一般成员函数的body\n\tcout << \"A::test()\" << endl;\n}\ninline void A::inline_test()   //inline型成员函数的body，inline关键字不能省\n{\n\tcout << \"inline A::inline_test()\" << endl;\n}\n```\n\n```markdown\n注：这样写，从运行的效果来说，如果inline型的成员变量访问该类的成员变量，实际相当于直接访问成员变量，如a.set_i(10)运行效率等价于a.i=10\n```\n\n\n\n## 基础概念_8——const\n\n```markdown\n基础知识：\n\t被const关键词修饰后，变量不能进行修改和再次赋值，但对于c++来说，const修饰后仍然还是变量，不是常数，仍然遵循一般变量的规则\nextern关键词可以声明该变量是一个定义在某处的变量\n如：\n\textern const int bufsize; //bufsize是某处的一个变量，且在此处是const的\nconst的使用：\n\t如果该变量用const修饰，且编译前已经知道了其具体值，此时则可以用于给数组确定大小，若编译前不知道值，则编译时报错，因为编译器不知道给该数组分配多大的空间\n如：\n\tconst int n = 12;\n\tint array[n];\t\t//可以使用\n\t\n\tint x;cin>>x;\n\tconst int size = x;\n\tint array[x];\t//报错，编译器不知道应该分配多大空间给array\n同理，用extern const int bufsize; 这样也不能用来给数组分配空间，因为编译器不知道bufsize到底有多大\n```\n\n### 指针和const\n\n```c++\nchar* const q = \"abc\";\t\t//q这个指针是const的，即其指向的地址不能改变\n*q = 'c';\t//可以\nq++;\t\t//不可以，其实就是指针的内容不能变，但指向的地址的内容可以变\n\nconst char* p = \"ABCD\";\t//q这个指针指向的内容是const的\n*p = 'b';\t//不可以，报错，即这个内容是不能改变的\t实际是不能通过p指针来修改那个内存单元，而非是那个内存单元不可修改\np++;\t//可以，指针的内容是可以变的\n```\n\n### ==总结==\n\n```c++\nconst 在*前时，指针指向的内容是const的，在*后时，指针是const的。\n如：\n\tPerson p1(\"Bob\", 200);\n\tconst Person* p = &p1;\t//指针指向的对象为const\n\tPerson const* p = &p1;\t//指针指向的对象为const\n\tPerson *const p = &p1;\t//指针为const\n注1：当指向的对象为const时，并非说对象不可修改，而是指不能被这个指针所修改\n    //一般用在，如要传一个对象给其他人，但直接传对象太麻烦了，要拷贝...，传指针快还方便，但害怕别人用传过去的指针修改对象，所以可以传const指针，这样就不能通过该指针修改了\n    \n注2：用指针指向写死的字符串时默认是const\t如： char *s = \"hello world\";这字符串是会放到代码段中，然后s指向其，编译器默认其为const\n//但char s[] = \"hello world\";则可以，因为系统会把代码段中的\"hello world\"拷贝到堆栈中的s数组中\n```\n\n[参考检验代码_12](#C++ const运用\t\t\t\t==检验代码_12==)\n\n### 其他\n\n```markdown\n在函数后面加上const，一般出现在类中，意味着该函数不能修改该类的成员变量的值\n注：此时该函数声明和定义的地方都得加上const\n如：\n\tclass A{\n\tpublic:\n\t\tA();\n\t\t~A();\n\t\tvoid test_func() const;\t\t//声明一个带有const关键字的成员函数\n\tprivate:\n\t\tint i;\n\t};\n\tvoid A::test_func() const{\t//带有const关键字的成员函数的定义\n\t\ti++;\t//报错，const类型的成员函数无法修改成员变量的值\n\t}\n注1：实现原理实际上是编译器把this改成了带const关键字的this，所以该函数通过this无法修改成员变量，因为const <pointer_type>* p，p所指内容无法通过p修改\n注2：如果在一个对象前面加上const则该对象就没法被修改了\n如：\n\tconst A a;\t//a的成员变量无法被修改，这样做没有意义\n```\n\n### 使用const来实现重载\n\n```markdown\n实际上就是默认参数this带了const关键字，所以可以重载\n```\n\n[参考检验代码_13](#C++ const运用_2\t\t\t\t==检验代码_13==)\n\n### 特别注意\n\n```markdown\n当对象带有const关键字时，要求将其所有成员变量在对象在初始化时都初始化（写在构造函数里面初始化和使用初始化列表初始化都可）。并且，如果要调用某个成员函数则该成员函数必须得有带const关键字的重载\n\t实际上是因为当一对象带有const关键字时，其调用成员函数时，它传递的this是带有const关键字。因此当其调用某一成员函数，且该成员函数没有带const的重载时，相当于找不到对应函数\n\n当对象有的成员变量是带有const关键字时，则这些成员变量需要在构造函数中初始化，且只能使用初始化列表初始化（只要成员变量带了const关键字，都必须使用初始化列表初始化）\n```\n\n\n\n## 基础概念_9——引用\treference\n\n### 介绍\n\n```markdown\n引用相当于给一个东西又取了一个名字\n如：\n\tchar c;\n\tchar& r = c;\t//即c和r是同一个字符的两个不同的名字\n使用方法：\n\t一般情况：\n\t\ttype& refname = name;\n\t\t类型& 引用的名字 = 被引用的目标;\n\t参数表或成员变量时：\n\t\ttype& refname\n注1：引用在定义时必须初始化，且让其初始化的东西必须是在内存空间有地址的\n如：\n\tint& z = i*3;\t//报错，因为i*3只有结果，但结果没有储存在内存中\n和const搭配\n\tconst int& z = x;\t//z是x的引用但不能通过z去修改x的值 即z是read-only reference\n\n注2：&也可以用在函数上\n如：\n\tint& func(); \t//即最后func函数返回的是一个int类型的引用\n\n注3：&不能当作overload的参考，即如果想重载，但两个函数只有&的区别，则报错\n如：\n\tvoid func(int& a);\n\tvoid func(int a);\n\tint x = 2;\n\tfunc(x);\t//报错，因为编译器不知道到底要找哪一个func函数\n\n注4：\n\t实际上，reference的实现就是靠的const point，只是为了少一些*所以提出了reference，且一旦实现了引用就没办法去看这个引用自己的地址了，以后对其的操作都是在对其引用对象操作\n```\n\n### 特别注意\n\n```markdown\nreferences和pointres的区别:\n\tref不能是null，point可以是\n\tref依赖于一个已经存在的变量，point则是独立于其他变量\n\tref一旦初始化后，就不能再改变引用对象，point可以改变指向对象\n\tref不能引用ref，point可以指向另外的point\n重点：\n   \t有指针的引用，但没有引用的指针，就近原则，*离p近，p就是指针。&离p近，p就是引用\n   \t即：\n   \t\tint&* p;\t //报错，这里的意思是*p的类型是int ref的，即这个指针是int ref类型，出现了引用的指针\n   \t\tvoid func(int*& p);\t //可以，这里指p是ref，它引用的变量是int ref类型的，即指针的引用\n  \t没有引用类型的数组，因为ref时间根本就不是实体，因此不能有数组\n```\n\n\n\n## 基础概念_10——转换 conversion，造型 && 多态性  && 覆写 overriding\n\n### 转换&&造型\n\n```markdown\n如果B类继承于A类，则主要是A可以使用的地方，B都可以使用。即子类的对象都可以当父类对象看待这叫upcast，向上造型\n把父类当子类看待叫downcast，有风险报错\ncast 造型和类型转换有区别\n```\n\n[参考检验代码_14](#C++ conversion\t\t\t\t==检验代码_14==)\n\n### 多态  polymorphism\n\n```markdown\nvirtual关键字：\n\t成员函数前带有virtual意味着，如果该类的子类中重新写的该成员函数，则子类的那个成员函数和父类的成员函数有关系，且只要继承树中有一个祖先的函数带了virtual，其子子孙孙的那个同名函数都会默认带上virtual不管用户自己写不写上virtual。一般都写上方便看\n多态的实现：\n\tupcast，向上造型，把子类对象当父类对象看待\n\tDynamic binding，动态绑定，运行时才知道到底调用的哪个函数\n```\n\n### 例子\n\n```c++\nvoid render(Shape* p){\n    p->render();\n}\n//即这个p->render函数实际调用的是哪个render函数要得到运行时，传的哪个shape或shape类的子类的对象才知道，它会去调用该对象对应的render，这就叫多态，这里p就是多态的\n//这里只要是shape或其子类都可以作为参数传进来\n//而virtual的意思就是告诉编译器，不要把后面的render函数写死了，实际调用的哪一个render得看运行时是那个对象\n```\n\n\n\n### ==特别注意==\n\n```markdown\n注1：\n\t任意一个类只要有带有virtual的成员函数则其大小就要比正常的类大且此时编译器会在实例化对象时给对象加上一个隐藏的成员变量vtpr指针，该指针指向这个类的vtable表，所有同一个类的实例化对象都指向同一个表，表中就是该类的各个虚函数的地址。而多态就是把子类的vtable中的虚函数地址换成了子类自己实现的那个虚函数的地址，如果子类没有自己声明那个虚函数则默认填上父类的那个虚函数的地址\n```\n\n[参考检验代码_15](#C++ virtual关键字\t\t\t\t检验代码_15)\n\n```markdown\n注2：\n\t通过赋值将子类对象赋值即 = 给父类对象，则父类的对象的vtpr仍不变。但可以通过指针来强行改变对象的vtpr指向。如果是通过指向子类对象的指针赋值给指向父类的指针，则实际是指针指向变了，俩对象都没变化\n```\n\n[参考检验代码_16](#C++ 魔改vtpr\t\t\t\t==检验代码_16==)\n\n```markdown\n注3：\n\t析构函数一般要用virtual格式，因为当把一个子类对象传给一个父类指针时，若delete该指针，当析构函数不是虚函数时，调用的就是父类的析构函数去析构的子类对象（静态绑定编译器直接把对应函数地址写死在那），只有当析构函数是虚函数时，才调用的是子类的析构函数（动态绑定编译器搞出个vtpr，用的时候去找vtable看用哪个函数）\n```\n\n### 覆写\n\n```markdown\n当子类覆写父类的成员函数后，又想使用父类的成员函数时要用 域解析符 ::\n如：\n\tclass A{\n\t\tpublic:\n\t\t\tvirtual void f();\n\t}\n\tclass B : public A{\n\t\tpublic:\n\t\t\tvirtual void f(){\n\t\t\t\tA::f();\n\t\t\t}\n\t}\n```\n\n[参考检验代码_17](#C++ 覆写\t\t\t\t==检验代码_17==)\n\n```markdown\n注：\n\t当父类中的某成员函数即有重载（overload）又有覆写（override），则子类必须覆写所有的重载，否则会发送name hidden（函数隐藏）\n\n重载和覆盖（覆写）的区别：\n\t虚函数是基类希望派生类重新定义的函数，派生类重新定义基类虚函数的做法叫做覆盖；重载就在允许在相同作用域中存在多个同名的函数，这些函数的参数表不同。重载的概念不属于面向对象编程，编译器根据函数不同的形参表对同名函数的名称做修饰，然后这些同名函数就成了不同的函数。重载的确定是在编译时确定，是静态的；虚函数则是在运行时动态确定。\n```\n\n\n\n## 基础概念_11——引用再体验\n\n```markdown\n注1：\n\t当类中的成员变量是引用类型时，必须使用初始化列表来初始化该成员变量\n如：\n\tclass A{\n\t\tprivate:\n\t\t\tint& i;\n\t\tpublic:\n\t\t\tX(int& a);\n\t}\n\tX::X(int& a) : i(a) {}\t\t//初始化列表也可以写在类外面\n```\n\n### ==特别注意==\n\n```markdown\n\t当函数要返回一个ref（引用）时，更倾向于返回一个非本地变量（因为离开该函数，本地变量就不存在了），然后就出现了，一个函数的返回值做了赋值符号的左值\n如：\n\tfunc(3) = 21;\n注：\n\t当函数的形参是ref类型时，向函数传递temporary value（就是那些在内存空间没有储存的地址的值，如23，i*2这种实际上是系统用一个const int型的匿名变量来接值，若非要用一个参数是const int& 的函数来接也是可以实现的😂）\n```\n\n[参考检验代码_18](#C++ 引用再体验\t\t\t\t==检验代码_18==)\n\n[参考检验代码_19](#C++ 匿名变量\t\t\t\t==检验代码_19==)\n\n```markdown\n结论：\n\t在给一些函数传递对象时的方法\nA a;\t\t\t//a是A类的对象\n法1：\n\tfunc(A x);\t//func函数的形参格式\n\tfunc(a);\t//直接传对象，系统会再拷贝一次对象a，占空间，耗时长\n法2：\n\tfunc(A* x);\n\tfunc(&a);\t//传a的地址，不安全，func可以通过x指针修改a中成员变量\n法3：\n\tfunc(const A* x);\t\n\tfunc(&a);\t//传a的地址，且不能通过x指针修改a中的成员变量\n法4：通法\n\tfunc(const A& x);\n\tfunc(a);\t//同上，只是不用在func函数中写很多的*，因为指针要使用时得用*来表示该操作是对指向空间的操作\n```\n\n### 细节\n\n```markdown\n注意区分函数返回的是值还是变量\n如：\n\tclass A{...};\n\tA func(){\t//这个返回的是一个变量，返回值可以作 = 的左值，但是作完左值后，就没办法控制这个变量了，它相当于消失了\n\t\tA a;\n\t\treturn a;\n\t}\n\tint func(){\t\t//这个返回的是一个值 10，返回值不可以作 = 的左值\n\t\tint i = 10;\n\t\treturn 10;\n\t}\n```\n\n\n\n## 基础概念_12——拷贝构造\n\n### ==特别注意==\n\n```markdown\n初始化initialization和赋值assignment的区别\n\tint i = 10;\t\t//初始化且赋值，初始化只能有一次\n\ti = 12;\t\t\t//赋值，赋值可以有多次\n\n注1：c++中既可以使用 = 来初始化对象，又可以使用 () 来初始化，使用 = 时需要存在一个构造函数的参数是 = 的右值\n如：\n\tclass A {\n\t\tpublic:\n\t\t\tA();\n\t\t\tA(int i);\n\t}\n\tA a; //调用A()构造函数\n\tA a = 10; //调用A(int i)构造函数\n\tA a(10); //等价于上一句\n注2：\n\t当初始化时使用另外一个同一个类的对象来初始化一个对象，这就叫拷贝构造\n拷贝构造函数，自己不定义时，编译器会自动给出（默认拷贝每一个成员变量，如果有另外的类的对象，则会用对应的那个类的拷贝构造来拷贝这个成员变量，这是成员对成员的拷贝，即有成员变量是类的对象时是通过拷贝构造函数来拷贝的，不是字节对字节的拷贝），格式就是构造函数只是参数是这类的对象的const 引用\n如：\n\tclass A {\n\t\tpublic:\n\t\t\tA();\t//默认构造函数\n\t\t\tA(const A& );\t//拷贝构造函数，& 不能省，不然编译器会告诉你，你写错了🤣，因为不写&就会反复发生拷贝构造还没法跳出循环\n\t\t\tA(int i);\t//自定义构造函数\n\t}\n\tA a; //调用A()构造函数\n\tA a = 10; //调用A(int i)构造函数\n\tA a(10); //等价于上一句 \n注3：当类中的成员变量有指针时，拷贝构造函数默认会把拷贝出来的对象的那个指针成员变量指向，被拷贝的对象的那个对应的指针指向的内存空间\n```\n\n```markdown\n拷贝构造发生在用一个对象去初始化的另一个对象时，有显然情景和隐藏情景\n显然情景：\n\tA a;\n\tA b = a;\t\t//显然用一个对象去初始化另一个对象\n\tA b(a);\t\t//等价于上一条语句，只是写的方式不一样\n隐藏情景——1：\n\tfunc(A b);\n\tA a;\n\tfunc(a);\t//在函数调用传递参数时发生拷贝构造\n隐藏情景——2：\n\tA func(...);\n\tA a = func(...);\t//在函数返回时发生拷贝构造\n注：\n\t把拷贝构造函数放在private下面，可以让别人没法用该类的对象来构造另一个对象，不能拿来直接当函数参数传递\n```\n\n\n\n## 基础概念_13——静态 Static\n\n```markdown\nstatic——c：\n\t一个全局变量是static的指该变量只在那个.c文件中有效\n\t一个本地变量是static的指该本地变量具有持久储存（离开这个函数，进入其他函数，该变量依然存在不会被销毁，实际上一个本地变量加上static后就是全局变量）\n\t一个函数是static的指该函数只能在那个.c文件中被访问\nstatic——c++：\n\t带static关键字的本地变量，意味着该变量持久储存，但只能在该函数内部访问\n\t带static关键字的成员变量，意味着该变量可以被该类所有的对象访问，即被所有实例共享，但该变量只会初始化一次\n\t带static关键字的成员函数，意味着该函数可以被该类所有的对象使用，即被所有的实例共享，但该函数只能访问带有static关键字的成员变量\n\n全局变量的构造函数在程序运行时，main函数执行前执行。它的析构函数在程序结束后main函数结束时调用\n注：\n\tc++多个文件中全局变量的初始化是没有固定顺序的，所以当全局变量之前相互有依赖关系时，要么把有依赖的全局变量全写在用一个文件中，要么别这样写\n```\n\n### static 成员变量（实际上就是把那个变量搞成了全局变量，且声明其是某个类的全局变量）\n\n```markdown\n注意：\n\t直接写static int i;这是声明，不是定义，编译能过，但链接过不了，这语句类似于extern int i;即告诉编译器有一个i存在，但在哪并没有说\n实际使用需在某处给出static成员变量的定义\n如：\n\tclass A{\n\tpublic:\n\t\tA();\n\t\tvirtual ~A();\n\t\tA(const A& );\n\tprivate:\n\t\tstatic int i;\t//A类中带有static关键字的i的声明\n\t}\n\tint A::i;\t//i的定义，没有这句，链接报错，提示找不到i，这句就是正常的定义，除了多了个类名和域解析符，也写成 int A::i = 123;都可以\n带static关键字的成员变量，是类的所有对象共享的，且怎能在它定义处初始化，不能用初始化列表来初始化\n注：如果成员变量带有static关键字则哪怕没有实例化任何该类的对象，仍然可以通过<class_name>::<var_name>();来使用该成员变量\n```\n\n[参考检验代码_20](#C++ 静态成员变量\t\t\t\t==检验代码_20==)\n\n### static成员函数\n\n```markdown\n如果成员函数带有static关键字则哪怕没有实例化任何该类的对象，仍然可以通过<class_name>::<func_name>();调用该成员函数\n\n注：静态的成员函数只能访问静态的成员变量，连this这个隐藏变量都不能使用（也就是说静态成员函数没有隐藏变量this），因为你甚至可以不实例化对象来调用它，要是它能访问this岂不是找了个寂寞🙌\n```\n\n\n\n## 基础概念_13——运算符重载\n\n```markdown\nc++中能够被重载的运算符：\n\t+ - * / % ^ & | ~\n\t= < > += -= *= /= %= ^= &= |=\n\t<< >> >>= <<= == != <= >= ! && || ++ --\n\t, ->* -> () []\n\toperator new\toperator delete\t\t//你没看错，new和delete都能重载😮\n\toperator new[]\toperator delete[]\nc++中不能重载的运算符：\n\t.\t.*\t::\t?:\n\tsizeof\ttypeid\n\tstatic_cast\tdynamic_cast const_cast reinterpret_cast\n注1：运算符重载只针对已有的运算符，你不能自己搞一个颜文字来重载。运算符重载只是针对自己定义的类或者其他什么自定义数据类型（枚举...）\n注2：不能重载基础的数据类型的运算符，什么int的加法重载成减法那是不行的\n注3：不能重载操作数个数，即不能把二目运算符改成三目运算符，还不能改运算的优先级\n```\n\n### 使用方法\n\n```markdown\n运算符重载实际上就是为那个运算符写一个特别的函数，该函数前面要使用operator关键字\n该函数可以作为某个类的成员函数\n如：\n\tconst String String::operator +(const String& that);\n该函数返回一个带const关键字的String类的对象，需要一个String对象参数（+ 需要两个算子，但String是一个类，所以当其对象使用自己所属类的成员函数时，自带一个this，因此只需要一个参数就可以了）\n该函数也可以作为全局函数\n如：\n\tconst String operator +(const String& r, const String& l);\n参数列表中用的带const关键字的引用是为了防止在该函数内部对对象的成员变量进行修改（加法是不会修改两算子的值），因为这不是某个类的成员函数，所有需要两个算子\n\n注：这里返回值也带const的原因是因为防止出现返回结果作左值的情况\n如：出现\n\ta + b = 6;\t这种操作，编译通不过\n```\n\n### ==特别注意==\n\n```c++\n在c++中运算符的左边算子称为receiver，编译器通过左边算子来确定，这个运算符应该用哪个重载的函数\n如：\n\tInteger x(1), y(5), z;\t//初始化x, y, z（为赋值）\n\tx + y;\t//实际等价于x.operator+(y)，receiver是x\n\tz = x + y;\t//使用的是Interger的 + ，receiver是x\n\tz = x + 3;\t//使用的是Interger的 + ，receiver是x，且3会被先构造成一个你匿名的Interger的对象（Interger有一个参数为int的构造函数）\n\tz = 3 + y; \t//用的是int的+，receiver是3，此时需要int有一个通过Integer构造int的构造函数，否则报错，编译不过\n\n一目运算符\nclass Integer{\n...\npublic:\nconst Integer operator-() const{\t//只需要一个算子的运算符，作为成员函数时不需要参数，因为默认有个this，函数返回值带const是为了防止返回结果作左值，函数带const是为了不修改作运算的对象的值\n\treturn Integer(-i);\n}\n};\nz = -x;\t//等价于z.operator=(x.operator-());\n\n注：一目运算符使用全局函数重载时，一般要在操作的类中使用关键字friend声明\n如：\n\tclass Integer {\n\tpublic:\n\t\tfriend const Integer operator+(const Integer& lhs, const Integer& rhs);\t//声明这个函数是friend，其可以访问Integer类的成员变量（private的成员变量也可以访问）\n\t\t...\n\t};\n\t\n\tconst Integer operator+(const Integer& lhs, const Integer& rhs){\n\t\treturn Integer(lhs.i + rhs.i);\n\t}\t//重载 + 的函数的body，返回值加const防止返回结果作左值，形参加const防止修改算子的值\n\tz = x + y;\t//可以，完全符合这个全局重载函数的参数列表\n\tz = x + 3;\t//可以，receiver是x，Integer类有一个自己的运算符重载函数，会先把3构造成一个匿名的Integer对象，在调用全局重载函数\n\tz = 3 + x;\t//可以，会默认把3构造成一个匿名的Integer对象，再调用这个全局重载函数\n\tz = 3 + 7;\t//可以，receiver是3，调用int::operator+()把结果10返回来后用构造函数构造成一个Integer之后在赋值给z\n```\n\n```markdown\n关于是否把对一个类的运算符重载函数做成成员函数：\n1.\t单目运算符重载应该做成成员函数\n2.\t= () [] -> ->* 这几个必须做成成员函数\n3.\t其他的所有二目运算符做成非成员函数（使用friend关键字在类中声明）\n\n关于运算符重载函数的参数设置：\n1.\t如果该运算符不会修改算子，则形参要用const修饰，如：+ - =\n2.\t如果该运算符要修改算子，则形参不能有const修饰，如：++ -- \n3.\t如果运算结果不能作左值，则函数需要用const修饰，如：+ -\n4.\t如果运算结果可以作左值，则函数不要用const修饰，如：[]\n5.\t如果是类成员函数，且运算结果是会修改该类对象，则该函数不能用const来修饰\n```\n\n### 常见的运算符原型\n\n```c++\n1.\t+-*/%&|~\n\tconst T operatorX(const T& i, const T&r)const;\n2.\t! && || < <= == >= >\n\tbool operatorX(const T&i, const T&r)const;\n3.\t[]\n\tT& T::operator[](int index);\n4.\t++\nprefix ++（++在算子前）：\n    const T& operator++();\t//返回的是加完后的结果，如：++a，返回的是a加完后的结果\n定义的例子(具体怎么实现得看具体对象)：\nconst Integer& Integer::operator++(){\t//这里函数返回值带ref更方便，要是直接返回一个对象则会发生拷贝构造\n    *this += 1;\n    return *this;\n}\n\npostifx ++（++在算子后）:\n\tconst T operator++(int); //返回的是加完前的结果，如：a++，返回的是a加完前的a\n定义的例子：\nconst Integer Integer::operator++(int){\t//这里函数返回值没有带ref是因为不能返回一个本地变量的ref，因为离开了这个函数，本地变量就不存在了\n    Integer old(*this);\t//拷贝构造\n    ++(*this);\t\t//调用上面的prefix ++函数\n    return old;\t\t//返回一个对象，在发生一次拷贝构造\n}\n5.\t--\n道理同++\n\tconst T& operator--();\n\tconst T& operator--(int);\n注：++和--中prefix和postfix参数不一样是为了做重载，编译时，调用postfix函数编译器会自动给一个 0 作为参数\n    \n6. [] index运算符\n    返回的是成员的引用，因为可以用来作左值\n```\n\n### 奇淫巧计\n\n```markdown\n对于关系运算符：> < >= <= == !=\t只需要定义<和==即可，其他的都可以通过这俩来推出\n如：\nbool Integer::operator==( const Integer& rhs) const {\n\treturn i == rhs.i;\t\t\t//定义了 ==\n}\nbool Integer::operator!=( const Integer& rhs) const {\n\treturn !(*this == rhs);\t\t//调用了 == \n}\nbool Integer::operator<( const Integer& rhs) const {\n\treturn i < rhs.i;\t\t\t//定义了 <\n}\nbool Integer::operator>( const Integer& rhs) const {\n\treturn rhs < *this;\t//调用了 <\n}\nbool Integer::operator<=( const Integer& rhs) const {\n\treturn !(rhs < *this); //调用了 <\n}\nbool Integer::operator>=( const Integer& rhs) const {\n\treturn !(*this < ths); //调用了 <\n}\n\n注：这样写的好处是，以后要修改代码，只需要改两处地方即可\n```\n\n### 赋值运算符\n\n```markdown\n如果没有给一个类的赋值运算符重载函数，则编译器会自动创造一个赋值运算符的重载\nT::operator=(T){}进行一个memberwise的赋值操作，即有成员变量是其他类则要调用那个类的赋值运算符重载函数\n\n注1：如果要自己实现赋值运算符的重载函数，则该函数一定要是成员函数，且是对自己赋值然后返回自己\n如：\n\tT& T::operator=(const T& rhs){\n\t\tif(this != &rhs){\t//当自己不是赋值给自己时才做赋值操作，否则直接返回自己\n\t\t\t//assignmeng的具体实现\n\t\t}\n\t\treturn *this;\n\t}\n注2：if检查在类有动态申请内存（有指针成员变量）的时候要写，否容易出现问题\n如：\n\tclass A{\n\t\tprivate:\n\t\t\tchar *p;\n\t\tpublic:\n\t\t\tA& operator=(const& A that){\t\t//此时当出现某对象自己给自己赋值时报错，因为p已经被delete了，that.p不存在，直接报错，要不就读到别人地址了\n\t\t\t\tdelete p;\n\t\t\t\tp = new [strlen(that.p)+1];\n\t\t\t\tstrcpy(p, that.p);\n\t\t\t\treturn *this;\n\t\t\t}\n\t}\n```\n\n### 类型转换\n\n```markdown\n1.\t自动类型转换\n\t当一个函数f的参数需要类A的变量，但类A有一个参数为类B的构造函数，此时给f一个B的对象，仍然不会出错。因为系统会自动调用A的对应的那个构造函数来通过B的对象来构造一个A的临时匿名对象传给f函数，如果不想系统自动转换则需要在该构造函数前加上explicit关键字\n\n2.\t默认的自动转换（=> 的意思相当于是可以把 => 左边的东西直接传给右边）：\n\tPrimitive（小范围 => 大范围）：\n\t\tchar => short => int => float => double\n\t\t\t\t\t => int => long\n\tImplicit(对于单独某个类来说)：\n\t\tT => T&,\t绑定\n\t\tT& => T,\t初始化/赋值\n\t\tT* => void*,\t去除指针类型，简称退型，指针仍指向那片地址空间，但指针没有类型了\n\t\tT => const T,\t把一个变量当const看待\n\t\tT[] => T*,\t数组可以用指针来控制\n\t\tT* => T[],\t指针可以用数组来控制\n\n3.\t专用类型转换（T => C，不同类型之间的转换）\n\t使用专用类型转换函数\n\t类中声明：operator target_class();\n\t类外定义：X::operator target_class(){...}\n\t作用：将X类的对象转换为target_class类的对象\n\t专用的类型转换函数，该函数没有写返回类型，实际上target_class就是返回类型，target_class可以是任何系统和自定义的类\n如：\n\tclass Rational {\n\tpublic:\n\t\t...\n\t\toperator double() const;\t//将rational类转换为double类型\n\t}\n\tRational::operator double() const {\n\t\treturn numerator_/(double) denominator_;\t//实现转换，瞎写的，这里是在举例子怎么写\n\t}\n\n注：不能出现：\n\t1. A类中有一个转换为B类的专用类型转换函数a_to_b()\n\t2. B类中有一个以A类对象为参数的构造函数B(A& a)\n\t3. 有一个函数f需要一个B类对象，但传给f了一个A类的对象\n\t此时报错，因为编译器不知道用a_to_b函数还是B(A& a)函数，它俩没有优先级区别，此时要么删掉一个，或者在B(A& a)函数前加上explicit关键字免得系统自动调用这个构造函数\n```\n\n[参考检验代码_21](#C++ 自动类型转换\t\t\t\t==检验代码_21==)\n\n\n\n## 基础概念_14——模板——Template\n\n### 概念\n\n```markdown\n\t一种重用代码的方式，此时变量类型成为参数，可以有两种Template，function和class两种\n```\n\n### 1.函数模板——function template\n\n```c++\n//一种模板用来做出函数，相当于告诉编译器，它要怎么帮你做出一个函数\n如：\n使用一般函数：\n\tvoid swap(int& x, int& y){\t//这个函数只能交换俩int类型的变量\n\t\tint temp = x;\n\t\tx = y;\n\t\ty = temp;\n\t}\n使用函数模板：\n\ttemplate < class T >\t//template是关键字，class T是用来代表任意类型（你要是喜欢也可以用X）（实际上就是用来占位的，可以有多个如：template <class T1, class T2>，逗号隔开即可），这一语句下面是函数那就是函数模板，是类那就是类模板，即下面的swap函数就是函数模板，T代表任意的类型可以是基本类型也可以是用户自定义类型\n\tvoid swap (T& x, T& y){\t\n\t\tT temp = x;\n\t\tx = y;\n\t\ty = tmep;\n\t}\n注1：实际上上面的代码是declaration（声明），编译器会把这段代码记录下来，以后遇到调用swap时，会用那个模板把T变成调用处对应的类型X（随便用个字母表示），自动做出一个参数是X类型的swap函数（和其他的swap形成重载）\n\n注2：使用函数模板后系统会ban掉显示（explicit）自动类型转换和隐式（implicit）类型转换，如上面例子中swap(int,int);可以，但swap(int,double);不行\n\n注3：重载规则，检查是否只有唯一的函数匹配--否-->检查是否只有唯一的函数模板匹配--否-->找重载函数\n\n注4：如果函数模板的函数中没有使用到占位的class T，则在调用时需显示的给出标识用哪种类型如：\n\ttemplate <class T>\n\tvoid foo(void ){...}\n    foo<int>();\t//此时 T 的type是int \n    foo<float>();\t//此时 T 的type是float\n```\n\n### 2_类模板——class tmeplate\n\n```c++\n//一种模板用来做出类，类模板里的每一个函数都是函数模板\n例子：\n\ttemplate <class T>\t//同函数模板，关键字和占位类型（占位类型可以有多个如：template< class key, class value> ，逗号隔开即可），表示下面的东西是template，Vector是一个声明\n\tclass Vector {\t//和正常类一样，Vector是名字\n\tpublic:\n\t\tVector(int);\t//构造函数，参数为int\n\t\t~Vector();\t//析构函数\n\t\tVector(const Vector&);//拷贝构造函数\n\t\tVector& operator=(const Vector&);\t//赋值运算符重载\n\t\tT& operator[](int);\t\n\tprivate:\n\t\tT* m_elements;\n\t\tint m_size;\n\t}\n注5：使用Vector时因为表示传参数，所以得像 注4 那样显示地指明 T 的type，如：Vector<int> i(100);\t//通过参数为int类型的构造函数创建一个Vector对象，且 T 的类型是int\n\n注6：类模板中的类的函数，都得写成函数模板的格式（其实也就是在类成员函数的定义前加上 template <class T >，然后按需求把某些变量类型改成 T ，类名后和域解析符前得加上 <T> ）如：\n\ttemplate <class T>\t//不能省\n\tVector<T>::Vector(int size) : m_size(size) { //参数为int的构造函数的定义，注意Vector<T>，中<T>不能省\n\t\tm_elements = new T[m_size];\n\t}\n\n\ttemplate <class T>\t//不能省\n\tT& Vector<T>::operator[] (int indx)\t{ //赋值运算符重载函数的定义，注意Vector<T>，中<T>不能省\n\t\tif (indx < m_size && indx > 0){\n\t\t\treturn m_elements[indx];\n\t\t}else {\n\t\t\t...\n\t\t}\n\t}\n注7：如果出现Vector< Vector < double *> >;（即有一个Vector它的每一个单元都是一个Vector，而那个Vector的每一个单元都是一个double *）这种要注意，最后面的两个>，有些编译器要中间加一个空格，否则会识别为右移或者流\n    \n注8：模板函数的占位类型实际可以非常复杂如：\n    Vector< int (*) (Vector<double>&,int) >;（一个Vector它的每一个单元都是一个函数指针，该函数指针指向的函数的参数有两项，第一项是一个每一个单元都是double的Vector而且是通过引用传递，第二项是一个int）\n```\n\n### 3_模板函数——template function\n\n```c++\n就是由模板生成的函数\n```\n\n### 4_模板类——template class\n\n```c++\n就是由模板生成的类\n```\n\n### ==特别注意_1==\n\n```c++\n模板template的参数不仅可以是一种未指定类型（占位类型），也可以是实际类型（甚至可以给其设置缺省值）\n如：\n\ttemplate <class T, int bounds = 100> //bounds是一个带缺省值的变量，且在模板里面可以直接使用\n\tclass FixedVector {\n\tpublic:\n\t\tFixedVector();\n\t\t//...\n\t\tT& operator[](int);\n\tprivate:\n\t\tT elements[bounds];\n\t}\n\t\n\tFixedVector<int, 50> v1; \t//种50个int\n\tFixedVector<int, 10*5> v2;\t//种50个int\n\tFixedVector<int> v3;\t\t//种100个int\n```\n\n### ==特别注意_2==\n\n```markdown\n1.\ttemplate和template之间不能做继承，\n2.\ttemplate可以继承于一个non-template的类\n\n3.\tnon-template类也可以继承template类（实际是先种出一个模板类再把这个模板类继承给那个non-template类）如：\n\tclass SupervisorGroup : public List<Employee*>{...} //List是一个类模板，这里指定了占位类型为Employee *\n```\n\n\n\n## 基础概念_15——异常——exception\n\n```c++\n概念：\n\t运行到某处时，有问题出现，但当前环境或程序或函数无法处理，以至于无法继续下去的情况就叫exception，但在某处，某个程序或函数可以处理\n\n关键字：\n\ttry {\n\t\tcode;\t\t\t\t\t\t//catch中也可以throw异常\n\t} catch ( error_type ){\t\t\t// error_type 是 ... 时表示捕获所有类型的异常\n\t\tcode;\t\t\t\t\t\t//catch中也可以throw异常\n\t}\n\nthrow error_type;\t//向上抛异常并退出当前函数，直到遇到有catch能捕获抛出的异常时停止\n```\n\n### 使用\n\n```c++\ntry block\n    try {\n        code_1;\t\t\t\t\t\t\t\t//尝试做一些可能会导致异常的代码\n    }catch (error_type_1 var_name){\t\t\t//error_type_1 var_name可以理解成函数的形参表，且var_name变量在对应的code中可以使用，其实catch就像一个处理函数\n    \tcode_2;\n    }catch (error_type_2 var_name){\t\t\t//针对error_type的子类，会执行类型转换（upcast，向上造型），即子类的捕获要放在父类捕获前，否则该子类catch永远无法执行，编译无法通过\n        code_3;\n    }\t\t\t\t\t\t\t\t\t//catch查找是按从上到下的顺序查找的，如果catch(...)是第一个catch则其后的catch全部永远没法执行，编译无法通过\n\n\n特色操作：\n    void func(int a) : throw(error_type_1, error_type_2){\t//c++函数后面这样写，代表该函数在运行时最多可能会抛出这些异常，这样写后func只能抛出error_type_1和error_type_2两种异常，抛其他异常，系统反而会抛异常\n    \tcode;\n\t}\n\t//一个函数后面不这样写，则可以抛出任何异常。如果是throw()，括号里面不写类型则意味着该函数不会抛出任何异常\n\n注：c中malloc失败时会返回一个null，但在c++中不会，只会抛一个bad_malloc异常\n```\n\n### ==特别注意==\n\n```markdown\n构造函数中如果使用抛异常来通知构造失败的话（因为构造函数和析构函数没有返回值），可能会导致奇奇怪怪的问题，因为如果构造函数使用到了new，但构造没成功，抛了异常，那么new来的空间就变成垃圾内存了\n```\n\n\n\n## 基础概念_16——流——stream\n\n```markdown\n流——单方向\nc和c++对文件操作的区别：\n\tc语言中，对一个文件可以任意的游走（random access），从第一段开始读，从第25段的第34个字符开始读。而c++的流是单方向的，“流”过去了，就没有了\n\n流操作——Stream operations\n1.\tExtractors —— >> 从流里面读东西（已经被重载，根据左边的receiver不同调用的不同，如果receiver是istream则是extractor，receiver如果是一个int则是右移）\n\n2.\tInserters —— << 向流里面写东西（同上）\n\n3.\tManipulators —— 操控流的怎么读，怎么写（类似格式化输入输出）\n\n流的类型——Stream type\n1.\tText streams\n\t文本流，parse和format，解析和格式化\n2.\tBinary streams\n\t二进制数据，\n```\n\n### 基本操作\n\n```c++\n1.\tistream >> lvalue\n\t会根据lvalue的变量类型，自动解析怎么把值传给lvalue\n注1：自动解析的类型：\n\tchar\t\t%c\n\tshort, int\t%d\n\tlong\t\t%ld\n\tfloat\t\t%g\n\tdouble\t\t%lg\n\tlong double\t%Lg\n\tchar *\t\t%s\n\tvoid *\t\t%p\n\n2.\t手动重载 >> 运算符\nistream& operator>>(istream& is, T& obj){\t//第一个参数（也就是receiver），istream&之所以不加const是因为要修改流\n\tcode;\t\t//读取流操作\n\treturn is;\t//返回类型也是istream& 是操作流之后可以把操作完后的流继续操作，如：( ( cin>>a )>>b )>>c\n}\n\n3.\t手动重载 << 运算符\n    ostream& operator<<(ostream& os, const T& obj){\n    \tcode;\t\t//实际插入流操作\n    \treturn os;\t\t//\t( ( cout<<a )<<b )<<c，返回的是ostream&的原因\n\t}\n4.\t常见使用\n    ch = cin.get();\t读一个字符，如果读完了则返回EOF\n    cout.put(ch);\t// 打印一个字符\n    ignore(int limit = 1, int delim = EOF);\t跳过多少个东西不读，一直读到什么位置，这里缺省值是跳过一个，一直读到结束\n    cout.flush();\t//强制输出流的内容到物理介质上去\n5.\tmanipulator，格式化\t//要导入头文件iomanip\n    endl其实是个manipulator\n    //例子\n    cin >> hex >> n;\t//以十六进制输入给n\n    cout << setprecision(2) << 1000.243 << endl;\t//按两位小数输出\n\tcout << setw(20) << \"OK!\";\t//占20位，输出右对齐\n6.\t常见manipulators:\n\tdec, hex, otc\t数字进制转化\t\t\t\t\t\t   \t\t \t\t\tI,O\n    endl\t\t\t插入一个新行，并使用flush\t\t\t\t \t\t\t\t\t O\n\tflush\t\t\tflush流（相当于刷新缓冲区）\t\t\t\t\t\t\t\tO\n\tsetw(int)\t\t设置占位宽度（最小要这么宽，宽度大于设定则不管）\t\t\tI, O\n\tsetfill(ch)\t\t如果输出的东西没有设定的那么宽，则用什么填充\t\t\t\t I, O\n\tsetbase(int)\t相当于进制拓展，可以设定以任意进制输出\t\t\t\t\t\t   O\n\tws\t\t\t\t\t跳过空格\t\t\t\t\t\t\t\t\t\t\tI\n\tsetprecision(int)\t设置精度，即多少位小数\t\t\t\t\t\t\t\t\tO\n\tsetiosflags(long)\t设置流里面都是ON，相当于1\t\t\t\t\t\t\tI, O\n\tresetiosflags(long)\t设置流里面都是OFF，相当于0\t\t\t\t\t\t\tI, O\n7.\t预定义流\n        cin\t\t\tstandard input\n        cout\t\tstandard output\n        cerr\t\tunbuffered error(debugging) output\n        clog\t\tbuffered error(debugging) output\n```\n\n### ==自定义Manipulator 与 IOS flag==\n\n```c++\n1.\tManipulator\n//这是全局函数\nostream& manip(ostream& out){\n    code;\n    return out;\n}\nostream& tab(ostream& out){\n\treturn out << '\\t';\t\t//返回一个ostream的引用，且返回时还有一个 << 的调用，把'\\t'插入到流中\n}\n\ncout << \"Hello\" << tab << \"World!\" << endl;\n\n2. ios :: flag\t标志\n    ios::skipws\t\t\t\t\t\t\t//忽略前导空格\n    ios::lef, ios::right\t\t\t\t//设置左对齐，右对齐\n    ios::internal\t\t\t\t\t\t//数值的符号位在域宽内左对齐，数值右对齐，中间由填充字符填充\n    ios::dec, ios::oct, ios::hex\t\t//设置整数的基数为10，8，16\n    ios::showbase\t\t\t\t\t\t//强制输出整数的基数(八进制数以0打头，十六进制数以0x打头)\n    ios::showpoint\t\t\t\t\t\t//强制显示小数点\n    ios::uppercase\t\t\t\t\t\t//16进制数大写输出\n    ios::showpos\t\t\t\t\t\t//强制显示符号\n    ios::scientific, ios::fixed\t\t\t//设置指数显示，固定浮点显示\n    ios::unitbuf\t\t\t\t\t\t//每次输出后刷新所有的流\n    ios::boolalpha \t\t\t\t\t\t//以“true”/“false”的形式输出布尔值\n    ios::stdio \t\t\t\t\t\t\t//每次输出之后清除stdout, stderr\n   \t//使用方法\n    2.1\t\t使用Manipulator\n    \tsetiosflags(flags);\t\t\t\t//flags 就是上面的代码，如ios::skipws\n    \tresetiosflags(flags);\n\t2.2\t\t使用stream成员函数\n        istream.setf(flags);\t\t\t\t\t//flags 同理，istream是cin或cout这种流对象\n        istream.unsetf(flags);\n```\n\n\n\n## 基础概念_17——STL——Standard Library\n\n```markdown\n1.\t容器——Containers（注意在使用时所有的容器都是小写，实际上就是类模板）\n\tVector\t\t一个可以在后面（一个方向）增长的数组\n\tDeque\t\t一个可以在前后都可以增长的数组\n\tList\t\t双向链表\n\tSets\t\t集合（没有重复的元素）\n\tMap\t\t\t映射，键值对\n\tPair\t\t表达两东西之间的关系，这两东西可以是任何东西\n2.\t基础算法——Basic Algorithms（实际上是一些函数模板）\n\tsort\t\t排序\n\tsearch\t\t查找\n\t...\n3.\t迭代器——Iterators\n\t如：\n\t\tvector<int>::iterator p;\t//p是vector<int>这个类里面的类叫iterator的对象\n\t\tp = x.begin();\t\t\t\t//p现在用来代表x中的第一个元素\n\t\tcout << *p << endl;\t\t\t//*是被重载了的，vector<in>说明p是一个int，所以*p是一个int\n\t\tp++;\t\t\t\t\t\t//++也是被重载过的\n4.\t所有STL的东西都是在 std 那个命名空间中，所以得使用using namespace std;否则用一个就得加 std::\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 类_例子\n\n#### 售票机类\n\n```c++\nclass TicketMachine {\npublic:\n    void showPrompt();\t//成员函数\n    void getMoney();\n    void printTicket();\n    void showBalance();\n    void printError();\nprivate:\n    const int PRICE;\t//成员变量\n    int balance;\n    int total;\n};\n```\n\n\n\n## 检验代码\n\n#### 分析类不同实例的成员变量值\t\t\t==检验代码_1==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\npublic:\n\tint i;\n\tvoid f();\n};\nvoid A::f()\n{\n\ti = 20;\n}\nint main()\n{\n\tA a;\n\tA b;\n\tb.i = 30;\n\tcout << \"b.i_1 = \" << b.i << endl;\n\ta.i = 10;\n\tcout << \"a.i_1 = \" << a.i << endl;\n\ta.f();\n\tcout << \"b.i_2 = \" << b.i << endl;\n\tcout << \"a.i_2 = \" << a.i << endl;\n}\n```\n\n### 输出\n\n```c++\nb.i_1 = 30\na.i_1 = 10\nb.i_2 = 30\na.i_2 = 20\n```\n\n\n\n#### 探究c++对象实质\t\t\t==检验代码_2==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\npublic:\n\tint i;\n\tvoid f();\n};\nvoid A::f()\n{\n\ti = 20;\n\tcout << \"A::f()--&i = \" << &i << endl;\n}\n\nint main()\n{\n\tA a;\n\tcout << \"&a = \" << &a << endl;\n\tcout << \"&a.i = \" << &(a.i) << endl;\n\ta.f();\n}\n```\n\n### 输出\n\n```c++\n&a = 0x61fe1c\n&a.i = 0x61fe1c\nA::f()--&i = 0x61fe1c\n```\n\n\n\n#### 解密new与delete\t测试1\t不带[]\t\t==检验代码_3==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\nprivate:\n\tint i;\npublic:\n\tA(){i = 0;cout << \"A::A()\" << endl;}\n\t~A() { cout << \"A::~A(), i = \" << i << endl; }\n\tvoid set(int i) { this->i = i; }\n};\nint main()\n{\n\tA *p = new A[10];\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tp[i].set(i);\n\t}\n\tdelete p;\n\treturn 0;\n}\n```\n\n### 输出\n\n```c++\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::~A(), i = 0\n```\n\n\n\n#### 解密new与delete\t测试2\t带[]\t==检验代码_4==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\nprivate:\n\tint i;\n\npublic:\n\tA() {i = 0;cout << \"A::A()\" << endl;}\n\t~A() { cout << \"A::~A(), i = \" << i << endl; }\n\n\tvoid set(int i) { this->i = i; }\n};\nint main()\n{\n\tA *p = new A[10];\n\tfor (int i = 0; i < 10; i++)\n\t\tp[i].set(i);\n\tdelete[] p;\n\treturn 0;\n}\n```\n\n#### 输出\n\n```c++\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::~A(), i = 9\nA::~A(), i = 8\nA::~A(), i = 7\nA::~A(), i = 6\nA::~A(), i = 5\nA::~A(), i = 4\nA::~A(), i = 3\nA::~A(), i = 2\nA::~A(), i = 1\nA::~A(), i = 0\n```\n\n\n\n#### 解密new与delete\t\t\t\t==检验代码_5==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\nprivate:\n\tint i;\npublic:\n\tA()\n\t{i = 0;cout << \"A::A()\" << endl;}\n\t~A() { cout << \"A::~A(), i = \" << i << endl; }\n\tvoid g(A *q) { cout << \"A::g(), q->i=\" << q->i << endl; }\n\tvoid set(int i) { this->i = i; }\n};\nint main()\n{\n\tA a;\n\ta.set(1);\n\tA b;\n\tb.set(1000);\n\ta.g(&b);\n\treturn 0;\n}\n```\n\n#### 输出\n\n```c++\nA::A()\nA::A()\nA::g(), q->i=1000\nA::~A(), i = 1000\nA::~A(), i = 1\n```\n\n\n\n#### 继承初体验\t\t\t\t==检验代码_6==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\npublic:\n\tA() : i(0) { cout << \"A::A()\" << endl; }\n\t~A() { cout << \"A::~A()\" << endl; }\n\tvoid print() { cout << \"A::f()\" << \"i=\" << i << endl; }\n\tvoid set(int ii) { i = ii; }\nprivate:\n\tint i;\n};\nclass B : public A{};\nint main()\n{\n\tB b;\n\tb.set(100);\n\tb.print();\n\treturn 0;\n}\n```\n\n#### 输出\n\n```c++\nA::A()\nA::f()i=100\nA::~A()\n```\n\n\n\n#### 继承再体验\t\t\t\t==检验代码_7==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\npublic:\n\tA(int ii) : i(ii) {}\n\t~A() { cout << \"A::~A()\" << endl; }\n\tvoid print() { cout << \"A::print() i = \" << i << endl; }\n\tvoid set(int ii) { i = ii; }\n\nprivate:\n\tint i;\n};\nclass B : public A\n{\npublic:\n\tB() : A(15) { cout << \"B::B() \" << endl; }\n\t~B() { cout << \"B::~B()\" << endl; }\n\tvoid f()\n\t{\n\t\tset(2);\n\t\tprint();\n\t}\n};\n\nint main()\n{\n\tB b;\n\tb.set(66);\n\tb.f();\n\treturn 0;\n}\n```\n\n#### 输出\n\n```c++\nB::B()\nA::print() i = 2\nB::~B()\nA::~A()\n```\n\n\n\n#### c++名字隐藏\t\t\t\t==检验代码_8==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass A\n{\npublic:\n\tA() { cout << \"A::A()\" << endl; }\n\t~A() { cout << \"A::~A()\" << endl; }\n\tvoid print() { cout << \"A::print() i = \" << i << endl; } //A类中print有重载\n\tvoid print(int ii) { cout << \"A::print(int ii) \" << ii << endl; }\n\tvoid set(int ii) { i = ii; }\n\nprivate:\n\tint i;\n};\nclass B : public A\n{\npublic:\n\tB() { cout << \"B::B() \" << endl; }\n\t~B() { cout << \"B::~B()\" << endl; }\n\tvoid f()\n\t{\n\t\tset(2);\n\t\tprint();\n\t}\n\tvoid print() { cout << \"B::print()\" << endl; }\n};\n\nint main()\n{\n\tB b;\n\tb.print();\t\t\t//使用B类自己的print函数\n\tb.A::print(1234);\t//使用A类的那个print函数\n\treturn 0;\n}\n```\n\n### 输出\n\n```c++\nA::A()\nB::B()\nB::print()\nA::print(int ii) 1234\nB::~B()\nA::~A()\n```\n\n\n\n### C++重载\t\t\t\t==检验代码_9==\n\n```c++\n//code.h文件\nvoid func(int i, int j=8);\n//code.cpp文件\n#include \"code.h\"\n#include <iostream>\nusing namespace std;\nvoid func(int i, int j){\n        cout << \"code.cpp::func \" << i << \":\" << j << endl;\n}\n//main.cpp文件\n#include \"code.h\"\nint main(){\n        func(1,29);\n        func(5);\n        return 0;\n}\n//编译时用 g++ code.cpp main.cpp -o main.exe\n```\n\n### 输出\n\n```c++\ncode.cpp::func 1:29\ncode.cpp::func 5:8\n```\n\n\n\n#### C++缺省声明探究\t\t\t\t==检验代码_10==\n\n```c++\n//code.cpp文件\n#include <iostream>\nusing namespace std;\nvoid func(int i=111, int j=111);\t//定义文件中的声明，此处声明不会生效，或者说会被覆盖\nvoid func(int i, int j){\n        cout << \"code.cpp::func \" << i << \":\" << j << endl;\n}\n//main.cpp文件\nvoid func(int i, int j=123);\t//调用func函数的文件中的声明，会失效\nint main(){\n        func(5);\n        return 0;\n}\n//编译时用 g++ code.cpp main.cpp\t会默认生成a.exe (windows下)\n```\n\n#### 输出\n\n```c++\ncode.cpp::func 5:123\n```\n\n\n\n#### C++其他编译单元调用内联函数\t\t\t\t==检验代码_11==\n\n```c++\n//main.cpp文件\n#include \"code.h\"\nint main(){\n        func(5);\n        return 0;\n}\n//code.h文件\n#include <iostream>\nusing namespace std;\ninline void func(int i, int j = 19){\n        cout << \"i = \" << i << \" j = \" << j << endl;\n}\n//编译时用 g++ main.cpp\n```\n\n#### 输出\n\n```c++\ni = 5 j = 19\n```\n\n\n\n#### C++ const运用\t\t\t\t==检验代码_12==\n\n```c++\n#include <stdio.h>\nint main(){\n        const char *s1 = \"hello world\";\n        char s2[] = \"hello world\";\n        printf(\"s1 =   %p\\n\", s1);\n        printf(\"s2 =   %p\\n\", s2);\n        printf(\"main = %p\\n\", main);\n        return 0;\n}\n```\n\n#### 输出\n\n```c++\ns1 =   0000000000404000\ns2 =   000000000061FE0C\nmain = 0000000000401550\n```\n\n\n\n#### C++ const运用_2\t\t\t\t==检验代码_13==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass A\n{\nprivate:\n    int i;\n\npublic:\n    A() : i(2) {}\n    ~A() {}\n    void f() { cout << \"f()\" << endl; }\n    void f() const { cout << \"f() const\" << endl; } //这两f函数的默认参数this不一样，一个带有const关键字，一个没有，所以可实现重载\n};\nint main()\n{\n    const A a;\t//a是有const关键字的对象\n    a.f();\t\t//调用的是带const关键字的f函数\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\nf() const\n```\n\n\n\n#### C++ conversion\t\t\t\t==检验代码_14==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass A\n{\nprivate:\n    const int i;\n\npublic:\n    A() : i(1) {}\n    ~A() {}\n    void print() { cout << \" A.i = \" << i << endl; } // A类中的print函数\n};\nclass B : public A\n{ // B类继承于A类\nprivate:\n    int j;\n\npublic:\n    B() : j(4) {}\n    void print() { cout << \" B.j = \" << j << endl; } // B类中的print函数\n};\nint main()\n{\n    A a;\n    B b;\n    a.print();\n    b.print();          //调用的是B类的成员函数print\n    b.A::print();       //调用的是A类的成员函数print\n    int *p = (int *)&a; //这里的&是取地址，不是引用，取a对象的地址，并转换为int类型\n    cout << \"p = \" << p;\n    *p = 20; //取了地址后，直接通过地址改变private属性的成员变量的值\n    a.print();\n    p = (int *)&b; //取对象b的地址，该地址如果是int型指针则正好可以控制A类中的i，即子类中的第一个成员变量\n    cout << \"p = \" << p;\n    a.print();\n    *p = 123; //肆意改动对象b的private成员变量的值\n    p++;      // p是int型指针，++后可以控制对象b中的j\n    *p = 2333;\n    cout << \"p = \" << p;\n    b.A::print(); //输出i\n    b.print();    //输出j\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\n A.i = 1\n B.j = 4\n A.i = 1\np = 0x61fe04 A.i = 20\np = 0x61fdfc A.i = 20\np = 0x61fe00 A.i = 123\n B.j = 2333\n```\n\n\n\n#### C++ virtual关键字\t\t\t\t==检验代码_15==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass A\n{\nprivate:\n    int i;\n\npublic:\n    A() : i(123) {}\n    virtual void f() { cout << \"A::f()\" << endl; }\n};\nint main()\n{\n    A a, b;\n    a.f();\n    cout << \"sizeof(a) = \" << sizeof(a) << endl;//输出对象a的大小\n    int *p = (int *)&a;\n    int *q = (int *)&b;\n    cout << \"q,*q = \" << *q << endl;\t//输出对象a的vtpr指针\n    cout << \"p,*P = \" << *p << endl;\t//输出对象b的vtpr指针\n    p++;\n    cout << \"p+1,*P = \" << *p << endl;\t//不知道输出了什么玩意的值\n    p++;\n    cout << \"p+2,*P = \" << *p << endl;\t//输出对现象a中的i的值\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\nA::f()\nsizeof(a) = 16\nq,*q = 4212016\np,*P = 4212016\np+1,*P = 0\np+2,*P = 123\n```\n\n\n\n#### C++ 魔改vtpr\t\t\t\t==检验代码_16==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass A\t\t//父类A\n{\npublic:\n    int i;\n\npublic:\n    A() : i(123) {}\n    virtual void f() { cout << \"A::f() i = \" << i << endl; }\n};\nclass B : public A\t\t//子类B\n{\npublic:\n    int j;\n\npublic:\n    B() : j(888) {}\n    virtual void f() { cout << \"B::f() i = \" << i << \" j = \" << j << endl; }\n};\nint main()\n{\n    A a;\n    B b;\n    int *p = (int *)&a;\n    int *q = (int *)&b;\n    A *aa = &a;\n    B *bb = &b;\n    cout << \"object a : \" << endl;\t//输出父类A的对象a的成员函数f\n    aa->f();\n    cout << \"object b : \" << endl;\t//输出子类B的对象b的成员函数f\n    bb->f();\n    cout << \"b.vtpr to a.vtpr\" << endl;\n    cout << \"object a : \" << endl;\n    *p = *q;\t//把子类对象b的vtpr指针赋值给了父类对象a的vtpr指针\n    aa->f();\t//此时父类对象a的vtpr已经指向了子类的vtable了所以调用的是子类的虚函数\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\nobject a :\nA::f() i = 123\nobject b :\nB::f() i = 123 j = 888\nb.vtpr to a.vtpr\nobject a :\nB::f() i = 123 j = 0\n```\n\n\n\n#### C++ 覆写\t\t\t\t==检验代码_17==\n\n```\n#include <iostream>\nusing namespace std;\n\nclass A\n{\npublic:\n    int i;\n\npublic:\n    A() : i(123) {}\n    virtual void f() { cout << \"A::f() i = \" << i << endl; }\n};\nclass B : public A\n{\npublic:\n    int j;\n\npublic:\n    B() : j(888) {}\n    virtual void f() { A::f(); }\n};\nint main()\n{\n    B b;\n    b.f();\n    return 0;\n}\n```\n\n#### 输出\n\n```\nA::f() i = 123\n```\n\n\n\n#### C++ 引用再体验\t\t\t\t==检验代码_18==\n\n```c++\n#include <iostream>\nusing namespace std;\nint array[100];\nint& func(int x){\n        return array[x];\n}\nint main(){\n        cout << \"arry[3] = \" << array[3] << endl;\n        func(3) = 24;\n        cout << \"arry[3] = \" << array[3] << endl;\n        return 0;\n}\n```\n\n#### 输出\n\n```c++\narry[3] = 0\narry[3] = 24\n```\n\n\n\n#### C++ 匿名变量\t\t\t\t==检验代码_19==\n\n```c++\n#include <iostream>\nusing namespace std;\nvoid f(const int &i)\n{\n    cout << i << endl;\n}\nint main()\n{\n    int i = 3;\n    f(i * 3);\t\t//系统会自动创建一个匿名变量来保存这个运算的值\n    f(3);\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\n9\n3\n```\n\n\n\n#### C++ 静态成员变量\t\t\t\t==检验代码_20==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass A\n{\nprivate:\n    static int i;\n\npublic:\n    A() {i = 10;}\t//这句只是赋值，不是初始化\n    void f() { cout << \"A::f() i = \" << i << endl; }\n    void set(int ii) { i = ii; }\n};\n\nint A::i;\t// A类中的静态成员i的定义也是初始化（只是没有赋初值）\nint main()\n{\n    A a, b;\n    a.set(123);\n    b.f();\t\t//如果i是public的，还可以直接b.i或者A::i来访问i都一样\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\nA::f() i = 123\n```\n\n\n\n#### C++ 自动类型转换\t\t\t\t==检验代码_21==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass B;\t//B类的前项声明，免得因为B类写在A类后面导致编译器找不到B类\n\nclass A\n{\npublic:\t//在这个构造函数前加上关键字explicit后，将使该函数不能用于自动类型转换，然后报错\n    A(const B &b) { cout << \"A::A(const b &b)\" << endl; } // A类有一个可以通过B类对象构造自身对象的构造函数\n};\nclass B\n{\npublic:\n    B() {}\n};\nvoid f(A a) // f函数需要一个A类的对象\n{\n    cout << \"f()\" << endl;\n}\n\nint main()\n{\n    B b;\n    f(b); //给f函数传一个B类的对象b\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\nA::A(const b &b)\t//默认调用的了A那个构造函数先通过B类的对象构造处一个匿名的A类的对象再传给f函数\nf()\n```\n\n\n\n","source":"_posts/C++基础.md","raw":"---\ntitle: C++ 面向对象\ndate: 2022-04-24 10:29:36\ntag: 计算机语言\n---\n\n## 基本概念_1——杂项篇\n\n\n\n```markdown\n一个类应该要有的函数：\n\tdefault constructor //默认构造函数\n\tvirtual destructor\t//带virtual关键字的析构函数\n\tcopy constructor\t//拷贝构造函数\n```\n\n\n\n#### What to do not How to do\n\n``` markdown\n\tClass 类，指具有相似特点的东西的抽象集合，类是虚的，是一种观点，像是对象的说明\n\tObject 实体，对象，是实例化的Class，是实的\n\tInterface 接口，即对象接收外部消息的途径，方法。主要是为了低耦合，隐藏内部实现\n注：Interface也可以理解成一个类对外公开的部分，可以是成员函数，也可以是成员变量\n\tEncapsulation 封装，把数据和对数据的操作放在对象里，隐藏数据的细节，其他对象只能通过受允许的操作来操作数据\n\t:: 域名解析符，用法<Class Name>::<function name>   不加Class Name时意味着为全局函数，同理 ::a++，意味着全局变量a++\n```\n\n#### 一些基本常识：\n\n```markdown\n\t{\n\t\tcode;\n\t}\n可以使用大括号来把一些代码括起来，其中的变量仅在大括号中存在，离开大括号就会自动销毁\n\n\t# 开头的代码是编译预处理指令 如：#ifndef xxx 如果没有定义xxx #define xxx就定义xxx  #endif 定义结束\n\t注：#ifndef 常用于可能会出现反复定义的情况时 如：a.h中include了b.h，b.h中include了a.h，导致a.h中的定义出现不止一次\n因此引入了标准头文件结构避免出现重复定义：\n\t#ifndef HEADER_FLAG\n\t#define HEADER_FLAG\n\t//code\n\t#endif\n\t一个头文件只放一个Class的声明（Class大概是只有声明）\n\t\"xxx.h\"\t用\"\"括起来的头文件，编译器会去当前目录查找 \n\t<xxx.h>\t用<>括起来的头文件，编译器会去系统目录查找\n\t<xxx>\tc++特有的插入方法\n\t*.h\t文件中放声明（只有头没有body）declaration  **全局变量的declaration用关键字 extern <var type> <var name>**\n该方式等价于对编译器说，我知道有一个全局变量，叫什么，什么类型，但我不知道它在哪里，然后编译器就会给它留个位置\n\t头文件 Header == interface\n\t*.cpp 文件中放定义（有头有body，实现）  definition，一个.cpp文件就是一个编译单元，在编译环节，编译器只会关注这一个编译单元，所以就是存在和其他编译单元同名的全局变量也是能通过编译的\n\tAbstract 抽象，只看某个层次，屏蔽其他部分的做法就叫抽象\n```\n\n```markdown\n一般来说a.h文件是用来给调用a.cpp文件中的实现的其他文件看的，a.cpp文件是用来实现的。但也有特例，如内联函数的定义就需要直接写在.h文件中\n```\n\n### [内联函数](#内联函数)\n\n#### 编译过程：\t\n\n```mermaid\ngraph LR;\n\tb(编译预处理) --> c[编译]\n\tc --> d[汇编]\n\td --> e(链接)\n```\n\n```mermaid\ngraph LR;\n\ta(.ii)-->b[.o]\n\tb-->c[.s]\n\tc-->d(.out)\n\tc-->e(.exe)\n```\n\n#### g++命令\n\n```markdown\n\t--save-temps  保留中间文件\n\t-Wall  输出所有可能的warning\n\t-c 只编译不链接\n```\n\n\n\n## 基本概念_2——变量篇\n\n#### 常识\n\n```markdown\n    local variable 本地变量，函数中定义的变量\n    parameters\t函数参数\n两种variable都是一样的，仅在对应函数运行时存在，放在本地\n```\n\n#### **重点**\n\n```markdown\n    field （一般）成员变量，类中的变量。存在于对应实例化的对象中，如，a，b都为A类的对象，则a中的成员变量值与b中可以不同\n```\n\n[参看检验代码_1 ](#分析类不同实例的成员变量值\t\t\t==检验代码_1==)\n\n```markdown\n注：c++对象中实际仅有成员变量，也就是说，A a，实际a指向的地址中只有a的成员变量，没有成员函数在里面\n```\n\n[参考检验代码_2](#探究c++对象实质\t\t\t==检验代码_2==)\n\n```markdown\n\tfield_function 成员函数，类的函数，属于类，不属于任何某个对象（实例）,相当于是该类所有对象的公共函数，但它（成员函数）会知道自己本次控制的是哪一个对象的成员变量\n注：实际就是采用了  this 是一个hidden parameter this的类型就是成员函数所属的类的指针，也就是说，所有的成员变量系统实际上是默认在其前面加上了this->，当然主动加上也是可以的\n\n\t对于成员变量和成员函数可以这样理解，动物会运动，运动就是一种动物类的成员函数，如鸟会飞，飞这个动作不是属于某个鸟的，而是鸟这类的。但每一个动物的大小，颜色属于成员变量，如某只鸟的颜色，大小，\n```\n\n\n\n## 基本概念_3——构造析构篇\n\n#### 构造函数\n\n```markdown\n\tconstructor 构造，构造函数。无返回类型和返回值，且与类同名。在对象实例化时自动调用（无法干预），也在此时传参数给构造函数。其他同成员函数\n```\n\n##### 例子 如：\n\n```c++\nclass Tree(){\n\tint i;\npublic:\n\tTree(int x);\t//类Tree的构造函数，这里的形参名必须和构造函数定义处的形参一致\t\n    void f();\n};\nTree::Tree(int x){\t\t//实现一些初始化的操作，实例化对象时调用\n    i = x;\n}\nint main(){\n    Tree t(12);\n}\n\n\n```\n\n### 析构函数\n\n```markdown\n\tdestructor 析构，析构函数。无返回类型，且与类同名，但前面多一个tilde ~符号。在对象要被结束掉时调用，无参数。析构意味着该对象的空间即将被收回，此时调用析构函数。\n```\n\n##### 例子 如：\n\n```c++\nclass Cat(){\n\tint i;\npublic:\n    Cat(int init);\n    ~Cat();\n    void func();\n}\n\nCat::Cat(int init){ //构造函数\n    i = init;\n}\nCat::~Cat(){\t\t//析构函数，一般执行释放系统资源等操作\n    cout << \"Game Over\" << endl;\n}\nint main(){\n \tcout << \"before create \" << endl;\n\t{\n    \tCat cat(1);\n\t}   \n    cout << \"after destructure\" << endl;\n}\n```\n\n\n\n## 基础概念_4——对象初始化 && new和delete\n\n#### 常识：\n\n```markdown\n\tc++中的struct和class基本是一样，都可以称为类，只是struct在没有声明访问属性的地方默认为public，而class默认为private。一般只有当类非常简单时用struct，其他情况都用class\n```\n\n```c++\nstruct X{\n    int i;\n    float f;\n    char c;\n};\nX x1 = {1, 1.1, 'c'};\t//结构体初始化的一种方式\n```\n\n#### 默认构造函数\n\n```markdown\n\tdefault constructor \t没有参数，有参数就不是默认构造函数\n如：\n\tclass Y{\n\t\tint a;\n\t\tpublic:\n\t\t\tY(int a);\t\t//有参数，不是默认构造函数\n\t};\n\t\n\tclass B{\n\t\tint b;\n\t\tpublic:\n\t\t\tB();\t\t//没有参数，是默认\n\t};\n```\n\n### new与delete\n\n```markdown\n\tnew------------对应-------------delete\n\tnew <class name> 申请对应类的空间并返回指向改空间的地址\n\tnew <class name>[<num>]------------对应-----------delete [] <class name>\n```\n\n#### 实现流程\n\n```mermaid\ngraph LR;\n\ta(new) --> b[系统申请一片内存空间]\n\tb --> c[调用类对应的构造函数]\n\tc --> d(返回该空间的地址)\n```\n\n```mermaid\ngraph LR;\n\ta(delete) --> b[调用类的析构函数]\n\tb --> c(回收内存空间)\n```\n\n#### 拓展：\n\n```markdown\n\tc++运行时，会有一个inch table用于记录动态申请空间的变量表，记录申请的大小（单位是byte）和地址（首地址），所以若指向某数组空间的指针++后，调用delete时会报错，因为inch table中只记录了首地址\n```\n\n#### 例子\n\n```c++\nint * psome = new int [10];\t\t//new 10个int \ndelete [] psome;\t\t\t//new时使用了[]，delete时也要用[]，不带[]只会执行第一个对象的析构函数，[]会提示系统，这里要析构多个对象，且会从最后一个对象开始析构\n注1：无论使不使用[]，空间都会收回，收回空间查inch table就可以知道要收回的大小和起始地址了，能运行但会死循环\n注2：delete可以delete NULL\n```\n\n[参考检验代码_3](#解密new与delete\t测试1\t不带[]\t\t==检验代码_3==)\n\n[参考检验代码_4](#解密new与delete\t测试2\t带[]\t==检验代码_4==)\n\n\n\n## 基础概念_5——访问控制&&初始化列表（成员变量初始化首选，且父类的初始化只能初始化列表，否则父类得有默认构造函数）\n\n```markdown\n 基础知识：\n \tpublic 公共的，任何人都可以访问\n \tprivate 私有的，只有这个类的成员函数可以访问这个类的成员变量或成员函数，子类也不能直接访问，这是对类来说的，如果是同一个类的不同对象则它们之间可以相互访问对方的private 成员变量\n \tprotected 受保护的，只有这个类自己和它的子类可以访问，在其他地方则不能直接使用\n \tfriends\t朋友，声明别的类，别的函数，或者别的类的某个函数是朋友，这样朋友就可以访问该类的private。一般用在运算符重载\n注：c++的访问控制只在编译环节存在，运行时其实没有访问控制。运行时对象b也可以访问对象a的私有变量和函数\n```\n\n[参考检验代码_5](#解密new与delete\t\t\t\t==检验代码_5==)\n\n\n```c++\n初始化：\n类中的成员变量可以在构造函数中实现“初始化”，这样写实际是赋值，并非初始化，当成员变量是一个类，系统会去找该类的默认构造函数，当其没有默认构造函数时，报错。\n如：\n\tclass A{\n\tprivate:\n\t\tint i;\n\t\tint *p;\n\tpublic:\n\t\tA(){p=0;i=0;}\t//在构造函数中初始化成员变量p和i\n\t\t~A();\n\t};\n\t\n使用初始化列表 格式：\t构造函数(形参):<成员变量1>(初始值1), <成员变量2>(初始值2){}\t\t\n\t\t\t\t\tname(args)[:init-list]{}\n如：\n\tclass A{\n\tprivate:\n\t\tint i;\n\t\tint *p;\n\tpublic:\n\t\tA():p(0), i(0){} //在构造函数:后使用初始化列表，这样写，p和i的初始化会在构造函数之前完成\n\t\t~A();\n\t};\n注：当初始化\n```\n\n### friend的使用\n\n```c++\n//注2：前项声明，一种用于通知编译器的方式，告诉编译器，有一个叫X的东西存在，因为Y中使用了X，不这样写会报错\nstruct X;\nstruct Y{\n    void f(X*);\t\t//任何指针的大小都是一样的，且没有用到X内部的成员，因此前项声明可以使用\n};\n\nclass X{\nprivate:\n    int i;\npublic:\n    void initialize();\n    friend void g(X*, int);\t//函数朋友\n    friend void Y::f(X*);\t//某个类的某个函数朋友，此处为Y类的f函数是X类朋友\n    friend struct Z;\t\t//类/结构体朋友\n    friend void h();\n};\n```\n\n### 特别注意\n\n```markdown\n实际上在c++中主要拿到对象的地址就可以为所欲为，哪怕成员变量是private一样想改就改\n```\n\n[参考检验代码_14](#C++ conversion\t\t\t\t==检验代码_14==)\n\n\n\n## 基础概念_6——组合，继承，软件重用\n\n### 类的组合  composition\n\n```markdown\n将一些已有的类的对象组合在一起拼凑成一个类，称为组合\n如：\n\t现在有一个class engine的对象和class tyre的对象，把它们组合在一起，拼凑成一个class car\n即：\n\tclass中的成员变量可以是其他的class的对象\n分类：\n\tFully:当一个类就是另一个类的一部分时称为fully\t就像肚子里的孩子\n\tBy reference:当一个类知道另一个类在哪里，能调用其方法，但其并非是它的一部分时称为by reference\t就像已经生出来的孩子\n\t\n在代码中，fully实际就是成员变量是一个类，而by reference是一个类的指针，指向的。\n\t一般当一个类是另一个类的一部分时用fully形式，当一个类属于另一个类但不是其一部分时用by reference形式\n如：\n\t人是一个类，书包是一个类，心脏是一个类，则心脏用fully形式，书包用by reference形式\n```\n\n#### 例子：\n\n```c++\nclass Person{...};\nclass Currency{...};\nclass SavingAccount{\n   \tpublic:\n    \tSavingsAccount(const char* name, const char* address, int cents); //构造函数，有参数所以不是默认构造函数\n    \t~SavingAccount();\t//析构函数\n    \tvoid print();\t\t//一般成员函数\n   \tprivate:\n    \tPerson m_saver;\t\t//fully形式的组合\n    \tCurrency m_balance;\t//fully形式的组合\n};\n\nSavingAccount::SavingAccount(const char* name, const char* address, int cents):m_saver(name, address), m_balance(0,cents){}; \t//SavingAccount的构造函数，需要负责把其fully形式的成员变量初始化，类成员变量也需要，否则系统会去找其类成员变量的默认构造函数\nSavingAccount::print(){\n    m_saver.print();\t//对象自己调用自己的print()\n    m_balance.print();\n}\n```\n\n### 类的继承 inheritance\n\n```markdown\n使用一个现有的类来改造，形成一个新的类\n如：\n\tstudent继承于person则称student是person的超类，因为student继承于person则person有的student都有，但student还有一些person没有的，所以称student是person的superset，即超集\n\n分类：\n\tBase\t基类\n\tSuper\t超类\n\tParent\t父类\n\tDerived\t派生类\n\tSub\t\t次类\n\tChild\t子类\n使用方法：class B : public A{};\t\tB继承于A\n```\n\n[参考检验代码_6](#继承初体验\t\t\t\t==检验代码_6==)\n\n### 知识点\n\n```markdown\n\t父类有的成员，子类继承后都会有，但是父类中private的成员子类不能直接用。相当于父辈给子辈留了一笔钱，但钱由信托保管，子辈不能直接使用。编译通不过。\n注：protected属性的成员则子类可以直接访问，相当于父类留了一些让子类访问父类private成员的接口，但这些接口别人不能使用\n```\n\n### 子类父类构造和析构的顺序\n\n```markdown\n构造\n\t先调用父类构造函数，然后调用子类构造函数，\n注：此时若父类没有默认构造函数，则需要在子类的构造函数中使用初始化列表的方式初始化父类且需要给其传参数，即使用构造函数初始化，而非默认构造函数，不这样的话，若父类无默认初始化构造函数编译时就会报错\n\n析构\n\t先调用子类的析构函数，再调用父类的析构函数\n```\n\n[参考检验代码_7](#继承再体验\t\t\t\t==检验代码_7==)\n\n### 名字隐藏（C++独有）\n\n```markdown\n\t当父类中有overload的成员函数，且和子类中的成员函数同名时，c++会自动隐藏父类中的那些成员函数，只保留的子类自己的成员函数\n注1：此时想调用父类的那些函数得用域解析符 ::\n注2：当子类和父类有同名且同参数的成员函数时，默认使用的是子类的成员函数，如果想要使用父类的则需要使用 域解析符 ::\n如：\n\tclass A{...};\n\tclass B : public A {...};\n\tB b;\n\tb.func();\t//使用B中的成员函数func\n\tb.A::func();//使用A中的成员函数func\n```\n\n[参考检验代码_8](#c++名字隐藏\t\t\t\t==检验代码_8==)\n\n\n\n## 基础概念_7——函数重载 &&内联函数\n\n### 函数重载\n\n```markdown\n重载——overloading\n\t指一些函数可以具有相同的函数名，但它们的参数不一样（类型，个数...），调用函数时编译器会根据给出的参数来判断调用的哪一个函数\n注：返回类型不能作为构成overloading的条件\n\n缺省值——default arguments（少用）\n\t可以预先给函数的形参赋上值\n\t写法：\n\t\tint func(int i, int j, int k=1, int m=2){};\n注1：没有缺省值的形参要放在有缺省值的形参前面\n注2：如果有多个编译单元，即.cpp文件，记得一起编译，否则会找不到定义\n```\n\n[参考检验代码_9](#C++重载\t\t\t\t==检验代码_9==)\n\n### 特别注意：\n\n```markdown\n\t缺省值一般是写在.h文件中，即写在函数声明中，当然函数的声明也可以写在.cpp文件中（这样的话，假如别人的函数实际上是没有缺省值的，但你在自己的.cpp文件中给它加上一个带有缺省值的声明也是可以的，且此时仅自己的.cpp文件中声明生效），且如果没有声明，只有定义也可以直接写在定义中\n```\n\n[参考检验代码_10](#C++缺省声明探究\t\t\t\t==检验代码_10==)\n\n### 内联函数\n\n```markdown\n提出原因：\n\t函数调用涉及一系列的压栈出栈操作，在存在同一个函数大量调用时，影响效率，因此提出了内联函数\n使用方法：\n\tinline <callback type> <function_name> (){}\n原理：\n\t当编译器检测到inline关键词时会将inline函数的代码嵌入到调用它的地方，且仍保持inline函数的独立性（函数有自己的变量，空间...）\n与C的#define的不同：\n\t#define不做类型检查，inline定义的函数会对参数做类型检查\n如：\n\t#define f(a) (a) + (a)\t\t//不会检查传来的参数是什么类型\n\tinline int f(int a){return a*2;} //会检查传来的参数是否是int类型\n注：\n\t当用户定义的inline太过复杂时，编译器可能会拒绝嵌入\n```\n\n### 例子\n\n```c++\ninline int func(int i){\n    return i*2;\n}\nint main(){\n    int a = 4;\n    int b = f(a);\n    return 0;\n}\n\n//实际上现在f(a)等价于 a + a，编译器会自己优化成这样\n```\n\n### 特别注意：\n\n```markdown\n内联函数的要求：\n\t当内联函数需要被其他编译单元调用时，需要将内联函数的函数体（即函数实现，定义）放在.h文件中，因为编译器要在调用的地方嵌入内联函数的代码，而编译器同一时间只能处理一个编译单元，所以必须在预处理时将内联代码放入调用其的编译单元内\n注1：只在本编译单元调用inline函数时，不用写到.h文件中（废话）\n注2：非常小的函数，编译器自动inline，太大的函数，inline无效，递归函数不要inline。建议只有两三行，且调用次数多的函数使用inline\n```\n\n[参考检验代码_11](#C++其他编译单元调用内联函数\t\t\t\t==检验代码_11==)\n\n### 类中的内联函数\n\n```markdown\n\t当在类中直接给出成员函数的body时，编译器默认为inline\n```\n\n```c++\nclass A\n{\npublic:\n\tvoid print() { cout << \"A::print\" << endl; } \t//默认为内联函数\n\tvoid test();\t\t\t\t\t\t\t\t//一般成员函数\n\tvoid inline_test();\t\t\t//这也是inline型，只是放在类外面\n\tvoid set_i(int ii) { i = ii; }\t\t\t\t // inline型成员函数\nprivate:\n\tint i;\n} void A::test()\n{ \t\t\t\t\t\t\t\t\t\t\t//一般成员函数的body\n\tcout << \"A::test()\" << endl;\n}\ninline void A::inline_test()   //inline型成员函数的body，inline关键字不能省\n{\n\tcout << \"inline A::inline_test()\" << endl;\n}\n```\n\n```markdown\n注：这样写，从运行的效果来说，如果inline型的成员变量访问该类的成员变量，实际相当于直接访问成员变量，如a.set_i(10)运行效率等价于a.i=10\n```\n\n\n\n## 基础概念_8——const\n\n```markdown\n基础知识：\n\t被const关键词修饰后，变量不能进行修改和再次赋值，但对于c++来说，const修饰后仍然还是变量，不是常数，仍然遵循一般变量的规则\nextern关键词可以声明该变量是一个定义在某处的变量\n如：\n\textern const int bufsize; //bufsize是某处的一个变量，且在此处是const的\nconst的使用：\n\t如果该变量用const修饰，且编译前已经知道了其具体值，此时则可以用于给数组确定大小，若编译前不知道值，则编译时报错，因为编译器不知道给该数组分配多大的空间\n如：\n\tconst int n = 12;\n\tint array[n];\t\t//可以使用\n\t\n\tint x;cin>>x;\n\tconst int size = x;\n\tint array[x];\t//报错，编译器不知道应该分配多大空间给array\n同理，用extern const int bufsize; 这样也不能用来给数组分配空间，因为编译器不知道bufsize到底有多大\n```\n\n### 指针和const\n\n```c++\nchar* const q = \"abc\";\t\t//q这个指针是const的，即其指向的地址不能改变\n*q = 'c';\t//可以\nq++;\t\t//不可以，其实就是指针的内容不能变，但指向的地址的内容可以变\n\nconst char* p = \"ABCD\";\t//q这个指针指向的内容是const的\n*p = 'b';\t//不可以，报错，即这个内容是不能改变的\t实际是不能通过p指针来修改那个内存单元，而非是那个内存单元不可修改\np++;\t//可以，指针的内容是可以变的\n```\n\n### ==总结==\n\n```c++\nconst 在*前时，指针指向的内容是const的，在*后时，指针是const的。\n如：\n\tPerson p1(\"Bob\", 200);\n\tconst Person* p = &p1;\t//指针指向的对象为const\n\tPerson const* p = &p1;\t//指针指向的对象为const\n\tPerson *const p = &p1;\t//指针为const\n注1：当指向的对象为const时，并非说对象不可修改，而是指不能被这个指针所修改\n    //一般用在，如要传一个对象给其他人，但直接传对象太麻烦了，要拷贝...，传指针快还方便，但害怕别人用传过去的指针修改对象，所以可以传const指针，这样就不能通过该指针修改了\n    \n注2：用指针指向写死的字符串时默认是const\t如： char *s = \"hello world\";这字符串是会放到代码段中，然后s指向其，编译器默认其为const\n//但char s[] = \"hello world\";则可以，因为系统会把代码段中的\"hello world\"拷贝到堆栈中的s数组中\n```\n\n[参考检验代码_12](#C++ const运用\t\t\t\t==检验代码_12==)\n\n### 其他\n\n```markdown\n在函数后面加上const，一般出现在类中，意味着该函数不能修改该类的成员变量的值\n注：此时该函数声明和定义的地方都得加上const\n如：\n\tclass A{\n\tpublic:\n\t\tA();\n\t\t~A();\n\t\tvoid test_func() const;\t\t//声明一个带有const关键字的成员函数\n\tprivate:\n\t\tint i;\n\t};\n\tvoid A::test_func() const{\t//带有const关键字的成员函数的定义\n\t\ti++;\t//报错，const类型的成员函数无法修改成员变量的值\n\t}\n注1：实现原理实际上是编译器把this改成了带const关键字的this，所以该函数通过this无法修改成员变量，因为const <pointer_type>* p，p所指内容无法通过p修改\n注2：如果在一个对象前面加上const则该对象就没法被修改了\n如：\n\tconst A a;\t//a的成员变量无法被修改，这样做没有意义\n```\n\n### 使用const来实现重载\n\n```markdown\n实际上就是默认参数this带了const关键字，所以可以重载\n```\n\n[参考检验代码_13](#C++ const运用_2\t\t\t\t==检验代码_13==)\n\n### 特别注意\n\n```markdown\n当对象带有const关键字时，要求将其所有成员变量在对象在初始化时都初始化（写在构造函数里面初始化和使用初始化列表初始化都可）。并且，如果要调用某个成员函数则该成员函数必须得有带const关键字的重载\n\t实际上是因为当一对象带有const关键字时，其调用成员函数时，它传递的this是带有const关键字。因此当其调用某一成员函数，且该成员函数没有带const的重载时，相当于找不到对应函数\n\n当对象有的成员变量是带有const关键字时，则这些成员变量需要在构造函数中初始化，且只能使用初始化列表初始化（只要成员变量带了const关键字，都必须使用初始化列表初始化）\n```\n\n\n\n## 基础概念_9——引用\treference\n\n### 介绍\n\n```markdown\n引用相当于给一个东西又取了一个名字\n如：\n\tchar c;\n\tchar& r = c;\t//即c和r是同一个字符的两个不同的名字\n使用方法：\n\t一般情况：\n\t\ttype& refname = name;\n\t\t类型& 引用的名字 = 被引用的目标;\n\t参数表或成员变量时：\n\t\ttype& refname\n注1：引用在定义时必须初始化，且让其初始化的东西必须是在内存空间有地址的\n如：\n\tint& z = i*3;\t//报错，因为i*3只有结果，但结果没有储存在内存中\n和const搭配\n\tconst int& z = x;\t//z是x的引用但不能通过z去修改x的值 即z是read-only reference\n\n注2：&也可以用在函数上\n如：\n\tint& func(); \t//即最后func函数返回的是一个int类型的引用\n\n注3：&不能当作overload的参考，即如果想重载，但两个函数只有&的区别，则报错\n如：\n\tvoid func(int& a);\n\tvoid func(int a);\n\tint x = 2;\n\tfunc(x);\t//报错，因为编译器不知道到底要找哪一个func函数\n\n注4：\n\t实际上，reference的实现就是靠的const point，只是为了少一些*所以提出了reference，且一旦实现了引用就没办法去看这个引用自己的地址了，以后对其的操作都是在对其引用对象操作\n```\n\n### 特别注意\n\n```markdown\nreferences和pointres的区别:\n\tref不能是null，point可以是\n\tref依赖于一个已经存在的变量，point则是独立于其他变量\n\tref一旦初始化后，就不能再改变引用对象，point可以改变指向对象\n\tref不能引用ref，point可以指向另外的point\n重点：\n   \t有指针的引用，但没有引用的指针，就近原则，*离p近，p就是指针。&离p近，p就是引用\n   \t即：\n   \t\tint&* p;\t //报错，这里的意思是*p的类型是int ref的，即这个指针是int ref类型，出现了引用的指针\n   \t\tvoid func(int*& p);\t //可以，这里指p是ref，它引用的变量是int ref类型的，即指针的引用\n  \t没有引用类型的数组，因为ref时间根本就不是实体，因此不能有数组\n```\n\n\n\n## 基础概念_10——转换 conversion，造型 && 多态性  && 覆写 overriding\n\n### 转换&&造型\n\n```markdown\n如果B类继承于A类，则主要是A可以使用的地方，B都可以使用。即子类的对象都可以当父类对象看待这叫upcast，向上造型\n把父类当子类看待叫downcast，有风险报错\ncast 造型和类型转换有区别\n```\n\n[参考检验代码_14](#C++ conversion\t\t\t\t==检验代码_14==)\n\n### 多态  polymorphism\n\n```markdown\nvirtual关键字：\n\t成员函数前带有virtual意味着，如果该类的子类中重新写的该成员函数，则子类的那个成员函数和父类的成员函数有关系，且只要继承树中有一个祖先的函数带了virtual，其子子孙孙的那个同名函数都会默认带上virtual不管用户自己写不写上virtual。一般都写上方便看\n多态的实现：\n\tupcast，向上造型，把子类对象当父类对象看待\n\tDynamic binding，动态绑定，运行时才知道到底调用的哪个函数\n```\n\n### 例子\n\n```c++\nvoid render(Shape* p){\n    p->render();\n}\n//即这个p->render函数实际调用的是哪个render函数要得到运行时，传的哪个shape或shape类的子类的对象才知道，它会去调用该对象对应的render，这就叫多态，这里p就是多态的\n//这里只要是shape或其子类都可以作为参数传进来\n//而virtual的意思就是告诉编译器，不要把后面的render函数写死了，实际调用的哪一个render得看运行时是那个对象\n```\n\n\n\n### ==特别注意==\n\n```markdown\n注1：\n\t任意一个类只要有带有virtual的成员函数则其大小就要比正常的类大且此时编译器会在实例化对象时给对象加上一个隐藏的成员变量vtpr指针，该指针指向这个类的vtable表，所有同一个类的实例化对象都指向同一个表，表中就是该类的各个虚函数的地址。而多态就是把子类的vtable中的虚函数地址换成了子类自己实现的那个虚函数的地址，如果子类没有自己声明那个虚函数则默认填上父类的那个虚函数的地址\n```\n\n[参考检验代码_15](#C++ virtual关键字\t\t\t\t检验代码_15)\n\n```markdown\n注2：\n\t通过赋值将子类对象赋值即 = 给父类对象，则父类的对象的vtpr仍不变。但可以通过指针来强行改变对象的vtpr指向。如果是通过指向子类对象的指针赋值给指向父类的指针，则实际是指针指向变了，俩对象都没变化\n```\n\n[参考检验代码_16](#C++ 魔改vtpr\t\t\t\t==检验代码_16==)\n\n```markdown\n注3：\n\t析构函数一般要用virtual格式，因为当把一个子类对象传给一个父类指针时，若delete该指针，当析构函数不是虚函数时，调用的就是父类的析构函数去析构的子类对象（静态绑定编译器直接把对应函数地址写死在那），只有当析构函数是虚函数时，才调用的是子类的析构函数（动态绑定编译器搞出个vtpr，用的时候去找vtable看用哪个函数）\n```\n\n### 覆写\n\n```markdown\n当子类覆写父类的成员函数后，又想使用父类的成员函数时要用 域解析符 ::\n如：\n\tclass A{\n\t\tpublic:\n\t\t\tvirtual void f();\n\t}\n\tclass B : public A{\n\t\tpublic:\n\t\t\tvirtual void f(){\n\t\t\t\tA::f();\n\t\t\t}\n\t}\n```\n\n[参考检验代码_17](#C++ 覆写\t\t\t\t==检验代码_17==)\n\n```markdown\n注：\n\t当父类中的某成员函数即有重载（overload）又有覆写（override），则子类必须覆写所有的重载，否则会发送name hidden（函数隐藏）\n\n重载和覆盖（覆写）的区别：\n\t虚函数是基类希望派生类重新定义的函数，派生类重新定义基类虚函数的做法叫做覆盖；重载就在允许在相同作用域中存在多个同名的函数，这些函数的参数表不同。重载的概念不属于面向对象编程，编译器根据函数不同的形参表对同名函数的名称做修饰，然后这些同名函数就成了不同的函数。重载的确定是在编译时确定，是静态的；虚函数则是在运行时动态确定。\n```\n\n\n\n## 基础概念_11——引用再体验\n\n```markdown\n注1：\n\t当类中的成员变量是引用类型时，必须使用初始化列表来初始化该成员变量\n如：\n\tclass A{\n\t\tprivate:\n\t\t\tint& i;\n\t\tpublic:\n\t\t\tX(int& a);\n\t}\n\tX::X(int& a) : i(a) {}\t\t//初始化列表也可以写在类外面\n```\n\n### ==特别注意==\n\n```markdown\n\t当函数要返回一个ref（引用）时，更倾向于返回一个非本地变量（因为离开该函数，本地变量就不存在了），然后就出现了，一个函数的返回值做了赋值符号的左值\n如：\n\tfunc(3) = 21;\n注：\n\t当函数的形参是ref类型时，向函数传递temporary value（就是那些在内存空间没有储存的地址的值，如23，i*2这种实际上是系统用一个const int型的匿名变量来接值，若非要用一个参数是const int& 的函数来接也是可以实现的😂）\n```\n\n[参考检验代码_18](#C++ 引用再体验\t\t\t\t==检验代码_18==)\n\n[参考检验代码_19](#C++ 匿名变量\t\t\t\t==检验代码_19==)\n\n```markdown\n结论：\n\t在给一些函数传递对象时的方法\nA a;\t\t\t//a是A类的对象\n法1：\n\tfunc(A x);\t//func函数的形参格式\n\tfunc(a);\t//直接传对象，系统会再拷贝一次对象a，占空间，耗时长\n法2：\n\tfunc(A* x);\n\tfunc(&a);\t//传a的地址，不安全，func可以通过x指针修改a中成员变量\n法3：\n\tfunc(const A* x);\t\n\tfunc(&a);\t//传a的地址，且不能通过x指针修改a中的成员变量\n法4：通法\n\tfunc(const A& x);\n\tfunc(a);\t//同上，只是不用在func函数中写很多的*，因为指针要使用时得用*来表示该操作是对指向空间的操作\n```\n\n### 细节\n\n```markdown\n注意区分函数返回的是值还是变量\n如：\n\tclass A{...};\n\tA func(){\t//这个返回的是一个变量，返回值可以作 = 的左值，但是作完左值后，就没办法控制这个变量了，它相当于消失了\n\t\tA a;\n\t\treturn a;\n\t}\n\tint func(){\t\t//这个返回的是一个值 10，返回值不可以作 = 的左值\n\t\tint i = 10;\n\t\treturn 10;\n\t}\n```\n\n\n\n## 基础概念_12——拷贝构造\n\n### ==特别注意==\n\n```markdown\n初始化initialization和赋值assignment的区别\n\tint i = 10;\t\t//初始化且赋值，初始化只能有一次\n\ti = 12;\t\t\t//赋值，赋值可以有多次\n\n注1：c++中既可以使用 = 来初始化对象，又可以使用 () 来初始化，使用 = 时需要存在一个构造函数的参数是 = 的右值\n如：\n\tclass A {\n\t\tpublic:\n\t\t\tA();\n\t\t\tA(int i);\n\t}\n\tA a; //调用A()构造函数\n\tA a = 10; //调用A(int i)构造函数\n\tA a(10); //等价于上一句\n注2：\n\t当初始化时使用另外一个同一个类的对象来初始化一个对象，这就叫拷贝构造\n拷贝构造函数，自己不定义时，编译器会自动给出（默认拷贝每一个成员变量，如果有另外的类的对象，则会用对应的那个类的拷贝构造来拷贝这个成员变量，这是成员对成员的拷贝，即有成员变量是类的对象时是通过拷贝构造函数来拷贝的，不是字节对字节的拷贝），格式就是构造函数只是参数是这类的对象的const 引用\n如：\n\tclass A {\n\t\tpublic:\n\t\t\tA();\t//默认构造函数\n\t\t\tA(const A& );\t//拷贝构造函数，& 不能省，不然编译器会告诉你，你写错了🤣，因为不写&就会反复发生拷贝构造还没法跳出循环\n\t\t\tA(int i);\t//自定义构造函数\n\t}\n\tA a; //调用A()构造函数\n\tA a = 10; //调用A(int i)构造函数\n\tA a(10); //等价于上一句 \n注3：当类中的成员变量有指针时，拷贝构造函数默认会把拷贝出来的对象的那个指针成员变量指向，被拷贝的对象的那个对应的指针指向的内存空间\n```\n\n```markdown\n拷贝构造发生在用一个对象去初始化的另一个对象时，有显然情景和隐藏情景\n显然情景：\n\tA a;\n\tA b = a;\t\t//显然用一个对象去初始化另一个对象\n\tA b(a);\t\t//等价于上一条语句，只是写的方式不一样\n隐藏情景——1：\n\tfunc(A b);\n\tA a;\n\tfunc(a);\t//在函数调用传递参数时发生拷贝构造\n隐藏情景——2：\n\tA func(...);\n\tA a = func(...);\t//在函数返回时发生拷贝构造\n注：\n\t把拷贝构造函数放在private下面，可以让别人没法用该类的对象来构造另一个对象，不能拿来直接当函数参数传递\n```\n\n\n\n## 基础概念_13——静态 Static\n\n```markdown\nstatic——c：\n\t一个全局变量是static的指该变量只在那个.c文件中有效\n\t一个本地变量是static的指该本地变量具有持久储存（离开这个函数，进入其他函数，该变量依然存在不会被销毁，实际上一个本地变量加上static后就是全局变量）\n\t一个函数是static的指该函数只能在那个.c文件中被访问\nstatic——c++：\n\t带static关键字的本地变量，意味着该变量持久储存，但只能在该函数内部访问\n\t带static关键字的成员变量，意味着该变量可以被该类所有的对象访问，即被所有实例共享，但该变量只会初始化一次\n\t带static关键字的成员函数，意味着该函数可以被该类所有的对象使用，即被所有的实例共享，但该函数只能访问带有static关键字的成员变量\n\n全局变量的构造函数在程序运行时，main函数执行前执行。它的析构函数在程序结束后main函数结束时调用\n注：\n\tc++多个文件中全局变量的初始化是没有固定顺序的，所以当全局变量之前相互有依赖关系时，要么把有依赖的全局变量全写在用一个文件中，要么别这样写\n```\n\n### static 成员变量（实际上就是把那个变量搞成了全局变量，且声明其是某个类的全局变量）\n\n```markdown\n注意：\n\t直接写static int i;这是声明，不是定义，编译能过，但链接过不了，这语句类似于extern int i;即告诉编译器有一个i存在，但在哪并没有说\n实际使用需在某处给出static成员变量的定义\n如：\n\tclass A{\n\tpublic:\n\t\tA();\n\t\tvirtual ~A();\n\t\tA(const A& );\n\tprivate:\n\t\tstatic int i;\t//A类中带有static关键字的i的声明\n\t}\n\tint A::i;\t//i的定义，没有这句，链接报错，提示找不到i，这句就是正常的定义，除了多了个类名和域解析符，也写成 int A::i = 123;都可以\n带static关键字的成员变量，是类的所有对象共享的，且怎能在它定义处初始化，不能用初始化列表来初始化\n注：如果成员变量带有static关键字则哪怕没有实例化任何该类的对象，仍然可以通过<class_name>::<var_name>();来使用该成员变量\n```\n\n[参考检验代码_20](#C++ 静态成员变量\t\t\t\t==检验代码_20==)\n\n### static成员函数\n\n```markdown\n如果成员函数带有static关键字则哪怕没有实例化任何该类的对象，仍然可以通过<class_name>::<func_name>();调用该成员函数\n\n注：静态的成员函数只能访问静态的成员变量，连this这个隐藏变量都不能使用（也就是说静态成员函数没有隐藏变量this），因为你甚至可以不实例化对象来调用它，要是它能访问this岂不是找了个寂寞🙌\n```\n\n\n\n## 基础概念_13——运算符重载\n\n```markdown\nc++中能够被重载的运算符：\n\t+ - * / % ^ & | ~\n\t= < > += -= *= /= %= ^= &= |=\n\t<< >> >>= <<= == != <= >= ! && || ++ --\n\t, ->* -> () []\n\toperator new\toperator delete\t\t//你没看错，new和delete都能重载😮\n\toperator new[]\toperator delete[]\nc++中不能重载的运算符：\n\t.\t.*\t::\t?:\n\tsizeof\ttypeid\n\tstatic_cast\tdynamic_cast const_cast reinterpret_cast\n注1：运算符重载只针对已有的运算符，你不能自己搞一个颜文字来重载。运算符重载只是针对自己定义的类或者其他什么自定义数据类型（枚举...）\n注2：不能重载基础的数据类型的运算符，什么int的加法重载成减法那是不行的\n注3：不能重载操作数个数，即不能把二目运算符改成三目运算符，还不能改运算的优先级\n```\n\n### 使用方法\n\n```markdown\n运算符重载实际上就是为那个运算符写一个特别的函数，该函数前面要使用operator关键字\n该函数可以作为某个类的成员函数\n如：\n\tconst String String::operator +(const String& that);\n该函数返回一个带const关键字的String类的对象，需要一个String对象参数（+ 需要两个算子，但String是一个类，所以当其对象使用自己所属类的成员函数时，自带一个this，因此只需要一个参数就可以了）\n该函数也可以作为全局函数\n如：\n\tconst String operator +(const String& r, const String& l);\n参数列表中用的带const关键字的引用是为了防止在该函数内部对对象的成员变量进行修改（加法是不会修改两算子的值），因为这不是某个类的成员函数，所有需要两个算子\n\n注：这里返回值也带const的原因是因为防止出现返回结果作左值的情况\n如：出现\n\ta + b = 6;\t这种操作，编译通不过\n```\n\n### ==特别注意==\n\n```c++\n在c++中运算符的左边算子称为receiver，编译器通过左边算子来确定，这个运算符应该用哪个重载的函数\n如：\n\tInteger x(1), y(5), z;\t//初始化x, y, z（为赋值）\n\tx + y;\t//实际等价于x.operator+(y)，receiver是x\n\tz = x + y;\t//使用的是Interger的 + ，receiver是x\n\tz = x + 3;\t//使用的是Interger的 + ，receiver是x，且3会被先构造成一个你匿名的Interger的对象（Interger有一个参数为int的构造函数）\n\tz = 3 + y; \t//用的是int的+，receiver是3，此时需要int有一个通过Integer构造int的构造函数，否则报错，编译不过\n\n一目运算符\nclass Integer{\n...\npublic:\nconst Integer operator-() const{\t//只需要一个算子的运算符，作为成员函数时不需要参数，因为默认有个this，函数返回值带const是为了防止返回结果作左值，函数带const是为了不修改作运算的对象的值\n\treturn Integer(-i);\n}\n};\nz = -x;\t//等价于z.operator=(x.operator-());\n\n注：一目运算符使用全局函数重载时，一般要在操作的类中使用关键字friend声明\n如：\n\tclass Integer {\n\tpublic:\n\t\tfriend const Integer operator+(const Integer& lhs, const Integer& rhs);\t//声明这个函数是friend，其可以访问Integer类的成员变量（private的成员变量也可以访问）\n\t\t...\n\t};\n\t\n\tconst Integer operator+(const Integer& lhs, const Integer& rhs){\n\t\treturn Integer(lhs.i + rhs.i);\n\t}\t//重载 + 的函数的body，返回值加const防止返回结果作左值，形参加const防止修改算子的值\n\tz = x + y;\t//可以，完全符合这个全局重载函数的参数列表\n\tz = x + 3;\t//可以，receiver是x，Integer类有一个自己的运算符重载函数，会先把3构造成一个匿名的Integer对象，在调用全局重载函数\n\tz = 3 + x;\t//可以，会默认把3构造成一个匿名的Integer对象，再调用这个全局重载函数\n\tz = 3 + 7;\t//可以，receiver是3，调用int::operator+()把结果10返回来后用构造函数构造成一个Integer之后在赋值给z\n```\n\n```markdown\n关于是否把对一个类的运算符重载函数做成成员函数：\n1.\t单目运算符重载应该做成成员函数\n2.\t= () [] -> ->* 这几个必须做成成员函数\n3.\t其他的所有二目运算符做成非成员函数（使用friend关键字在类中声明）\n\n关于运算符重载函数的参数设置：\n1.\t如果该运算符不会修改算子，则形参要用const修饰，如：+ - =\n2.\t如果该运算符要修改算子，则形参不能有const修饰，如：++ -- \n3.\t如果运算结果不能作左值，则函数需要用const修饰，如：+ -\n4.\t如果运算结果可以作左值，则函数不要用const修饰，如：[]\n5.\t如果是类成员函数，且运算结果是会修改该类对象，则该函数不能用const来修饰\n```\n\n### 常见的运算符原型\n\n```c++\n1.\t+-*/%&|~\n\tconst T operatorX(const T& i, const T&r)const;\n2.\t! && || < <= == >= >\n\tbool operatorX(const T&i, const T&r)const;\n3.\t[]\n\tT& T::operator[](int index);\n4.\t++\nprefix ++（++在算子前）：\n    const T& operator++();\t//返回的是加完后的结果，如：++a，返回的是a加完后的结果\n定义的例子(具体怎么实现得看具体对象)：\nconst Integer& Integer::operator++(){\t//这里函数返回值带ref更方便，要是直接返回一个对象则会发生拷贝构造\n    *this += 1;\n    return *this;\n}\n\npostifx ++（++在算子后）:\n\tconst T operator++(int); //返回的是加完前的结果，如：a++，返回的是a加完前的a\n定义的例子：\nconst Integer Integer::operator++(int){\t//这里函数返回值没有带ref是因为不能返回一个本地变量的ref，因为离开了这个函数，本地变量就不存在了\n    Integer old(*this);\t//拷贝构造\n    ++(*this);\t\t//调用上面的prefix ++函数\n    return old;\t\t//返回一个对象，在发生一次拷贝构造\n}\n5.\t--\n道理同++\n\tconst T& operator--();\n\tconst T& operator--(int);\n注：++和--中prefix和postfix参数不一样是为了做重载，编译时，调用postfix函数编译器会自动给一个 0 作为参数\n    \n6. [] index运算符\n    返回的是成员的引用，因为可以用来作左值\n```\n\n### 奇淫巧计\n\n```markdown\n对于关系运算符：> < >= <= == !=\t只需要定义<和==即可，其他的都可以通过这俩来推出\n如：\nbool Integer::operator==( const Integer& rhs) const {\n\treturn i == rhs.i;\t\t\t//定义了 ==\n}\nbool Integer::operator!=( const Integer& rhs) const {\n\treturn !(*this == rhs);\t\t//调用了 == \n}\nbool Integer::operator<( const Integer& rhs) const {\n\treturn i < rhs.i;\t\t\t//定义了 <\n}\nbool Integer::operator>( const Integer& rhs) const {\n\treturn rhs < *this;\t//调用了 <\n}\nbool Integer::operator<=( const Integer& rhs) const {\n\treturn !(rhs < *this); //调用了 <\n}\nbool Integer::operator>=( const Integer& rhs) const {\n\treturn !(*this < ths); //调用了 <\n}\n\n注：这样写的好处是，以后要修改代码，只需要改两处地方即可\n```\n\n### 赋值运算符\n\n```markdown\n如果没有给一个类的赋值运算符重载函数，则编译器会自动创造一个赋值运算符的重载\nT::operator=(T){}进行一个memberwise的赋值操作，即有成员变量是其他类则要调用那个类的赋值运算符重载函数\n\n注1：如果要自己实现赋值运算符的重载函数，则该函数一定要是成员函数，且是对自己赋值然后返回自己\n如：\n\tT& T::operator=(const T& rhs){\n\t\tif(this != &rhs){\t//当自己不是赋值给自己时才做赋值操作，否则直接返回自己\n\t\t\t//assignmeng的具体实现\n\t\t}\n\t\treturn *this;\n\t}\n注2：if检查在类有动态申请内存（有指针成员变量）的时候要写，否容易出现问题\n如：\n\tclass A{\n\t\tprivate:\n\t\t\tchar *p;\n\t\tpublic:\n\t\t\tA& operator=(const& A that){\t\t//此时当出现某对象自己给自己赋值时报错，因为p已经被delete了，that.p不存在，直接报错，要不就读到别人地址了\n\t\t\t\tdelete p;\n\t\t\t\tp = new [strlen(that.p)+1];\n\t\t\t\tstrcpy(p, that.p);\n\t\t\t\treturn *this;\n\t\t\t}\n\t}\n```\n\n### 类型转换\n\n```markdown\n1.\t自动类型转换\n\t当一个函数f的参数需要类A的变量，但类A有一个参数为类B的构造函数，此时给f一个B的对象，仍然不会出错。因为系统会自动调用A的对应的那个构造函数来通过B的对象来构造一个A的临时匿名对象传给f函数，如果不想系统自动转换则需要在该构造函数前加上explicit关键字\n\n2.\t默认的自动转换（=> 的意思相当于是可以把 => 左边的东西直接传给右边）：\n\tPrimitive（小范围 => 大范围）：\n\t\tchar => short => int => float => double\n\t\t\t\t\t => int => long\n\tImplicit(对于单独某个类来说)：\n\t\tT => T&,\t绑定\n\t\tT& => T,\t初始化/赋值\n\t\tT* => void*,\t去除指针类型，简称退型，指针仍指向那片地址空间，但指针没有类型了\n\t\tT => const T,\t把一个变量当const看待\n\t\tT[] => T*,\t数组可以用指针来控制\n\t\tT* => T[],\t指针可以用数组来控制\n\n3.\t专用类型转换（T => C，不同类型之间的转换）\n\t使用专用类型转换函数\n\t类中声明：operator target_class();\n\t类外定义：X::operator target_class(){...}\n\t作用：将X类的对象转换为target_class类的对象\n\t专用的类型转换函数，该函数没有写返回类型，实际上target_class就是返回类型，target_class可以是任何系统和自定义的类\n如：\n\tclass Rational {\n\tpublic:\n\t\t...\n\t\toperator double() const;\t//将rational类转换为double类型\n\t}\n\tRational::operator double() const {\n\t\treturn numerator_/(double) denominator_;\t//实现转换，瞎写的，这里是在举例子怎么写\n\t}\n\n注：不能出现：\n\t1. A类中有一个转换为B类的专用类型转换函数a_to_b()\n\t2. B类中有一个以A类对象为参数的构造函数B(A& a)\n\t3. 有一个函数f需要一个B类对象，但传给f了一个A类的对象\n\t此时报错，因为编译器不知道用a_to_b函数还是B(A& a)函数，它俩没有优先级区别，此时要么删掉一个，或者在B(A& a)函数前加上explicit关键字免得系统自动调用这个构造函数\n```\n\n[参考检验代码_21](#C++ 自动类型转换\t\t\t\t==检验代码_21==)\n\n\n\n## 基础概念_14——模板——Template\n\n### 概念\n\n```markdown\n\t一种重用代码的方式，此时变量类型成为参数，可以有两种Template，function和class两种\n```\n\n### 1.函数模板——function template\n\n```c++\n//一种模板用来做出函数，相当于告诉编译器，它要怎么帮你做出一个函数\n如：\n使用一般函数：\n\tvoid swap(int& x, int& y){\t//这个函数只能交换俩int类型的变量\n\t\tint temp = x;\n\t\tx = y;\n\t\ty = temp;\n\t}\n使用函数模板：\n\ttemplate < class T >\t//template是关键字，class T是用来代表任意类型（你要是喜欢也可以用X）（实际上就是用来占位的，可以有多个如：template <class T1, class T2>，逗号隔开即可），这一语句下面是函数那就是函数模板，是类那就是类模板，即下面的swap函数就是函数模板，T代表任意的类型可以是基本类型也可以是用户自定义类型\n\tvoid swap (T& x, T& y){\t\n\t\tT temp = x;\n\t\tx = y;\n\t\ty = tmep;\n\t}\n注1：实际上上面的代码是declaration（声明），编译器会把这段代码记录下来，以后遇到调用swap时，会用那个模板把T变成调用处对应的类型X（随便用个字母表示），自动做出一个参数是X类型的swap函数（和其他的swap形成重载）\n\n注2：使用函数模板后系统会ban掉显示（explicit）自动类型转换和隐式（implicit）类型转换，如上面例子中swap(int,int);可以，但swap(int,double);不行\n\n注3：重载规则，检查是否只有唯一的函数匹配--否-->检查是否只有唯一的函数模板匹配--否-->找重载函数\n\n注4：如果函数模板的函数中没有使用到占位的class T，则在调用时需显示的给出标识用哪种类型如：\n\ttemplate <class T>\n\tvoid foo(void ){...}\n    foo<int>();\t//此时 T 的type是int \n    foo<float>();\t//此时 T 的type是float\n```\n\n### 2_类模板——class tmeplate\n\n```c++\n//一种模板用来做出类，类模板里的每一个函数都是函数模板\n例子：\n\ttemplate <class T>\t//同函数模板，关键字和占位类型（占位类型可以有多个如：template< class key, class value> ，逗号隔开即可），表示下面的东西是template，Vector是一个声明\n\tclass Vector {\t//和正常类一样，Vector是名字\n\tpublic:\n\t\tVector(int);\t//构造函数，参数为int\n\t\t~Vector();\t//析构函数\n\t\tVector(const Vector&);//拷贝构造函数\n\t\tVector& operator=(const Vector&);\t//赋值运算符重载\n\t\tT& operator[](int);\t\n\tprivate:\n\t\tT* m_elements;\n\t\tint m_size;\n\t}\n注5：使用Vector时因为表示传参数，所以得像 注4 那样显示地指明 T 的type，如：Vector<int> i(100);\t//通过参数为int类型的构造函数创建一个Vector对象，且 T 的类型是int\n\n注6：类模板中的类的函数，都得写成函数模板的格式（其实也就是在类成员函数的定义前加上 template <class T >，然后按需求把某些变量类型改成 T ，类名后和域解析符前得加上 <T> ）如：\n\ttemplate <class T>\t//不能省\n\tVector<T>::Vector(int size) : m_size(size) { //参数为int的构造函数的定义，注意Vector<T>，中<T>不能省\n\t\tm_elements = new T[m_size];\n\t}\n\n\ttemplate <class T>\t//不能省\n\tT& Vector<T>::operator[] (int indx)\t{ //赋值运算符重载函数的定义，注意Vector<T>，中<T>不能省\n\t\tif (indx < m_size && indx > 0){\n\t\t\treturn m_elements[indx];\n\t\t}else {\n\t\t\t...\n\t\t}\n\t}\n注7：如果出现Vector< Vector < double *> >;（即有一个Vector它的每一个单元都是一个Vector，而那个Vector的每一个单元都是一个double *）这种要注意，最后面的两个>，有些编译器要中间加一个空格，否则会识别为右移或者流\n    \n注8：模板函数的占位类型实际可以非常复杂如：\n    Vector< int (*) (Vector<double>&,int) >;（一个Vector它的每一个单元都是一个函数指针，该函数指针指向的函数的参数有两项，第一项是一个每一个单元都是double的Vector而且是通过引用传递，第二项是一个int）\n```\n\n### 3_模板函数——template function\n\n```c++\n就是由模板生成的函数\n```\n\n### 4_模板类——template class\n\n```c++\n就是由模板生成的类\n```\n\n### ==特别注意_1==\n\n```c++\n模板template的参数不仅可以是一种未指定类型（占位类型），也可以是实际类型（甚至可以给其设置缺省值）\n如：\n\ttemplate <class T, int bounds = 100> //bounds是一个带缺省值的变量，且在模板里面可以直接使用\n\tclass FixedVector {\n\tpublic:\n\t\tFixedVector();\n\t\t//...\n\t\tT& operator[](int);\n\tprivate:\n\t\tT elements[bounds];\n\t}\n\t\n\tFixedVector<int, 50> v1; \t//种50个int\n\tFixedVector<int, 10*5> v2;\t//种50个int\n\tFixedVector<int> v3;\t\t//种100个int\n```\n\n### ==特别注意_2==\n\n```markdown\n1.\ttemplate和template之间不能做继承，\n2.\ttemplate可以继承于一个non-template的类\n\n3.\tnon-template类也可以继承template类（实际是先种出一个模板类再把这个模板类继承给那个non-template类）如：\n\tclass SupervisorGroup : public List<Employee*>{...} //List是一个类模板，这里指定了占位类型为Employee *\n```\n\n\n\n## 基础概念_15——异常——exception\n\n```c++\n概念：\n\t运行到某处时，有问题出现，但当前环境或程序或函数无法处理，以至于无法继续下去的情况就叫exception，但在某处，某个程序或函数可以处理\n\n关键字：\n\ttry {\n\t\tcode;\t\t\t\t\t\t//catch中也可以throw异常\n\t} catch ( error_type ){\t\t\t// error_type 是 ... 时表示捕获所有类型的异常\n\t\tcode;\t\t\t\t\t\t//catch中也可以throw异常\n\t}\n\nthrow error_type;\t//向上抛异常并退出当前函数，直到遇到有catch能捕获抛出的异常时停止\n```\n\n### 使用\n\n```c++\ntry block\n    try {\n        code_1;\t\t\t\t\t\t\t\t//尝试做一些可能会导致异常的代码\n    }catch (error_type_1 var_name){\t\t\t//error_type_1 var_name可以理解成函数的形参表，且var_name变量在对应的code中可以使用，其实catch就像一个处理函数\n    \tcode_2;\n    }catch (error_type_2 var_name){\t\t\t//针对error_type的子类，会执行类型转换（upcast，向上造型），即子类的捕获要放在父类捕获前，否则该子类catch永远无法执行，编译无法通过\n        code_3;\n    }\t\t\t\t\t\t\t\t\t//catch查找是按从上到下的顺序查找的，如果catch(...)是第一个catch则其后的catch全部永远没法执行，编译无法通过\n\n\n特色操作：\n    void func(int a) : throw(error_type_1, error_type_2){\t//c++函数后面这样写，代表该函数在运行时最多可能会抛出这些异常，这样写后func只能抛出error_type_1和error_type_2两种异常，抛其他异常，系统反而会抛异常\n    \tcode;\n\t}\n\t//一个函数后面不这样写，则可以抛出任何异常。如果是throw()，括号里面不写类型则意味着该函数不会抛出任何异常\n\n注：c中malloc失败时会返回一个null，但在c++中不会，只会抛一个bad_malloc异常\n```\n\n### ==特别注意==\n\n```markdown\n构造函数中如果使用抛异常来通知构造失败的话（因为构造函数和析构函数没有返回值），可能会导致奇奇怪怪的问题，因为如果构造函数使用到了new，但构造没成功，抛了异常，那么new来的空间就变成垃圾内存了\n```\n\n\n\n## 基础概念_16——流——stream\n\n```markdown\n流——单方向\nc和c++对文件操作的区别：\n\tc语言中，对一个文件可以任意的游走（random access），从第一段开始读，从第25段的第34个字符开始读。而c++的流是单方向的，“流”过去了，就没有了\n\n流操作——Stream operations\n1.\tExtractors —— >> 从流里面读东西（已经被重载，根据左边的receiver不同调用的不同，如果receiver是istream则是extractor，receiver如果是一个int则是右移）\n\n2.\tInserters —— << 向流里面写东西（同上）\n\n3.\tManipulators —— 操控流的怎么读，怎么写（类似格式化输入输出）\n\n流的类型——Stream type\n1.\tText streams\n\t文本流，parse和format，解析和格式化\n2.\tBinary streams\n\t二进制数据，\n```\n\n### 基本操作\n\n```c++\n1.\tistream >> lvalue\n\t会根据lvalue的变量类型，自动解析怎么把值传给lvalue\n注1：自动解析的类型：\n\tchar\t\t%c\n\tshort, int\t%d\n\tlong\t\t%ld\n\tfloat\t\t%g\n\tdouble\t\t%lg\n\tlong double\t%Lg\n\tchar *\t\t%s\n\tvoid *\t\t%p\n\n2.\t手动重载 >> 运算符\nistream& operator>>(istream& is, T& obj){\t//第一个参数（也就是receiver），istream&之所以不加const是因为要修改流\n\tcode;\t\t//读取流操作\n\treturn is;\t//返回类型也是istream& 是操作流之后可以把操作完后的流继续操作，如：( ( cin>>a )>>b )>>c\n}\n\n3.\t手动重载 << 运算符\n    ostream& operator<<(ostream& os, const T& obj){\n    \tcode;\t\t//实际插入流操作\n    \treturn os;\t\t//\t( ( cout<<a )<<b )<<c，返回的是ostream&的原因\n\t}\n4.\t常见使用\n    ch = cin.get();\t读一个字符，如果读完了则返回EOF\n    cout.put(ch);\t// 打印一个字符\n    ignore(int limit = 1, int delim = EOF);\t跳过多少个东西不读，一直读到什么位置，这里缺省值是跳过一个，一直读到结束\n    cout.flush();\t//强制输出流的内容到物理介质上去\n5.\tmanipulator，格式化\t//要导入头文件iomanip\n    endl其实是个manipulator\n    //例子\n    cin >> hex >> n;\t//以十六进制输入给n\n    cout << setprecision(2) << 1000.243 << endl;\t//按两位小数输出\n\tcout << setw(20) << \"OK!\";\t//占20位，输出右对齐\n6.\t常见manipulators:\n\tdec, hex, otc\t数字进制转化\t\t\t\t\t\t   \t\t \t\t\tI,O\n    endl\t\t\t插入一个新行，并使用flush\t\t\t\t \t\t\t\t\t O\n\tflush\t\t\tflush流（相当于刷新缓冲区）\t\t\t\t\t\t\t\tO\n\tsetw(int)\t\t设置占位宽度（最小要这么宽，宽度大于设定则不管）\t\t\tI, O\n\tsetfill(ch)\t\t如果输出的东西没有设定的那么宽，则用什么填充\t\t\t\t I, O\n\tsetbase(int)\t相当于进制拓展，可以设定以任意进制输出\t\t\t\t\t\t   O\n\tws\t\t\t\t\t跳过空格\t\t\t\t\t\t\t\t\t\t\tI\n\tsetprecision(int)\t设置精度，即多少位小数\t\t\t\t\t\t\t\t\tO\n\tsetiosflags(long)\t设置流里面都是ON，相当于1\t\t\t\t\t\t\tI, O\n\tresetiosflags(long)\t设置流里面都是OFF，相当于0\t\t\t\t\t\t\tI, O\n7.\t预定义流\n        cin\t\t\tstandard input\n        cout\t\tstandard output\n        cerr\t\tunbuffered error(debugging) output\n        clog\t\tbuffered error(debugging) output\n```\n\n### ==自定义Manipulator 与 IOS flag==\n\n```c++\n1.\tManipulator\n//这是全局函数\nostream& manip(ostream& out){\n    code;\n    return out;\n}\nostream& tab(ostream& out){\n\treturn out << '\\t';\t\t//返回一个ostream的引用，且返回时还有一个 << 的调用，把'\\t'插入到流中\n}\n\ncout << \"Hello\" << tab << \"World!\" << endl;\n\n2. ios :: flag\t标志\n    ios::skipws\t\t\t\t\t\t\t//忽略前导空格\n    ios::lef, ios::right\t\t\t\t//设置左对齐，右对齐\n    ios::internal\t\t\t\t\t\t//数值的符号位在域宽内左对齐，数值右对齐，中间由填充字符填充\n    ios::dec, ios::oct, ios::hex\t\t//设置整数的基数为10，8，16\n    ios::showbase\t\t\t\t\t\t//强制输出整数的基数(八进制数以0打头，十六进制数以0x打头)\n    ios::showpoint\t\t\t\t\t\t//强制显示小数点\n    ios::uppercase\t\t\t\t\t\t//16进制数大写输出\n    ios::showpos\t\t\t\t\t\t//强制显示符号\n    ios::scientific, ios::fixed\t\t\t//设置指数显示，固定浮点显示\n    ios::unitbuf\t\t\t\t\t\t//每次输出后刷新所有的流\n    ios::boolalpha \t\t\t\t\t\t//以“true”/“false”的形式输出布尔值\n    ios::stdio \t\t\t\t\t\t\t//每次输出之后清除stdout, stderr\n   \t//使用方法\n    2.1\t\t使用Manipulator\n    \tsetiosflags(flags);\t\t\t\t//flags 就是上面的代码，如ios::skipws\n    \tresetiosflags(flags);\n\t2.2\t\t使用stream成员函数\n        istream.setf(flags);\t\t\t\t\t//flags 同理，istream是cin或cout这种流对象\n        istream.unsetf(flags);\n```\n\n\n\n## 基础概念_17——STL——Standard Library\n\n```markdown\n1.\t容器——Containers（注意在使用时所有的容器都是小写，实际上就是类模板）\n\tVector\t\t一个可以在后面（一个方向）增长的数组\n\tDeque\t\t一个可以在前后都可以增长的数组\n\tList\t\t双向链表\n\tSets\t\t集合（没有重复的元素）\n\tMap\t\t\t映射，键值对\n\tPair\t\t表达两东西之间的关系，这两东西可以是任何东西\n2.\t基础算法——Basic Algorithms（实际上是一些函数模板）\n\tsort\t\t排序\n\tsearch\t\t查找\n\t...\n3.\t迭代器——Iterators\n\t如：\n\t\tvector<int>::iterator p;\t//p是vector<int>这个类里面的类叫iterator的对象\n\t\tp = x.begin();\t\t\t\t//p现在用来代表x中的第一个元素\n\t\tcout << *p << endl;\t\t\t//*是被重载了的，vector<in>说明p是一个int，所以*p是一个int\n\t\tp++;\t\t\t\t\t\t//++也是被重载过的\n4.\t所有STL的东西都是在 std 那个命名空间中，所以得使用using namespace std;否则用一个就得加 std::\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 类_例子\n\n#### 售票机类\n\n```c++\nclass TicketMachine {\npublic:\n    void showPrompt();\t//成员函数\n    void getMoney();\n    void printTicket();\n    void showBalance();\n    void printError();\nprivate:\n    const int PRICE;\t//成员变量\n    int balance;\n    int total;\n};\n```\n\n\n\n## 检验代码\n\n#### 分析类不同实例的成员变量值\t\t\t==检验代码_1==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\npublic:\n\tint i;\n\tvoid f();\n};\nvoid A::f()\n{\n\ti = 20;\n}\nint main()\n{\n\tA a;\n\tA b;\n\tb.i = 30;\n\tcout << \"b.i_1 = \" << b.i << endl;\n\ta.i = 10;\n\tcout << \"a.i_1 = \" << a.i << endl;\n\ta.f();\n\tcout << \"b.i_2 = \" << b.i << endl;\n\tcout << \"a.i_2 = \" << a.i << endl;\n}\n```\n\n### 输出\n\n```c++\nb.i_1 = 30\na.i_1 = 10\nb.i_2 = 30\na.i_2 = 20\n```\n\n\n\n#### 探究c++对象实质\t\t\t==检验代码_2==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\npublic:\n\tint i;\n\tvoid f();\n};\nvoid A::f()\n{\n\ti = 20;\n\tcout << \"A::f()--&i = \" << &i << endl;\n}\n\nint main()\n{\n\tA a;\n\tcout << \"&a = \" << &a << endl;\n\tcout << \"&a.i = \" << &(a.i) << endl;\n\ta.f();\n}\n```\n\n### 输出\n\n```c++\n&a = 0x61fe1c\n&a.i = 0x61fe1c\nA::f()--&i = 0x61fe1c\n```\n\n\n\n#### 解密new与delete\t测试1\t不带[]\t\t==检验代码_3==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\nprivate:\n\tint i;\npublic:\n\tA(){i = 0;cout << \"A::A()\" << endl;}\n\t~A() { cout << \"A::~A(), i = \" << i << endl; }\n\tvoid set(int i) { this->i = i; }\n};\nint main()\n{\n\tA *p = new A[10];\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tp[i].set(i);\n\t}\n\tdelete p;\n\treturn 0;\n}\n```\n\n### 输出\n\n```c++\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::~A(), i = 0\n```\n\n\n\n#### 解密new与delete\t测试2\t带[]\t==检验代码_4==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\nprivate:\n\tint i;\n\npublic:\n\tA() {i = 0;cout << \"A::A()\" << endl;}\n\t~A() { cout << \"A::~A(), i = \" << i << endl; }\n\n\tvoid set(int i) { this->i = i; }\n};\nint main()\n{\n\tA *p = new A[10];\n\tfor (int i = 0; i < 10; i++)\n\t\tp[i].set(i);\n\tdelete[] p;\n\treturn 0;\n}\n```\n\n#### 输出\n\n```c++\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::A()\nA::~A(), i = 9\nA::~A(), i = 8\nA::~A(), i = 7\nA::~A(), i = 6\nA::~A(), i = 5\nA::~A(), i = 4\nA::~A(), i = 3\nA::~A(), i = 2\nA::~A(), i = 1\nA::~A(), i = 0\n```\n\n\n\n#### 解密new与delete\t\t\t\t==检验代码_5==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\nprivate:\n\tint i;\npublic:\n\tA()\n\t{i = 0;cout << \"A::A()\" << endl;}\n\t~A() { cout << \"A::~A(), i = \" << i << endl; }\n\tvoid g(A *q) { cout << \"A::g(), q->i=\" << q->i << endl; }\n\tvoid set(int i) { this->i = i; }\n};\nint main()\n{\n\tA a;\n\ta.set(1);\n\tA b;\n\tb.set(1000);\n\ta.g(&b);\n\treturn 0;\n}\n```\n\n#### 输出\n\n```c++\nA::A()\nA::A()\nA::g(), q->i=1000\nA::~A(), i = 1000\nA::~A(), i = 1\n```\n\n\n\n#### 继承初体验\t\t\t\t==检验代码_6==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\npublic:\n\tA() : i(0) { cout << \"A::A()\" << endl; }\n\t~A() { cout << \"A::~A()\" << endl; }\n\tvoid print() { cout << \"A::f()\" << \"i=\" << i << endl; }\n\tvoid set(int ii) { i = ii; }\nprivate:\n\tint i;\n};\nclass B : public A{};\nint main()\n{\n\tB b;\n\tb.set(100);\n\tb.print();\n\treturn 0;\n}\n```\n\n#### 输出\n\n```c++\nA::A()\nA::f()i=100\nA::~A()\n```\n\n\n\n#### 继承再体验\t\t\t\t==检验代码_7==\n\n```c++\n#include <iostream>\nusing namespace std;\nclass A\n{\npublic:\n\tA(int ii) : i(ii) {}\n\t~A() { cout << \"A::~A()\" << endl; }\n\tvoid print() { cout << \"A::print() i = \" << i << endl; }\n\tvoid set(int ii) { i = ii; }\n\nprivate:\n\tint i;\n};\nclass B : public A\n{\npublic:\n\tB() : A(15) { cout << \"B::B() \" << endl; }\n\t~B() { cout << \"B::~B()\" << endl; }\n\tvoid f()\n\t{\n\t\tset(2);\n\t\tprint();\n\t}\n};\n\nint main()\n{\n\tB b;\n\tb.set(66);\n\tb.f();\n\treturn 0;\n}\n```\n\n#### 输出\n\n```c++\nB::B()\nA::print() i = 2\nB::~B()\nA::~A()\n```\n\n\n\n#### c++名字隐藏\t\t\t\t==检验代码_8==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass A\n{\npublic:\n\tA() { cout << \"A::A()\" << endl; }\n\t~A() { cout << \"A::~A()\" << endl; }\n\tvoid print() { cout << \"A::print() i = \" << i << endl; } //A类中print有重载\n\tvoid print(int ii) { cout << \"A::print(int ii) \" << ii << endl; }\n\tvoid set(int ii) { i = ii; }\n\nprivate:\n\tint i;\n};\nclass B : public A\n{\npublic:\n\tB() { cout << \"B::B() \" << endl; }\n\t~B() { cout << \"B::~B()\" << endl; }\n\tvoid f()\n\t{\n\t\tset(2);\n\t\tprint();\n\t}\n\tvoid print() { cout << \"B::print()\" << endl; }\n};\n\nint main()\n{\n\tB b;\n\tb.print();\t\t\t//使用B类自己的print函数\n\tb.A::print(1234);\t//使用A类的那个print函数\n\treturn 0;\n}\n```\n\n### 输出\n\n```c++\nA::A()\nB::B()\nB::print()\nA::print(int ii) 1234\nB::~B()\nA::~A()\n```\n\n\n\n### C++重载\t\t\t\t==检验代码_9==\n\n```c++\n//code.h文件\nvoid func(int i, int j=8);\n//code.cpp文件\n#include \"code.h\"\n#include <iostream>\nusing namespace std;\nvoid func(int i, int j){\n        cout << \"code.cpp::func \" << i << \":\" << j << endl;\n}\n//main.cpp文件\n#include \"code.h\"\nint main(){\n        func(1,29);\n        func(5);\n        return 0;\n}\n//编译时用 g++ code.cpp main.cpp -o main.exe\n```\n\n### 输出\n\n```c++\ncode.cpp::func 1:29\ncode.cpp::func 5:8\n```\n\n\n\n#### C++缺省声明探究\t\t\t\t==检验代码_10==\n\n```c++\n//code.cpp文件\n#include <iostream>\nusing namespace std;\nvoid func(int i=111, int j=111);\t//定义文件中的声明，此处声明不会生效，或者说会被覆盖\nvoid func(int i, int j){\n        cout << \"code.cpp::func \" << i << \":\" << j << endl;\n}\n//main.cpp文件\nvoid func(int i, int j=123);\t//调用func函数的文件中的声明，会失效\nint main(){\n        func(5);\n        return 0;\n}\n//编译时用 g++ code.cpp main.cpp\t会默认生成a.exe (windows下)\n```\n\n#### 输出\n\n```c++\ncode.cpp::func 5:123\n```\n\n\n\n#### C++其他编译单元调用内联函数\t\t\t\t==检验代码_11==\n\n```c++\n//main.cpp文件\n#include \"code.h\"\nint main(){\n        func(5);\n        return 0;\n}\n//code.h文件\n#include <iostream>\nusing namespace std;\ninline void func(int i, int j = 19){\n        cout << \"i = \" << i << \" j = \" << j << endl;\n}\n//编译时用 g++ main.cpp\n```\n\n#### 输出\n\n```c++\ni = 5 j = 19\n```\n\n\n\n#### C++ const运用\t\t\t\t==检验代码_12==\n\n```c++\n#include <stdio.h>\nint main(){\n        const char *s1 = \"hello world\";\n        char s2[] = \"hello world\";\n        printf(\"s1 =   %p\\n\", s1);\n        printf(\"s2 =   %p\\n\", s2);\n        printf(\"main = %p\\n\", main);\n        return 0;\n}\n```\n\n#### 输出\n\n```c++\ns1 =   0000000000404000\ns2 =   000000000061FE0C\nmain = 0000000000401550\n```\n\n\n\n#### C++ const运用_2\t\t\t\t==检验代码_13==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass A\n{\nprivate:\n    int i;\n\npublic:\n    A() : i(2) {}\n    ~A() {}\n    void f() { cout << \"f()\" << endl; }\n    void f() const { cout << \"f() const\" << endl; } //这两f函数的默认参数this不一样，一个带有const关键字，一个没有，所以可实现重载\n};\nint main()\n{\n    const A a;\t//a是有const关键字的对象\n    a.f();\t\t//调用的是带const关键字的f函数\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\nf() const\n```\n\n\n\n#### C++ conversion\t\t\t\t==检验代码_14==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass A\n{\nprivate:\n    const int i;\n\npublic:\n    A() : i(1) {}\n    ~A() {}\n    void print() { cout << \" A.i = \" << i << endl; } // A类中的print函数\n};\nclass B : public A\n{ // B类继承于A类\nprivate:\n    int j;\n\npublic:\n    B() : j(4) {}\n    void print() { cout << \" B.j = \" << j << endl; } // B类中的print函数\n};\nint main()\n{\n    A a;\n    B b;\n    a.print();\n    b.print();          //调用的是B类的成员函数print\n    b.A::print();       //调用的是A类的成员函数print\n    int *p = (int *)&a; //这里的&是取地址，不是引用，取a对象的地址，并转换为int类型\n    cout << \"p = \" << p;\n    *p = 20; //取了地址后，直接通过地址改变private属性的成员变量的值\n    a.print();\n    p = (int *)&b; //取对象b的地址，该地址如果是int型指针则正好可以控制A类中的i，即子类中的第一个成员变量\n    cout << \"p = \" << p;\n    a.print();\n    *p = 123; //肆意改动对象b的private成员变量的值\n    p++;      // p是int型指针，++后可以控制对象b中的j\n    *p = 2333;\n    cout << \"p = \" << p;\n    b.A::print(); //输出i\n    b.print();    //输出j\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\n A.i = 1\n B.j = 4\n A.i = 1\np = 0x61fe04 A.i = 20\np = 0x61fdfc A.i = 20\np = 0x61fe00 A.i = 123\n B.j = 2333\n```\n\n\n\n#### C++ virtual关键字\t\t\t\t==检验代码_15==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass A\n{\nprivate:\n    int i;\n\npublic:\n    A() : i(123) {}\n    virtual void f() { cout << \"A::f()\" << endl; }\n};\nint main()\n{\n    A a, b;\n    a.f();\n    cout << \"sizeof(a) = \" << sizeof(a) << endl;//输出对象a的大小\n    int *p = (int *)&a;\n    int *q = (int *)&b;\n    cout << \"q,*q = \" << *q << endl;\t//输出对象a的vtpr指针\n    cout << \"p,*P = \" << *p << endl;\t//输出对象b的vtpr指针\n    p++;\n    cout << \"p+1,*P = \" << *p << endl;\t//不知道输出了什么玩意的值\n    p++;\n    cout << \"p+2,*P = \" << *p << endl;\t//输出对现象a中的i的值\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\nA::f()\nsizeof(a) = 16\nq,*q = 4212016\np,*P = 4212016\np+1,*P = 0\np+2,*P = 123\n```\n\n\n\n#### C++ 魔改vtpr\t\t\t\t==检验代码_16==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass A\t\t//父类A\n{\npublic:\n    int i;\n\npublic:\n    A() : i(123) {}\n    virtual void f() { cout << \"A::f() i = \" << i << endl; }\n};\nclass B : public A\t\t//子类B\n{\npublic:\n    int j;\n\npublic:\n    B() : j(888) {}\n    virtual void f() { cout << \"B::f() i = \" << i << \" j = \" << j << endl; }\n};\nint main()\n{\n    A a;\n    B b;\n    int *p = (int *)&a;\n    int *q = (int *)&b;\n    A *aa = &a;\n    B *bb = &b;\n    cout << \"object a : \" << endl;\t//输出父类A的对象a的成员函数f\n    aa->f();\n    cout << \"object b : \" << endl;\t//输出子类B的对象b的成员函数f\n    bb->f();\n    cout << \"b.vtpr to a.vtpr\" << endl;\n    cout << \"object a : \" << endl;\n    *p = *q;\t//把子类对象b的vtpr指针赋值给了父类对象a的vtpr指针\n    aa->f();\t//此时父类对象a的vtpr已经指向了子类的vtable了所以调用的是子类的虚函数\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\nobject a :\nA::f() i = 123\nobject b :\nB::f() i = 123 j = 888\nb.vtpr to a.vtpr\nobject a :\nB::f() i = 123 j = 0\n```\n\n\n\n#### C++ 覆写\t\t\t\t==检验代码_17==\n\n```\n#include <iostream>\nusing namespace std;\n\nclass A\n{\npublic:\n    int i;\n\npublic:\n    A() : i(123) {}\n    virtual void f() { cout << \"A::f() i = \" << i << endl; }\n};\nclass B : public A\n{\npublic:\n    int j;\n\npublic:\n    B() : j(888) {}\n    virtual void f() { A::f(); }\n};\nint main()\n{\n    B b;\n    b.f();\n    return 0;\n}\n```\n\n#### 输出\n\n```\nA::f() i = 123\n```\n\n\n\n#### C++ 引用再体验\t\t\t\t==检验代码_18==\n\n```c++\n#include <iostream>\nusing namespace std;\nint array[100];\nint& func(int x){\n        return array[x];\n}\nint main(){\n        cout << \"arry[3] = \" << array[3] << endl;\n        func(3) = 24;\n        cout << \"arry[3] = \" << array[3] << endl;\n        return 0;\n}\n```\n\n#### 输出\n\n```c++\narry[3] = 0\narry[3] = 24\n```\n\n\n\n#### C++ 匿名变量\t\t\t\t==检验代码_19==\n\n```c++\n#include <iostream>\nusing namespace std;\nvoid f(const int &i)\n{\n    cout << i << endl;\n}\nint main()\n{\n    int i = 3;\n    f(i * 3);\t\t//系统会自动创建一个匿名变量来保存这个运算的值\n    f(3);\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\n9\n3\n```\n\n\n\n#### C++ 静态成员变量\t\t\t\t==检验代码_20==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass A\n{\nprivate:\n    static int i;\n\npublic:\n    A() {i = 10;}\t//这句只是赋值，不是初始化\n    void f() { cout << \"A::f() i = \" << i << endl; }\n    void set(int ii) { i = ii; }\n};\n\nint A::i;\t// A类中的静态成员i的定义也是初始化（只是没有赋初值）\nint main()\n{\n    A a, b;\n    a.set(123);\n    b.f();\t\t//如果i是public的，还可以直接b.i或者A::i来访问i都一样\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\nA::f() i = 123\n```\n\n\n\n#### C++ 自动类型转换\t\t\t\t==检验代码_21==\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass B;\t//B类的前项声明，免得因为B类写在A类后面导致编译器找不到B类\n\nclass A\n{\npublic:\t//在这个构造函数前加上关键字explicit后，将使该函数不能用于自动类型转换，然后报错\n    A(const B &b) { cout << \"A::A(const b &b)\" << endl; } // A类有一个可以通过B类对象构造自身对象的构造函数\n};\nclass B\n{\npublic:\n    B() {}\n};\nvoid f(A a) // f函数需要一个A类的对象\n{\n    cout << \"f()\" << endl;\n}\n\nint main()\n{\n    B b;\n    f(b); //给f函数传一个B类的对象b\n    return 0;\n}\n```\n\n#### 输出\n\n```c++\nA::A(const b &b)\t//默认调用的了A那个构造函数先通过B类的对象构造处一个匿名的A类的对象再传给f函数\nf()\n```\n\n\n\n","slug":"C++基础","published":1,"updated":"2023-02-23T14:53:29.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clehaba8t0003tcvc4lrbb722","content":"<h2 id=\"基本概念-1——杂项篇\"><a href=\"#基本概念-1——杂项篇\" class=\"headerlink\" title=\"基本概念_1——杂项篇\"></a>基本概念_1——杂项篇</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个类应该要有的函数：</span><br><span class=\"line\"><span class=\"code\">\tdefault constructor //默认构造函数</span></span><br><span class=\"line\"><span class=\"code\">\tvirtual destructor\t//带virtual关键字的析构函数</span></span><br><span class=\"line\"><span class=\"code\">\tcopy constructor\t//拷贝构造函数</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"What-to-do-not-How-to-do\"><a href=\"#What-to-do-not-How-to-do\" class=\"headerlink\" title=\"What to do not How to do\"></a>What to do not How to do</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\tClass 类，指具有相似特点的东西的抽象集合，类是虚的，是一种观点，像是对象的说明</span></span><br><span class=\"line\"><span class=\"code\">\tObject 实体，对象，是实例化的Class，是实的</span></span><br><span class=\"line\"><span class=\"code\">\tInterface 接口，即对象接收外部消息的途径，方法。主要是为了低耦合，隐藏内部实现</span></span><br><span class=\"line\"><span class=\"code\">注：Interface也可以理解成一个类对外公开的部分，可以是成员函数，也可以是成员变量</span></span><br><span class=\"line\"><span class=\"code\">\tEncapsulation 封装，把数据和对数据的操作放在对象里，隐藏数据的细节，其他对象只能通过受允许的操作来操作数据</span></span><br><span class=\"line\"><span class=\"code\">\t:: 域名解析符，用法&lt;Class Name&gt;::&lt;function name&gt;   不加Class Name时意味着为全局函数，同理 ::a++，意味着全局变量a++</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一些基本常识：\"><a href=\"#一些基本常识：\" class=\"headerlink\" title=\"一些基本常识：\"></a>一些基本常识：</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\t&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tcode;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">可以使用大括号来把一些代码括起来，其中的变量仅在大括号中存在，离开大括号就会自动销毁</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">\t# 开头的代码是编译预处理指令 如：#ifndef xxx 如果没有定义xxx #define xxx就定义xxx  #endif 定义结束</span></span><br><span class=\"line\"><span class=\"code\">\t注：#ifndef 常用于可能会出现反复定义的情况时 如：a.h中include了b.h，b.h中include了a.h，导致a.h中的定义出现不止一次</span></span><br><span class=\"line\"><span class=\"code\">因此引入了标准头文件结构避免出现重复定义：</span></span><br><span class=\"line\"><span class=\"code\">\t#ifndef HEADER_FLAG</span></span><br><span class=\"line\"><span class=\"code\">\t#define HEADER_FLAG</span></span><br><span class=\"line\"><span class=\"code\">\t//code</span></span><br><span class=\"line\"><span class=\"code\">\t#endif</span></span><br><span class=\"line\"><span class=\"code\">\t一个头文件只放一个Class的声明（Class大概是只有声明）</span></span><br><span class=\"line\"><span class=\"code\">\t&quot;xxx.h&quot;\t用&quot;&quot;括起来的头文件，编译器会去当前目录查找 </span></span><br><span class=\"line\"><span class=\"code\">\t&lt;xxx.h&gt;\t用&lt;&gt;括起来的头文件，编译器会去系统目录查找</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;xxx&gt;\tc++特有的插入方法</span></span><br><span class=\"line\"><span class=\"code\">\t*.h\t文件中放声明（只有头没有body）declaration  **全局变量的declaration用关键字 extern &lt;var type&gt; &lt;var name&gt;**</span></span><br><span class=\"line\"><span class=\"code\">该方式等价于对编译器说，我知道有一个全局变量，叫什么，什么类型，但我不知道它在哪里，然后编译器就会给它留个位置</span></span><br><span class=\"line\"><span class=\"code\">\t头文件 Header == interface</span></span><br><span class=\"line\"><span class=\"code\">\t*.cpp 文件中放定义（有头有body，实现）  definition，一个.cpp文件就是一个编译单元，在编译环节，编译器只会关注这一个编译单元，所以就是存在和其他编译单元同名的全局变量也是能通过编译的</span></span><br><span class=\"line\"><span class=\"code\">\tAbstract 抽象，只看某个层次，屏蔽其他部分的做法就叫抽象</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一般来说a.h文件是用来给调用a.cpp文件中的实现的其他文件看的，a.cpp文件是用来实现的。但也有特例，如内联函数的定义就需要直接写在.h文件中</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a><a href=\"#%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0\">内联函数</a></h3><h4 id=\"编译过程：\"><a href=\"#编译过程：\" class=\"headerlink\" title=\"编译过程：\"></a>编译过程：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">\tb(编译预处理) --&gt; c[编译]</span><br><span class=\"line\">\tc --&gt; d[汇编]</span><br><span class=\"line\">\td --&gt; e(链接)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">\ta(.ii)--&gt;b[.o]</span><br><span class=\"line\">\tb--&gt;c[.s]</span><br><span class=\"line\">\tc--&gt;d(.out)</span><br><span class=\"line\">\tc--&gt;e(.exe)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"g-命令\"><a href=\"#g-命令\" class=\"headerlink\" title=\"g++命令\"></a>g++命令</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--save-temps  保留中间文件</span><br><span class=\"line\">-Wall  输出所有可能的warning</span><br><span class=\"line\">-c 只编译不链接</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基本概念-2——变量篇\"><a href=\"#基本概念-2——变量篇\" class=\"headerlink\" title=\"基本概念_2——变量篇\"></a>基本概念_2——变量篇</h2><h4 id=\"常识\"><a href=\"#常识\" class=\"headerlink\" title=\"常识\"></a>常识</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">    local variable 本地变量，函数中定义的变量</span></span><br><span class=\"line\"><span class=\"code\">    parameters\t函数参数</span></span><br><span class=\"line\"><span class=\"code\">两种variable都是一样的，仅在对应函数运行时存在，放在本地</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a><strong>重点</strong></h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">field （一般）成员变量，类中的变量。存在于对应实例化的对象中，如，a，b都为A类的对象，则a中的成员变量值与b中可以不同</span><br></pre></td></tr></table></figure>\n\n<p>[参看检验代码_1 ](#分析类不同实例的成员变量值\t\t\t&#x3D;&#x3D;检验代码_1&#x3D;&#x3D;)</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：c++对象中实际仅有成员变量，也就是说，A a，实际a指向的地址中只有a的成员变量，没有成员函数在里面</span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_2](#探究c++对象实质\t\t\t&#x3D;&#x3D;检验代码_2&#x3D;&#x3D;)</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\tfield_function 成员函数，类的函数，属于类，不属于任何某个对象（实例）,相当于是该类所有对象的公共函数，但它（成员函数）会知道自己本次控制的是哪一个对象的成员变量</span></span><br><span class=\"line\"><span class=\"code\">注：实际就是采用了  this 是一个hidden parameter this的类型就是成员函数所属的类的指针，也就是说，所有的成员变量系统实际上是默认在其前面加上了this-&gt;，当然主动加上也是可以的</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">\t对于成员变量和成员函数可以这样理解，动物会运动，运动就是一种动物类的成员函数，如鸟会飞，飞这个动作不是属于某个鸟的，而是鸟这类的。但每一个动物的大小，颜色属于成员变量，如某只鸟的颜色，大小，</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基本概念-3——构造析构篇\"><a href=\"#基本概念-3——构造析构篇\" class=\"headerlink\" title=\"基本概念_3——构造析构篇\"></a>基本概念_3——构造析构篇</h2><h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor 构造，构造函数。无返回类型和返回值，且与类同名。在对象实例化时自动调用（无法干预），也在此时传参数给构造函数。其他同成员函数</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"例子-如：\"><a href=\"#例子-如：\" class=\"headerlink\" title=\"例子 如：\"></a>例子 如：</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Tree</span>(<span class=\"type\">int</span> x);\t<span class=\"comment\">//类Tree的构造函数，这里的形参名必须和构造函数定义处的形参一致\t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Tree::<span class=\"built_in\">Tree</span>(<span class=\"type\">int</span> x)&#123;\t\t<span class=\"comment\">//实现一些初始化的操作，实例化对象时调用</span></span><br><span class=\"line\">    i = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Tree <span class=\"title\">t</span><span class=\"params\">(<span class=\"number\">12</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">destructor 析构，析构函数。无返回类型，且与类同名，但前面多一个tilde ~符号。在对象要被结束掉时调用，无参数。析构意味着该对象的空间即将被收回，此时调用析构函数。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"例子-如：-1\"><a href=\"#例子-如：-1\" class=\"headerlink\" title=\"例子 如：\"></a>例子 如：</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Cat</span>(<span class=\"type\">int</span> init);</span><br><span class=\"line\">    ~<span class=\"built_in\">Cat</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Cat::<span class=\"built_in\">Cat</span>(<span class=\"type\">int</span> init)&#123; <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    i = init;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Cat::~<span class=\"built_in\">Cat</span>()&#123;\t\t<span class=\"comment\">//析构函数，一般执行释放系统资源等操作</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Game Over&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"> \tcout &lt;&lt; <span class=\"string\">&quot;before create &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">    \t<span class=\"function\">Cat <span class=\"title\">cat</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\t&#125;   </span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;after destructure&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-4——对象初始化-amp-amp-new和delete\"><a href=\"#基础概念-4——对象初始化-amp-amp-new和delete\" class=\"headerlink\" title=\"基础概念_4——对象初始化 &amp;&amp; new和delete\"></a>基础概念_4——对象初始化 &amp;&amp; new和delete</h2><h4 id=\"常识：\"><a href=\"#常识：\" class=\"headerlink\" title=\"常识：\"></a>常识：</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c++中的struct和class基本是一样，都可以称为类，只是struct在没有声明访问属性的地方默认为public，而class默认为private。一般只有当类非常简单时用struct，其他情况都用class</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">X</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"type\">float</span> f;</span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">X x1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">1.1</span>, <span class=\"string\">&#x27;c&#x27;</span>&#125;;\t<span class=\"comment\">//结构体初始化的一种方式</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"默认构造函数\"><a href=\"#默认构造函数\" class=\"headerlink\" title=\"默认构造函数\"></a>默认构造函数</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\tdefault constructor \t没有参数，有参数就不是默认构造函数</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass Y&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tint a;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tY(int a);\t\t//有参数，不是默认构造函数</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;;</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">\tclass B&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tint b;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tB();\t\t//没有参数，是默认</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new与delete\"><a href=\"#new与delete\" class=\"headerlink\" title=\"new与delete\"></a>new与delete</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new------------对应-------------delete</span><br><span class=\"line\">new <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>&gt;</span></span> 申请对应类的空间并返回指向改空间的地址</span><br><span class=\"line\">new <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>&gt;</span></span>[<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">num</span>&gt;</span></span>]------------对应-----------delete [] <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现流程\"><a href=\"#实现流程\" class=\"headerlink\" title=\"实现流程\"></a>实现流程</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">\ta(new) --&gt; b[系统申请一片内存空间]</span><br><span class=\"line\">\tb --&gt; c[调用类对应的构造函数]</span><br><span class=\"line\">\tc --&gt; d(返回该空间的地址)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">\ta(delete) --&gt; b[调用类的析构函数]</span><br><span class=\"line\">\tb --&gt; c(回收内存空间)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拓展：\"><a href=\"#拓展：\" class=\"headerlink\" title=\"拓展：\"></a>拓展：</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c++运行时，会有一个inch table用于记录动态申请空间的变量表，记录申请的大小（单位是byte）和地址（首地址），所以若指向某数组空间的指针++后，调用delete时会报错，因为inch table中只记录了首地址</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> * psome = <span class=\"keyword\">new</span> <span class=\"type\">int</span> [<span class=\"number\">10</span>];\t\t<span class=\"comment\">//new 10个int </span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] psome;\t\t\t<span class=\"comment\">//new时使用了[]，delete时也要用[]，不带[]只会执行第一个对象的析构函数，[]会提示系统，这里要析构多个对象，且会从最后一个对象开始析构</span></span><br><span class=\"line\">注<span class=\"number\">1</span>：无论使不使用[]，空间都会收回，收回空间查inch table就可以知道要收回的大小和起始地址了，能运行但会死循环</span><br><span class=\"line\">注<span class=\"number\">2</span>：<span class=\"keyword\">delete</span>可以<span class=\"keyword\">delete</span> <span class=\"literal\">NULL</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_3](#解密new与delete\t测试1\t不带[]\t\t&#x3D;&#x3D;检验代码_3&#x3D;&#x3D;)</p>\n<p>[参考检验代码_4](#解密new与delete\t测试2\t带[]\t&#x3D;&#x3D;检验代码_4&#x3D;&#x3D;)</p>\n<h2 id=\"基础概念-5——访问控制-amp-amp-初始化列表（成员变量初始化首选，且父类的初始化只能初始化列表，否则父类得有默认构造函数）\"><a href=\"#基础概念-5——访问控制-amp-amp-初始化列表（成员变量初始化首选，且父类的初始化只能初始化列表，否则父类得有默认构造函数）\" class=\"headerlink\" title=\"基础概念_5——访问控制&amp;&amp;初始化列表（成员变量初始化首选，且父类的初始化只能初始化列表，否则父类得有默认构造函数）\"></a>基础概念_5——访问控制&amp;&amp;初始化列表（成员变量初始化首选，且父类的初始化只能初始化列表，否则父类得有默认构造函数）</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 基础知识：</span><br><span class=\"line\"> \tpublic 公共的，任何人都可以访问</span><br><span class=\"line\"> \tprivate 私有的，只有这个类的成员函数可以访问这个类的成员变量或成员函数，子类也不能直接访问，这是对类来说的，如果是同一个类的不同对象则它们之间可以相互访问对方的private 成员变量</span><br><span class=\"line\"> \tprotected 受保护的，只有这个类自己和它的子类可以访问，在其他地方则不能直接使用</span><br><span class=\"line\"> \tfriends\t朋友，声明别的类，别的函数，或者别的类的某个函数是朋友，这样朋友就可以访问该类的private。一般用在运算符重载</span><br><span class=\"line\">注：c++的访问控制只在编译环节存在，运行时其实没有访问控制。运行时对象b也可以访问对象a的私有变量和函数</span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_5](#解密new与delete\t\t\t\t&#x3D;&#x3D;检验代码_5&#x3D;&#x3D;)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">初始化：</span><br><span class=\"line\">类中的成员变量可以在构造函数中实现“初始化”，这样写实际是赋值，并非初始化，当成员变量是一个类，系统会去找该类的默认构造函数，当其没有默认构造函数时，报错。</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> *p;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">A</span>()&#123;p=<span class=\"number\">0</span>;i=<span class=\"number\">0</span>;&#125;\t<span class=\"comment\">//在构造函数中初始化成员变量p和i</span></span><br><span class=\"line\">\t\t~<span class=\"built_in\">A</span>();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">使用初始化列表 格式：\t构造函数(形参):&lt;成员变量<span class=\"number\">1</span>&gt;(初始值<span class=\"number\">1</span>), &lt;成员变量<span class=\"number\">2</span>&gt;(初始值<span class=\"number\">2</span>)&#123;&#125;\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">name</span>(args)[:init-list]&#123;&#125;</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> *p;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">A</span>():<span class=\"built_in\">p</span>(<span class=\"number\">0</span>), <span class=\"built_in\">i</span>(<span class=\"number\">0</span>)&#123;&#125; <span class=\"comment\">//在构造函数:后使用初始化列表，这样写，p和i的初始化会在构造函数之前完成</span></span><br><span class=\"line\">\t\t~<span class=\"built_in\">A</span>();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">注：当初始化</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"friend的使用\"><a href=\"#friend的使用\" class=\"headerlink\" title=\"friend的使用\"></a>friend的使用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注2：前项声明，一种用于通知编译器的方式，告诉编译器，有一个叫X的东西存在，因为Y中使用了X，不这样写会报错</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">X</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Y</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(X*)</span></span>;\t\t<span class=\"comment\">//任何指针的大小都是一样的，且没有用到X内部的成员，因此前项声明可以使用</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">X</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">(X*, <span class=\"type\">int</span>)</span></span>;\t<span class=\"comment\">//函数朋友</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">Y::f</span><span class=\"params\">(X*)</span></span>;\t<span class=\"comment\">//某个类的某个函数朋友，此处为Y类的f函数是X类朋友</span></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Z</span>;\t\t<span class=\"comment\">//类/结构体朋友</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">h</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特别注意\"><a href=\"#特别注意\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实际上在c++中主要拿到对象的地址就可以为所欲为，哪怕成员变量是private一样想改就改</span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_14](#C++ conversion\t\t\t\t&#x3D;&#x3D;检验代码_14&#x3D;&#x3D;)</p>\n<h2 id=\"基础概念-6——组合，继承，软件重用\"><a href=\"#基础概念-6——组合，继承，软件重用\" class=\"headerlink\" title=\"基础概念_6——组合，继承，软件重用\"></a>基础概念_6——组合，继承，软件重用</h2><h3 id=\"类的组合-composition\"><a href=\"#类的组合-composition\" class=\"headerlink\" title=\"类的组合  composition\"></a>类的组合  composition</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将一些已有的类的对象组合在一起拼凑成一个类，称为组合</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\t现在有一个class engine的对象和class tyre的对象，把它们组合在一起，拼凑成一个class car</span></span><br><span class=\"line\"><span class=\"code\">即：</span></span><br><span class=\"line\"><span class=\"code\">\tclass中的成员变量可以是其他的class的对象</span></span><br><span class=\"line\"><span class=\"code\">分类：</span></span><br><span class=\"line\"><span class=\"code\">\tFully:当一个类就是另一个类的一部分时称为fully\t就像肚子里的孩子</span></span><br><span class=\"line\"><span class=\"code\">\tBy reference:当一个类知道另一个类在哪里，能调用其方法，但其并非是它的一部分时称为by reference\t就像已经生出来的孩子</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">在代码中，fully实际就是成员变量是一个类，而by reference是一个类的指针，指向的。</span></span><br><span class=\"line\"><span class=\"code\">\t一般当一个类是另一个类的一部分时用fully形式，当一个类属于另一个类但不是其一部分时用by reference形式</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\t人是一个类，书包是一个类，心脏是一个类，则心脏用fully形式，书包用by reference形式</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;...&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Currency</span>&#123;...&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SavingAccount</span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"built_in\">SavingsAccount</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name, <span class=\"type\">const</span> <span class=\"type\">char</span>* address, <span class=\"type\">int</span> cents); <span class=\"comment\">//构造函数，有参数所以不是默认构造函数</span></span><br><span class=\"line\">    \t~<span class=\"built_in\">SavingAccount</span>();\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;\t\t<span class=\"comment\">//一般成员函数</span></span><br><span class=\"line\">   \t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">    \tPerson m_saver;\t\t<span class=\"comment\">//fully形式的组合</span></span><br><span class=\"line\">    \tCurrency m_balance;\t<span class=\"comment\">//fully形式的组合</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">SavingAccount::<span class=\"built_in\">SavingAccount</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name, <span class=\"type\">const</span> <span class=\"type\">char</span>* address, <span class=\"type\">int</span> cents):<span class=\"built_in\">m_saver</span>(name, address), <span class=\"built_in\">m_balance</span>(<span class=\"number\">0</span>,cents)&#123;&#125;; \t<span class=\"comment\">//SavingAccount的构造函数，需要负责把其fully形式的成员变量初始化，类成员变量也需要，否则系统会去找其类成员变量的默认构造函数</span></span><br><span class=\"line\">SavingAccount::<span class=\"built_in\">print</span>()&#123;</span><br><span class=\"line\">    m_saver.<span class=\"built_in\">print</span>();\t<span class=\"comment\">//对象自己调用自己的print()</span></span><br><span class=\"line\">    m_balance.<span class=\"built_in\">print</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类的继承-inheritance\"><a href=\"#类的继承-inheritance\" class=\"headerlink\" title=\"类的继承 inheritance\"></a>类的继承 inheritance</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用一个现有的类来改造，形成一个新的类</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tstudent继承于person则称student是person的超类，因为student继承于person则person有的student都有，但student还有一些person没有的，所以称student是person的superset，即超集</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">分类：</span><br><span class=\"line\"><span class=\"code\">\tBase\t基类</span></span><br><span class=\"line\"><span class=\"code\">\tSuper\t超类</span></span><br><span class=\"line\"><span class=\"code\">\tParent\t父类</span></span><br><span class=\"line\"><span class=\"code\">\tDerived\t派生类</span></span><br><span class=\"line\"><span class=\"code\">\tSub\t\t次类</span></span><br><span class=\"line\"><span class=\"code\">\tChild\t子类</span></span><br><span class=\"line\"><span class=\"code\">使用方法：class B : public A&#123;&#125;;\t\tB继承于A</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_6](#继承初体验\t\t\t\t&#x3D;&#x3D;检验代码_6&#x3D;&#x3D;)</p>\n<h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\t父类有的成员，子类继承后都会有，但是父类中private的成员子类不能直接用。相当于父辈给子辈留了一笔钱，但钱由信托保管，子辈不能直接使用。编译通不过。</span></span><br><span class=\"line\"><span class=\"code\">注：protected属性的成员则子类可以直接访问，相当于父类留了一些让子类访问父类private成员的接口，但这些接口别人不能使用</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"子类父类构造和析构的顺序\"><a href=\"#子类父类构造和析构的顺序\" class=\"headerlink\" title=\"子类父类构造和析构的顺序\"></a>子类父类构造和析构的顺序</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造</span><br><span class=\"line\"><span class=\"code\">\t先调用父类构造函数，然后调用子类构造函数，</span></span><br><span class=\"line\"><span class=\"code\">注：此时若父类没有默认构造函数，则需要在子类的构造函数中使用初始化列表的方式初始化父类且需要给其传参数，即使用构造函数初始化，而非默认构造函数，不这样的话，若父类无默认初始化构造函数编译时就会报错</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">析构</span><br><span class=\"line\"><span class=\"code\">\t先调用子类的析构函数，再调用父类的析构函数</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_7](#继承再体验\t\t\t\t&#x3D;&#x3D;检验代码_7&#x3D;&#x3D;)</p>\n<h3 id=\"名字隐藏（C-独有）\"><a href=\"#名字隐藏（C-独有）\" class=\"headerlink\" title=\"名字隐藏（C++独有）\"></a>名字隐藏（C++独有）</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\t当父类中有overload的成员函数，且和子类中的成员函数同名时，c++会自动隐藏父类中的那些成员函数，只保留的子类自己的成员函数</span></span><br><span class=\"line\"><span class=\"code\">注1：此时想调用父类的那些函数得用域解析符 ::</span></span><br><span class=\"line\"><span class=\"code\">注2：当子类和父类有同名且同参数的成员函数时，默认使用的是子类的成员函数，如果想要使用父类的则需要使用 域解析符 ::</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;...&#125;;</span></span><br><span class=\"line\"><span class=\"code\">\tclass B : public A &#123;...&#125;;</span></span><br><span class=\"line\"><span class=\"code\">\tB b;</span></span><br><span class=\"line\"><span class=\"code\">\tb.func();\t//使用B中的成员函数func</span></span><br><span class=\"line\"><span class=\"code\">\tb.A::func();//使用A中的成员函数func</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_8](#c++名字隐藏\t\t\t\t&#x3D;&#x3D;检验代码_8&#x3D;&#x3D;)</p>\n<h2 id=\"基础概念-7——函数重载-amp-amp-内联函数\"><a href=\"#基础概念-7——函数重载-amp-amp-内联函数\" class=\"headerlink\" title=\"基础概念_7——函数重载 &amp;&amp;内联函数\"></a>基础概念_7——函数重载 &amp;&amp;内联函数</h2><h3 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重载——overloading</span><br><span class=\"line\"><span class=\"code\">\t指一些函数可以具有相同的函数名，但它们的参数不一样（类型，个数...），调用函数时编译器会根据给出的参数来判断调用的哪一个函数</span></span><br><span class=\"line\"><span class=\"code\">注：返回类型不能作为构成overloading的条件</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">缺省值——default arguments（少用）</span><br><span class=\"line\"><span class=\"code\">\t可以预先给函数的形参赋上值</span></span><br><span class=\"line\"><span class=\"code\">\t写法：</span></span><br><span class=\"line\"><span class=\"code\">\t\tint func(int i, int j, int k=1, int m=2)&#123;&#125;;</span></span><br><span class=\"line\"><span class=\"code\">注1：没有缺省值的形参要放在有缺省值的形参前面</span></span><br><span class=\"line\"><span class=\"code\">注2：如果有多个编译单元，即.cpp文件，记得一起编译，否则会找不到定义</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_9](#C++重载\t\t\t\t&#x3D;&#x3D;检验代码_9&#x3D;&#x3D;)</p>\n<h3 id=\"特别注意：\"><a href=\"#特别注意：\" class=\"headerlink\" title=\"特别注意：\"></a>特别注意：</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">缺省值一般是写在.h文件中，即写在函数声明中，当然函数的声明也可以写在.cpp文件中（这样的话，假如别人的函数实际上是没有缺省值的，但你在自己的.cpp文件中给它加上一个带有缺省值的声明也是可以的，且此时仅自己的.cpp文件中声明生效），且如果没有声明，只有定义也可以直接写在定义中</span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_10](#C++缺省声明探究\t\t\t\t&#x3D;&#x3D;检验代码_10&#x3D;&#x3D;)</p>\n<h3 id=\"内联函数-1\"><a href=\"#内联函数-1\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提出原因：</span><br><span class=\"line\"><span class=\"code\">\t函数调用涉及一系列的压栈出栈操作，在存在同一个函数大量调用时，影响效率，因此提出了内联函数</span></span><br><span class=\"line\"><span class=\"code\">使用方法：</span></span><br><span class=\"line\"><span class=\"code\">\tinline &lt;callback type&gt; &lt;function_name&gt; ()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"code\">原理：</span></span><br><span class=\"line\"><span class=\"code\">\t当编译器检测到inline关键词时会将inline函数的代码嵌入到调用它的地方，且仍保持inline函数的独立性（函数有自己的变量，空间...）</span></span><br><span class=\"line\"><span class=\"code\">与C的#define的不同：</span></span><br><span class=\"line\"><span class=\"code\">\t#define不做类型检查，inline定义的函数会对参数做类型检查</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\t#define f(a) (a) + (a)\t\t//不会检查传来的参数是什么类型</span></span><br><span class=\"line\"><span class=\"code\">\tinline int f(int a)&#123;return a*2;&#125; //会检查传来的参数是否是int类型</span></span><br><span class=\"line\"><span class=\"code\">注：</span></span><br><span class=\"line\"><span class=\"code\">\t当用户定义的inline太过复杂时，编译器可能会拒绝嵌入</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i*<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"built_in\">f</span>(a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际上现在f(a)等价于 a + a，编译器会自己优化成这样</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特别注意：-1\"><a href=\"#特别注意：-1\" class=\"headerlink\" title=\"特别注意：\"></a>特别注意：</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内联函数的要求：</span><br><span class=\"line\"><span class=\"code\">\t当内联函数需要被其他编译单元调用时，需要将内联函数的函数体（即函数实现，定义）放在.h文件中，因为编译器要在调用的地方嵌入内联函数的代码，而编译器同一时间只能处理一个编译单元，所以必须在预处理时将内联代码放入调用其的编译单元内</span></span><br><span class=\"line\"><span class=\"code\">注1：只在本编译单元调用inline函数时，不用写到.h文件中（废话）</span></span><br><span class=\"line\"><span class=\"code\">注2：非常小的函数，编译器自动inline，太大的函数，inline无效，递归函数不要inline。建议只有两三行，且调用次数多的函数使用inline</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_11](#C++其他编译单元调用内联函数\t\t\t\t&#x3D;&#x3D;检验代码_11&#x3D;&#x3D;)</p>\n<h3 id=\"类中的内联函数\"><a href=\"#类中的内联函数\" class=\"headerlink\" title=\"类中的内联函数\"></a>类中的内联函数</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当在类中直接给出成员函数的body时，编译器默认为inline</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::print&quot;</span> &lt;&lt; endl; &#125; \t<span class=\"comment\">//默认为内联函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>;\t\t\t\t\t\t\t\t<span class=\"comment\">//一般成员函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inline_test</span><span class=\"params\">()</span></span>;\t\t\t<span class=\"comment\">//这也是inline型，只是放在类外面</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_i</span><span class=\"params\">(<span class=\"type\">int</span> ii)</span> </span>&#123; i = ii; &#125;\t\t\t\t <span class=\"comment\">// inline型成员函数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">&#125; <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">A::test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; \t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//一般成员函数的body</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;A::test()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">A::inline_test</span><span class=\"params\">()</span>   <span class=\"comment\">//inline型成员函数的body，inline关键字不能省</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;inline A::inline_test()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：这样写，从运行的效果来说，如果inline型的成员变量访问该类的成员变量，实际相当于直接访问成员变量，如a.set<span class=\"emphasis\">_i(10)运行效率等价于a.i=10</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-8——const\"><a href=\"#基础概念-8——const\" class=\"headerlink\" title=\"基础概念_8——const\"></a>基础概念_8——const</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基础知识：</span><br><span class=\"line\"><span class=\"code\">\t被const关键词修饰后，变量不能进行修改和再次赋值，但对于c++来说，const修饰后仍然还是变量，不是常数，仍然遵循一般变量的规则</span></span><br><span class=\"line\"><span class=\"code\">extern关键词可以声明该变量是一个定义在某处的变量</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\textern const int bufsize; //bufsize是某处的一个变量，且在此处是const的</span></span><br><span class=\"line\"><span class=\"code\">const的使用：</span></span><br><span class=\"line\"><span class=\"code\">\t如果该变量用const修饰，且编译前已经知道了其具体值，此时则可以用于给数组确定大小，若编译前不知道值，则编译时报错，因为编译器不知道给该数组分配多大的空间</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tconst int n = 12;</span></span><br><span class=\"line\"><span class=\"code\">\tint array[n];\t\t//可以使用</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">\tint x;cin&gt;&gt;x;</span></span><br><span class=\"line\"><span class=\"code\">\tconst int size = x;</span></span><br><span class=\"line\"><span class=\"code\">\tint array[x];\t//报错，编译器不知道应该分配多大空间给array</span></span><br><span class=\"line\"><span class=\"code\">同理，用extern const int bufsize; 这样也不能用来给数组分配空间，因为编译器不知道bufsize到底有多大</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指针和const\"><a href=\"#指针和const\" class=\"headerlink\" title=\"指针和const\"></a>指针和const</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* <span class=\"type\">const</span> q = <span class=\"string\">&quot;abc&quot;</span>;\t\t<span class=\"comment\">//q这个指针是const的，即其指向的地址不能改变</span></span><br><span class=\"line\">*q = <span class=\"string\">&#x27;c&#x27;</span>;\t<span class=\"comment\">//可以</span></span><br><span class=\"line\">q++;\t\t<span class=\"comment\">//不可以，其实就是指针的内容不能变，但指向的地址的内容可以变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* p = <span class=\"string\">&quot;ABCD&quot;</span>;\t<span class=\"comment\">//q这个指针指向的内容是const的</span></span><br><span class=\"line\">*p = <span class=\"string\">&#x27;b&#x27;</span>;\t<span class=\"comment\">//不可以，报错，即这个内容是不能改变的\t实际是不能通过p指针来修改那个内存单元，而非是那个内存单元不可修改</span></span><br><span class=\"line\">p++;\t<span class=\"comment\">//可以，指针的内容是可以变的</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-总结-x3D-x3D\"><a href=\"#x3D-x3D-总结-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;总结&#x3D;&#x3D;\"></a>&#x3D;&#x3D;总结&#x3D;&#x3D;</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> 在*前时，指针指向的内容是<span class=\"type\">const</span>的，在*后时，指针是<span class=\"type\">const</span>的。</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">&quot;Bob&quot;</span>, <span class=\"number\">200</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> Person* p = &amp;p1;\t<span class=\"comment\">//指针指向的对象为const</span></span><br><span class=\"line\">\tPerson <span class=\"type\">const</span>* p = &amp;p1;\t<span class=\"comment\">//指针指向的对象为const</span></span><br><span class=\"line\">\tPerson *<span class=\"type\">const</span> p = &amp;p1;\t<span class=\"comment\">//指针为const</span></span><br><span class=\"line\">注<span class=\"number\">1</span>：当指向的对象为<span class=\"type\">const</span>时，并非说对象不可修改，而是指不能被这个指针所修改</span><br><span class=\"line\">    <span class=\"comment\">//一般用在，如要传一个对象给其他人，但直接传对象太麻烦了，要拷贝...，传指针快还方便，但害怕别人用传过去的指针修改对象，所以可以传const指针，这样就不能通过该指针修改了</span></span><br><span class=\"line\">    </span><br><span class=\"line\">注<span class=\"number\">2</span>：用指针指向写死的字符串时默认是<span class=\"type\">const</span>\t如： <span class=\"type\">char</span> *s = <span class=\"string\">&quot;hello world&quot;</span>;这字符串是会放到代码段中，然后s指向其，编译器默认其为<span class=\"type\">const</span></span><br><span class=\"line\"><span class=\"comment\">//但char s[] = &quot;hello world&quot;;则可以，因为系统会把代码段中的&quot;hello world&quot;拷贝到堆栈中的s数组中</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_12](#C++ const运用\t\t\t\t&#x3D;&#x3D;检验代码_12&#x3D;&#x3D;)</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在函数后面加上const，一般出现在类中，意味着该函数不能修改该类的成员变量的值</span><br><span class=\"line\">注：此时该函数声明和定义的地方都得加上const</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;</span></span><br><span class=\"line\"><span class=\"code\">\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\tA();</span></span><br><span class=\"line\"><span class=\"code\">\t\t~A();</span></span><br><span class=\"line\"><span class=\"code\">\t\tvoid test_func() const;\t\t//声明一个带有const关键字的成员函数</span></span><br><span class=\"line\"><span class=\"code\">\tprivate:</span></span><br><span class=\"line\"><span class=\"code\">\t\tint i;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;;</span></span><br><span class=\"line\"><span class=\"code\">\tvoid A::test_func() const&#123;\t//带有const关键字的成员函数的定义</span></span><br><span class=\"line\"><span class=\"code\">\t\ti++;\t//报错，const类型的成员函数无法修改成员变量的值</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">注1：实现原理实际上是编译器把this改成了带const关键字的this，所以该函数通过this无法修改成员变量，因为const &lt;pointer_type&gt;* p，p所指内容无法通过p修改</span></span><br><span class=\"line\"><span class=\"code\">注2：如果在一个对象前面加上const则该对象就没法被修改了</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tconst A a;\t//a的成员变量无法被修改，这样做没有意义</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用const来实现重载\"><a href=\"#使用const来实现重载\" class=\"headerlink\" title=\"使用const来实现重载\"></a>使用const来实现重载</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实际上就是默认参数this带了const关键字，所以可以重载</span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_13](#C++ const运用_2\t\t\t\t&#x3D;&#x3D;检验代码_13&#x3D;&#x3D;)</p>\n<h3 id=\"特别注意-1\"><a href=\"#特别注意-1\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当对象带有const关键字时，要求将其所有成员变量在对象在初始化时都初始化（写在构造函数里面初始化和使用初始化列表初始化都可）。并且，如果要调用某个成员函数则该成员函数必须得有带const关键字的重载</span><br><span class=\"line\"><span class=\"code\">\t实际上是因为当一对象带有const关键字时，其调用成员函数时，它传递的this是带有const关键字。因此当其调用某一成员函数，且该成员函数没有带const的重载时，相当于找不到对应函数</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">当对象有的成员变量是带有const关键字时，则这些成员变量需要在构造函数中初始化，且只能使用初始化列表初始化（只要成员变量带了const关键字，都必须使用初始化列表初始化）</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-9——引用reference\"><a href=\"#基础概念-9——引用reference\" class=\"headerlink\" title=\"基础概念_9——引用\treference\"></a>基础概念_9——引用\treference</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引用相当于给一个东西又取了一个名字</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tchar c;</span></span><br><span class=\"line\"><span class=\"code\">\tchar&amp; r = c;\t//即c和r是同一个字符的两个不同的名字</span></span><br><span class=\"line\"><span class=\"code\">使用方法：</span></span><br><span class=\"line\"><span class=\"code\">\t一般情况：</span></span><br><span class=\"line\"><span class=\"code\">\t\ttype&amp; refname = name;</span></span><br><span class=\"line\"><span class=\"code\">\t\t类型&amp; 引用的名字 = 被引用的目标;</span></span><br><span class=\"line\"><span class=\"code\">\t参数表或成员变量时：</span></span><br><span class=\"line\"><span class=\"code\">\t\ttype&amp; refname</span></span><br><span class=\"line\"><span class=\"code\">注1：引用在定义时必须初始化，且让其初始化的东西必须是在内存空间有地址的</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tint&amp; z = i*3;\t//报错，因为i*3只有结果，但结果没有储存在内存中</span></span><br><span class=\"line\"><span class=\"code\">和const搭配</span></span><br><span class=\"line\"><span class=\"code\">\tconst int&amp; z = x;\t//z是x的引用但不能通过z去修改x的值 即z是read-only reference</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注2：&amp;也可以用在函数上</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tint&amp; func(); \t//即最后func函数返回的是一个int类型的引用</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注3：&amp;不能当作overload的参考，即如果想重载，但两个函数只有&amp;的区别，则报错</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tvoid func(int&amp; a);</span></span><br><span class=\"line\"><span class=\"code\">\tvoid func(int a);</span></span><br><span class=\"line\"><span class=\"code\">\tint x = 2;</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(x);\t//报错，因为编译器不知道到底要找哪一个func函数</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注4：</span><br><span class=\"line\"><span class=\"code\">\t实际上，reference的实现就是靠的const point，只是为了少一些*所以提出了reference，且一旦实现了引用就没办法去看这个引用自己的地址了，以后对其的操作都是在对其引用对象操作</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特别注意-2\"><a href=\"#特别注意-2\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">references和pointres的区别:</span><br><span class=\"line\"><span class=\"code\">\tref不能是null，point可以是</span></span><br><span class=\"line\"><span class=\"code\">\tref依赖于一个已经存在的变量，point则是独立于其他变量</span></span><br><span class=\"line\"><span class=\"code\">\tref一旦初始化后，就不能再改变引用对象，point可以改变指向对象</span></span><br><span class=\"line\"><span class=\"code\">\tref不能引用ref，point可以指向另外的point</span></span><br><span class=\"line\"><span class=\"code\">重点：</span></span><br><span class=\"line\"><span class=\"code\">   \t有指针的引用，但没有引用的指针，就近原则，*离p近，p就是指针。&amp;离p近，p就是引用</span></span><br><span class=\"line\"><span class=\"code\">   \t即：</span></span><br><span class=\"line\"><span class=\"code\">   \t\tint&amp;* p;\t //报错，这里的意思是*p的类型是int ref的，即这个指针是int ref类型，出现了引用的指针</span></span><br><span class=\"line\"><span class=\"code\">   \t\tvoid func(int*&amp; p);\t //可以，这里指p是ref，它引用的变量是int ref类型的，即指针的引用</span></span><br><span class=\"line\"><span class=\"code\">  \t没有引用类型的数组，因为ref时间根本就不是实体，因此不能有数组</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-10——转换-conversion，造型-amp-amp-多态性-amp-amp-覆写-overriding\"><a href=\"#基础概念-10——转换-conversion，造型-amp-amp-多态性-amp-amp-覆写-overriding\" class=\"headerlink\" title=\"基础概念_10——转换 conversion，造型 &amp;&amp; 多态性  &amp;&amp; 覆写 overriding\"></a>基础概念_10——转换 conversion，造型 &amp;&amp; 多态性  &amp;&amp; 覆写 overriding</h2><h3 id=\"转换-amp-amp-造型\"><a href=\"#转换-amp-amp-造型\" class=\"headerlink\" title=\"转换&amp;&amp;造型\"></a>转换&amp;&amp;造型</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果B类继承于A类，则主要是A可以使用的地方，B都可以使用。即子类的对象都可以当父类对象看待这叫upcast，向上造型</span><br><span class=\"line\">把父类当子类看待叫downcast，有风险报错</span><br><span class=\"line\">cast 造型和类型转换有区别</span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_14](#C++ conversion\t\t\t\t&#x3D;&#x3D;检验代码_14&#x3D;&#x3D;)</p>\n<h3 id=\"多态-polymorphism\"><a href=\"#多态-polymorphism\" class=\"headerlink\" title=\"多态  polymorphism\"></a>多态  polymorphism</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtual关键字：</span><br><span class=\"line\"><span class=\"code\">\t成员函数前带有virtual意味着，如果该类的子类中重新写的该成员函数，则子类的那个成员函数和父类的成员函数有关系，且只要继承树中有一个祖先的函数带了virtual，其子子孙孙的那个同名函数都会默认带上virtual不管用户自己写不写上virtual。一般都写上方便看</span></span><br><span class=\"line\"><span class=\"code\">多态的实现：</span></span><br><span class=\"line\"><span class=\"code\">\tupcast，向上造型，把子类对象当父类对象看待</span></span><br><span class=\"line\"><span class=\"code\">\tDynamic binding，动态绑定，运行时才知道到底调用的哪个函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子-2\"><a href=\"#例子-2\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">render</span><span class=\"params\">(Shape* p)</span></span>&#123;</span><br><span class=\"line\">    p-&gt;<span class=\"built_in\">render</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//即这个p-&gt;render函数实际调用的是哪个render函数要得到运行时，传的哪个shape或shape类的子类的对象才知道，它会去调用该对象对应的render，这就叫多态，这里p就是多态的</span></span><br><span class=\"line\"><span class=\"comment\">//这里只要是shape或其子类都可以作为参数传进来</span></span><br><span class=\"line\"><span class=\"comment\">//而virtual的意思就是告诉编译器，不要把后面的render函数写死了，实际调用的哪一个render得看运行时是那个对象</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"x3D-x3D-特别注意-x3D-x3D\"><a href=\"#x3D-x3D-特别注意-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意&#x3D;&#x3D;</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注1：</span><br><span class=\"line\"><span class=\"code\">\t任意一个类只要有带有virtual的成员函数则其大小就要比正常的类大且此时编译器会在实例化对象时给对象加上一个隐藏的成员变量vtpr指针，该指针指向这个类的vtable表，所有同一个类的实例化对象都指向同一个表，表中就是该类的各个虚函数的地址。而多态就是把子类的vtable中的虚函数地址换成了子类自己实现的那个虚函数的地址，如果子类没有自己声明那个虚函数则默认填上父类的那个虚函数的地址</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_15](#C++ virtual关键字\t\t\t\t检验代码_15)</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注2：</span><br><span class=\"line\"><span class=\"code\">\t通过赋值将子类对象赋值即 = 给父类对象，则父类的对象的vtpr仍不变。但可以通过指针来强行改变对象的vtpr指向。如果是通过指向子类对象的指针赋值给指向父类的指针，则实际是指针指向变了，俩对象都没变化</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_16](#C++ 魔改vtpr\t\t\t\t&#x3D;&#x3D;检验代码_16&#x3D;&#x3D;)</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注3：</span><br><span class=\"line\"><span class=\"code\">\t析构函数一般要用virtual格式，因为当把一个子类对象传给一个父类指针时，若delete该指针，当析构函数不是虚函数时，调用的就是父类的析构函数去析构的子类对象（静态绑定编译器直接把对应函数地址写死在那），只有当析构函数是虚函数时，才调用的是子类的析构函数（动态绑定编译器搞出个vtpr，用的时候去找vtable看用哪个函数）</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"覆写\"><a href=\"#覆写\" class=\"headerlink\" title=\"覆写\"></a>覆写</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当子类覆写父类的成员函数后，又想使用父类的成员函数时要用 域解析符 ::</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tvirtual void f();</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tclass B : public A&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tvirtual void f()&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t\tA::f();</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_17](#C++ 覆写\t\t\t\t&#x3D;&#x3D;检验代码_17&#x3D;&#x3D;)</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：</span><br><span class=\"line\"><span class=\"code\">\t当父类中的某成员函数即有重载（overload）又有覆写（override），则子类必须覆写所有的重载，否则会发送name hidden（函数隐藏）</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">重载和覆盖（覆写）的区别：</span><br><span class=\"line\"><span class=\"code\">\t虚函数是基类希望派生类重新定义的函数，派生类重新定义基类虚函数的做法叫做覆盖；重载就在允许在相同作用域中存在多个同名的函数，这些函数的参数表不同。重载的概念不属于面向对象编程，编译器根据函数不同的形参表对同名函数的名称做修饰，然后这些同名函数就成了不同的函数。重载的确定是在编译时确定，是静态的；虚函数则是在运行时动态确定。</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-11——引用再体验\"><a href=\"#基础概念-11——引用再体验\" class=\"headerlink\" title=\"基础概念_11——引用再体验\"></a>基础概念_11——引用再体验</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注1：</span><br><span class=\"line\"><span class=\"code\">\t当类中的成员变量是引用类型时，必须使用初始化列表来初始化该成员变量</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tprivate:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tint&amp; i;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tX(int&amp; a);</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tX::X(int&amp; a) : i(a) &#123;&#125;\t\t//初始化列表也可以写在类外面</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-特别注意-x3D-x3D-1\"><a href=\"#x3D-x3D-特别注意-x3D-x3D-1\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意&#x3D;&#x3D;</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\t当函数要返回一个ref（引用）时，更倾向于返回一个非本地变量（因为离开该函数，本地变量就不存在了），然后就出现了，一个函数的返回值做了赋值符号的左值</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(3) = 21;</span></span><br><span class=\"line\"><span class=\"code\">注：</span></span><br><span class=\"line\"><span class=\"code\">\t当函数的形参是ref类型时，向函数传递temporary value（就是那些在内存空间没有储存的地址的值，如23，i*2这种实际上是系统用一个const int型的匿名变量来接值，若非要用一个参数是const int&amp; 的函数来接也是可以实现的😂）</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_18](#C++ 引用再体验\t\t\t\t&#x3D;&#x3D;检验代码_18&#x3D;&#x3D;)</p>\n<p>[参考检验代码_19](#C++ 匿名变量\t\t\t\t&#x3D;&#x3D;检验代码_19&#x3D;&#x3D;)</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结论：</span><br><span class=\"line\"><span class=\"code\">\t在给一些函数传递对象时的方法</span></span><br><span class=\"line\"><span class=\"code\">A a;\t\t\t//a是A类的对象</span></span><br><span class=\"line\"><span class=\"code\">法1：</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(A x);\t//func函数的形参格式</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(a);\t//直接传对象，系统会再拷贝一次对象a，占空间，耗时长</span></span><br><span class=\"line\"><span class=\"code\">法2：</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(A* x);</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(&amp;a);\t//传a的地址，不安全，func可以通过x指针修改a中成员变量</span></span><br><span class=\"line\"><span class=\"code\">法3：</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(const A* x);\t</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(&amp;a);\t//传a的地址，且不能通过x指针修改a中的成员变量</span></span><br><span class=\"line\"><span class=\"code\">法4：通法</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(const A&amp; x);</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(a);\t//同上，只是不用在func函数中写很多的*，因为指针要使用时得用*来表示该操作是对指向空间的操作</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意区分函数返回的是值还是变量</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;...&#125;;</span></span><br><span class=\"line\"><span class=\"code\">\tA func()&#123;\t//这个返回的是一个变量，返回值可以作 = 的左值，但是作完左值后，就没办法控制这个变量了，它相当于消失了</span></span><br><span class=\"line\"><span class=\"code\">\t\tA a;</span></span><br><span class=\"line\"><span class=\"code\">\t\treturn a;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tint func()&#123;\t\t//这个返回的是一个值 10，返回值不可以作 = 的左值</span></span><br><span class=\"line\"><span class=\"code\">\t\tint i = 10;</span></span><br><span class=\"line\"><span class=\"code\">\t\treturn 10;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-12——拷贝构造\"><a href=\"#基础概念-12——拷贝构造\" class=\"headerlink\" title=\"基础概念_12——拷贝构造\"></a>基础概念_12——拷贝构造</h2><h3 id=\"x3D-x3D-特别注意-x3D-x3D-2\"><a href=\"#x3D-x3D-特别注意-x3D-x3D-2\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意&#x3D;&#x3D;</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">初始化initialization和赋值assignment的区别</span><br><span class=\"line\"><span class=\"code\">\tint i = 10;\t\t//初始化且赋值，初始化只能有一次</span></span><br><span class=\"line\"><span class=\"code\">\ti = 12;\t\t\t//赋值，赋值可以有多次</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注1：c++中既可以使用 = 来初始化对象，又可以使用 () 来初始化，使用 = 时需要存在一个构造函数的参数是 = 的右值</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tclass A &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tA();</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tA(int i);</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tA a; //调用A()构造函数</span></span><br><span class=\"line\"><span class=\"code\">\tA a = 10; //调用A(int i)构造函数</span></span><br><span class=\"line\"><span class=\"code\">\tA a(10); //等价于上一句</span></span><br><span class=\"line\"><span class=\"code\">注2：</span></span><br><span class=\"line\"><span class=\"code\">\t当初始化时使用另外一个同一个类的对象来初始化一个对象，这就叫拷贝构造</span></span><br><span class=\"line\"><span class=\"code\">拷贝构造函数，自己不定义时，编译器会自动给出（默认拷贝每一个成员变量，如果有另外的类的对象，则会用对应的那个类的拷贝构造来拷贝这个成员变量，这是成员对成员的拷贝，即有成员变量是类的对象时是通过拷贝构造函数来拷贝的，不是字节对字节的拷贝），格式就是构造函数只是参数是这类的对象的const 引用</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass A &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tA();\t//默认构造函数</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tA(const A&amp; );\t//拷贝构造函数，&amp; 不能省，不然编译器会告诉你，你写错了🤣，因为不写&amp;就会反复发生拷贝构造还没法跳出循环</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tA(int i);\t//自定义构造函数</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tA a; //调用A()构造函数</span></span><br><span class=\"line\"><span class=\"code\">\tA a = 10; //调用A(int i)构造函数</span></span><br><span class=\"line\"><span class=\"code\">\tA a(10); //等价于上一句 </span></span><br><span class=\"line\"><span class=\"code\">注3：当类中的成员变量有指针时，拷贝构造函数默认会把拷贝出来的对象的那个指针成员变量指向，被拷贝的对象的那个对应的指针指向的内存空间</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">拷贝构造发生在用一个对象去初始化的另一个对象时，有显然情景和隐藏情景</span><br><span class=\"line\">显然情景：</span><br><span class=\"line\"><span class=\"code\">\tA a;</span></span><br><span class=\"line\"><span class=\"code\">\tA b = a;\t\t//显然用一个对象去初始化另一个对象</span></span><br><span class=\"line\"><span class=\"code\">\tA b(a);\t\t//等价于上一条语句，只是写的方式不一样</span></span><br><span class=\"line\"><span class=\"code\">隐藏情景——1：</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(A b);</span></span><br><span class=\"line\"><span class=\"code\">\tA a;</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(a);\t//在函数调用传递参数时发生拷贝构造</span></span><br><span class=\"line\"><span class=\"code\">隐藏情景——2：</span></span><br><span class=\"line\"><span class=\"code\">\tA func(...);</span></span><br><span class=\"line\"><span class=\"code\">\tA a = func(...);\t//在函数返回时发生拷贝构造</span></span><br><span class=\"line\"><span class=\"code\">注：</span></span><br><span class=\"line\"><span class=\"code\">\t把拷贝构造函数放在private下面，可以让别人没法用该类的对象来构造另一个对象，不能拿来直接当函数参数传递</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-13——静态-Static\"><a href=\"#基础概念-13——静态-Static\" class=\"headerlink\" title=\"基础概念_13——静态 Static\"></a>基础概念_13——静态 Static</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static——c：</span><br><span class=\"line\"><span class=\"code\">\t一个全局变量是static的指该变量只在那个.c文件中有效</span></span><br><span class=\"line\"><span class=\"code\">\t一个本地变量是static的指该本地变量具有持久储存（离开这个函数，进入其他函数，该变量依然存在不会被销毁，实际上一个本地变量加上static后就是全局变量）</span></span><br><span class=\"line\"><span class=\"code\">\t一个函数是static的指该函数只能在那个.c文件中被访问</span></span><br><span class=\"line\"><span class=\"code\">static——c++：</span></span><br><span class=\"line\"><span class=\"code\">\t带static关键字的本地变量，意味着该变量持久储存，但只能在该函数内部访问</span></span><br><span class=\"line\"><span class=\"code\">\t带static关键字的成员变量，意味着该变量可以被该类所有的对象访问，即被所有实例共享，但该变量只会初始化一次</span></span><br><span class=\"line\"><span class=\"code\">\t带static关键字的成员函数，意味着该函数可以被该类所有的对象使用，即被所有的实例共享，但该函数只能访问带有static关键字的成员变量</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">全局变量的构造函数在程序运行时，main函数执行前执行。它的析构函数在程序结束后main函数结束时调用</span><br><span class=\"line\">注：</span><br><span class=\"line\"><span class=\"code\">\tc++多个文件中全局变量的初始化是没有固定顺序的，所以当全局变量之前相互有依赖关系时，要么把有依赖的全局变量全写在用一个文件中，要么别这样写</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"static-成员变量（实际上就是把那个变量搞成了全局变量，且声明其是某个类的全局变量）\"><a href=\"#static-成员变量（实际上就是把那个变量搞成了全局变量，且声明其是某个类的全局变量）\" class=\"headerlink\" title=\"static 成员变量（实际上就是把那个变量搞成了全局变量，且声明其是某个类的全局变量）\"></a>static 成员变量（实际上就是把那个变量搞成了全局变量，且声明其是某个类的全局变量）</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：</span><br><span class=\"line\"><span class=\"code\">\t直接写static int i;这是声明，不是定义，编译能过，但链接过不了，这语句类似于extern int i;即告诉编译器有一个i存在，但在哪并没有说</span></span><br><span class=\"line\"><span class=\"code\">实际使用需在某处给出static成员变量的定义</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;</span></span><br><span class=\"line\"><span class=\"code\">\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\tA();</span></span><br><span class=\"line\"><span class=\"code\">\t\tvirtual ~A();</span></span><br><span class=\"line\"><span class=\"code\">\t\tA(const A&amp; );</span></span><br><span class=\"line\"><span class=\"code\">\tprivate:</span></span><br><span class=\"line\"><span class=\"code\">\t\tstatic int i;\t//A类中带有static关键字的i的声明</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tint A::i;\t//i的定义，没有这句，链接报错，提示找不到i，这句就是正常的定义，除了多了个类名和域解析符，也写成 int A::i = 123;都可以</span></span><br><span class=\"line\"><span class=\"code\">带static关键字的成员变量，是类的所有对象共享的，且怎能在它定义处初始化，不能用初始化列表来初始化</span></span><br><span class=\"line\"><span class=\"code\">注：如果成员变量带有static关键字则哪怕没有实例化任何该类的对象，仍然可以通过&lt;class_name&gt;::&lt;var_name&gt;();来使用该成员变量</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_20](#C++ 静态成员变量\t\t\t\t&#x3D;&#x3D;检验代码_20&#x3D;&#x3D;)</p>\n<h3 id=\"static成员函数\"><a href=\"#static成员函数\" class=\"headerlink\" title=\"static成员函数\"></a>static成员函数</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果成员函数带有static关键字则哪怕没有实例化任何该类的对象，仍然可以通过<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class_name</span>&gt;</span></span>::<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">func_name</span>&gt;</span></span>();调用该成员函数</span><br><span class=\"line\"></span><br><span class=\"line\">注：静态的成员函数只能访问静态的成员变量，连this这个隐藏变量都不能使用（也就是说静态成员函数没有隐藏变量this），因为你甚至可以不实例化对象来调用它，要是它能访问this岂不是找了个寂寞🙌</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-13——运算符重载\"><a href=\"#基础概念-13——运算符重载\" class=\"headerlink\" title=\"基础概念_13——运算符重载\"></a>基础概念_13——运算符重载</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c++中能够被重载的运算符：</span><br><span class=\"line\"><span class=\"bullet\">\t+</span> - * / % ^ &amp; | ~</span><br><span class=\"line\"><span class=\"code\">\t= &lt; &gt; += -= *= /= %= ^= &amp;= |=</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;&lt; &gt;&gt; &gt;&gt;= &lt;&lt;= == != &lt;= &gt;= ! &amp;&amp; || ++ --</span></span><br><span class=\"line\"><span class=\"code\">\t, -&gt;* -&gt; () []</span></span><br><span class=\"line\"><span class=\"code\">\toperator new\toperator delete\t\t//你没看错，new和delete都能重载😮</span></span><br><span class=\"line\"><span class=\"code\">\toperator new[]\toperator delete[]</span></span><br><span class=\"line\"><span class=\"code\">c++中不能重载的运算符：</span></span><br><span class=\"line\"><span class=\"code\">\t.\t.*\t::\t?:</span></span><br><span class=\"line\"><span class=\"code\">\tsizeof\ttypeid</span></span><br><span class=\"line\"><span class=\"code\">\tstatic_cast\tdynamic_cast const_cast reinterpret_cast</span></span><br><span class=\"line\"><span class=\"code\">注1：运算符重载只针对已有的运算符，你不能自己搞一个颜文字来重载。运算符重载只是针对自己定义的类或者其他什么自定义数据类型（枚举...）</span></span><br><span class=\"line\"><span class=\"code\">注2：不能重载基础的数据类型的运算符，什么int的加法重载成减法那是不行的</span></span><br><span class=\"line\"><span class=\"code\">注3：不能重载操作数个数，即不能把二目运算符改成三目运算符，还不能改运算的优先级</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运算符重载实际上就是为那个运算符写一个特别的函数，该函数前面要使用operator关键字</span><br><span class=\"line\">该函数可以作为某个类的成员函数</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tconst String String::operator +(const String&amp; that);</span></span><br><span class=\"line\"><span class=\"code\">该函数返回一个带const关键字的String类的对象，需要一个String对象参数（+ 需要两个算子，但String是一个类，所以当其对象使用自己所属类的成员函数时，自带一个this，因此只需要一个参数就可以了）</span></span><br><span class=\"line\"><span class=\"code\">该函数也可以作为全局函数</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tconst String operator +(const String&amp; r, const String&amp; l);</span></span><br><span class=\"line\"><span class=\"code\">参数列表中用的带const关键字的引用是为了防止在该函数内部对对象的成员变量进行修改（加法是不会修改两算子的值），因为这不是某个类的成员函数，所有需要两个算子</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注：这里返回值也带const的原因是因为防止出现返回结果作左值的情况</span><br><span class=\"line\">如：出现</span><br><span class=\"line\"><span class=\"code\">\ta + b = 6;\t这种操作，编译通不过</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-特别注意-x3D-x3D-3\"><a href=\"#x3D-x3D-特别注意-x3D-x3D-3\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意&#x3D;&#x3D;</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在c++中运算符的左边算子称为receiver，编译器通过左边算子来确定，这个运算符应该用哪个重载的函数</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"function\">Integer <span class=\"title\">x</span><span class=\"params\">(<span class=\"number\">1</span>)</span>, <span class=\"title\">y</span><span class=\"params\">(<span class=\"number\">5</span>)</span>, z</span>;\t<span class=\"comment\">//初始化x, y, z（为赋值）</span></span><br><span class=\"line\">\tx + y;\t<span class=\"comment\">//实际等价于x.operator+(y)，receiver是x</span></span><br><span class=\"line\">\tz = x + y;\t<span class=\"comment\">//使用的是Interger的 + ，receiver是x</span></span><br><span class=\"line\">\tz = x + <span class=\"number\">3</span>;\t<span class=\"comment\">//使用的是Interger的 + ，receiver是x，且3会被先构造成一个你匿名的Interger的对象（Interger有一个参数为int的构造函数）</span></span><br><span class=\"line\">\tz = <span class=\"number\">3</span> + y; \t<span class=\"comment\">//用的是int的+，receiver是3，此时需要int有一个通过Integer构造int的构造函数，否则报错，编译不过</span></span><br><span class=\"line\"></span><br><span class=\"line\">一目运算符</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Integer</span>&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"type\">const</span> Integer <span class=\"keyword\">operator</span>-() <span class=\"type\">const</span>&#123;\t<span class=\"comment\">//只需要一个算子的运算符，作为成员函数时不需要参数，因为默认有个this，函数返回值带const是为了防止返回结果作左值，函数带const是为了不修改作运算的对象的值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">Integer</span>(-i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">z = -x;\t<span class=\"comment\">//等价于z.operator=(x.operator-());</span></span><br><span class=\"line\"></span><br><span class=\"line\">注：一目运算符使用全局函数重载时，一般要在操作的类中使用关键字<span class=\"keyword\">friend</span>声明</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">Integer</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">friend</span> <span class=\"type\">const</span> Integer <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Integer&amp; lhs, <span class=\"type\">const</span> Integer&amp; rhs);\t<span class=\"comment\">//声明这个函数是friend，其可以访问Integer类的成员变量（private的成员变量也可以访问）</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">const</span> Integer <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Integer&amp; lhs, <span class=\"type\">const</span> Integer&amp; rhs)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Integer</span>(lhs.i + rhs.i);</span><br><span class=\"line\">\t&#125;\t<span class=\"comment\">//重载 + 的函数的body，返回值加const防止返回结果作左值，形参加const防止修改算子的值</span></span><br><span class=\"line\">\tz = x + y;\t<span class=\"comment\">//可以，完全符合这个全局重载函数的参数列表</span></span><br><span class=\"line\">\tz = x + <span class=\"number\">3</span>;\t<span class=\"comment\">//可以，receiver是x，Integer类有一个自己的运算符重载函数，会先把3构造成一个匿名的Integer对象，在调用全局重载函数</span></span><br><span class=\"line\">\tz = <span class=\"number\">3</span> + x;\t<span class=\"comment\">//可以，会默认把3构造成一个匿名的Integer对象，再调用这个全局重载函数</span></span><br><span class=\"line\">\tz = <span class=\"number\">3</span> + <span class=\"number\">7</span>;\t<span class=\"comment\">//可以，receiver是3，调用int::operator+()把结果10返回来后用构造函数构造成一个Integer之后在赋值给z</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关于是否把对一个类的运算符重载函数做成成员函数：</span><br><span class=\"line\"><span class=\"bullet\">1.</span>\t单目运算符重载应该做成成员函数</span><br><span class=\"line\"><span class=\"bullet\">2.</span>\t= () [] -&gt; -&gt;* 这几个必须做成成员函数</span><br><span class=\"line\"><span class=\"bullet\">3.</span>\t其他的所有二目运算符做成非成员函数（使用friend关键字在类中声明）</span><br><span class=\"line\"></span><br><span class=\"line\">关于运算符重载函数的参数设置：</span><br><span class=\"line\"><span class=\"bullet\">1.</span>\t如果该运算符不会修改算子，则形参要用const修饰，如：+ - =</span><br><span class=\"line\"><span class=\"bullet\">2.</span>\t如果该运算符要修改算子，则形参不能有const修饰，如：++ -- </span><br><span class=\"line\"><span class=\"bullet\">3.</span>\t如果运算结果不能作左值，则函数需要用const修饰，如：+ -</span><br><span class=\"line\"><span class=\"bullet\">4.</span>\t如果运算结果可以作左值，则函数不要用const修饰，如：[]</span><br><span class=\"line\"><span class=\"bullet\">5.</span>\t如果是类成员函数，且运算结果是会修改该类对象，则该函数不能用const来修饰</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常见的运算符原型\"><a href=\"#常见的运算符原型\" class=\"headerlink\" title=\"常见的运算符原型\"></a>常见的运算符原型</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>\t+-*/%&amp;|~</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">const</span> T <span class=\"title\">operatorX</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; i, <span class=\"type\">const</span> T&amp;r)</span><span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"number\">2.</span>\t! &amp;&amp; || &lt; &lt;= == &gt;= &gt;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> <span class=\"built_in\">operatorX</span>(<span class=\"type\">const</span> T&amp;i, <span class=\"type\">const</span> T&amp;r)<span class=\"type\">const</span>;</span><br><span class=\"line\"><span class=\"number\">3.</span>\t[]</span><br><span class=\"line\">\tT&amp; T::<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> index);</span><br><span class=\"line\"><span class=\"number\">4.</span>\t++</span><br><span class=\"line\">prefix ++（++在算子前）：</span><br><span class=\"line\">    <span class=\"type\">const</span> T&amp; <span class=\"keyword\">operator</span>++();\t<span class=\"comment\">//返回的是加完后的结果，如：++a，返回的是a加完后的结果</span></span><br><span class=\"line\">定义的例子(具体怎么实现得看具体对象)：</span><br><span class=\"line\"><span class=\"type\">const</span> Integer&amp; Integer::<span class=\"keyword\">operator</span>++()&#123;\t<span class=\"comment\">//这里函数返回值带ref更方便，要是直接返回一个对象则会发生拷贝构造</span></span><br><span class=\"line\">    *<span class=\"keyword\">this</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">postifx ++（++在算子后）:</span><br><span class=\"line\">\t<span class=\"type\">const</span> T <span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>); <span class=\"comment\">//返回的是加完前的结果，如：a++，返回的是a加完前的a</span></span><br><span class=\"line\">定义的例子：</span><br><span class=\"line\"><span class=\"type\">const</span> Integer Integer::<span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>)&#123;\t<span class=\"comment\">//这里函数返回值没有带ref是因为不能返回一个本地变量的ref，因为离开了这个函数，本地变量就不存在了</span></span><br><span class=\"line\">    <span class=\"function\">Integer <span class=\"title\">old</span><span class=\"params\">(*<span class=\"keyword\">this</span>)</span></span>;\t<span class=\"comment\">//拷贝构造</span></span><br><span class=\"line\">    ++(*<span class=\"keyword\">this</span>);\t\t<span class=\"comment\">//调用上面的prefix ++函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> old;\t\t<span class=\"comment\">//返回一个对象，在发生一次拷贝构造</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">5.</span>\t--</span><br><span class=\"line\">道理同++</span><br><span class=\"line\">\t<span class=\"type\">const</span> T&amp; <span class=\"keyword\">operator</span>--();</span><br><span class=\"line\">\t<span class=\"type\">const</span> T&amp; <span class=\"keyword\">operator</span>--(<span class=\"type\">int</span>);</span><br><span class=\"line\">注：++和--中prefix和postfix参数不一样是为了做重载，编译时，调用postfix函数编译器会自动给一个 <span class=\"number\">0</span> 作为参数</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">6.</span> [] index运算符</span><br><span class=\"line\">    返回的是成员的引用，因为可以用来作左值</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"奇淫巧计\"><a href=\"#奇淫巧计\" class=\"headerlink\" title=\"奇淫巧计\"></a>奇淫巧计</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于关系运算符：&gt; &lt; &gt;= &lt;= == !=\t只需要定义&lt;和==即可，其他的都可以通过这俩来推出</span><br><span class=\"line\">如：</span><br><span class=\"line\">bool Integer::operator==( const Integer&amp; rhs) const &#123;</span><br><span class=\"line\"><span class=\"code\">\treturn i == rhs.i;\t\t\t//定义了 ==</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">bool Integer::operator!=( const Integer&amp; rhs) const &#123;</span></span><br><span class=\"line\"><span class=\"code\">\treturn !(*this == rhs);\t\t//调用了 == </span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">bool Integer::operator&lt;( const Integer&amp; rhs) const &#123;</span></span><br><span class=\"line\"><span class=\"code\">\treturn i &lt; rhs.i;\t\t\t//定义了 &lt;</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">bool Integer::operator&gt;( const Integer&amp; rhs) const &#123;</span></span><br><span class=\"line\"><span class=\"code\">\treturn rhs &lt; *this;\t//调用了 &lt;</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">bool Integer::operator&lt;=( const Integer&amp; rhs) const &#123;</span></span><br><span class=\"line\"><span class=\"code\">\treturn !(rhs &lt; *this); //调用了 &lt;</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">bool Integer::operator&gt;=( const Integer&amp; rhs) const &#123;</span></span><br><span class=\"line\"><span class=\"code\">\treturn !(*this &lt; ths); //调用了 &lt;</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注：这样写的好处是，以后要修改代码，只需要改两处地方即可</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果没有给一个类的赋值运算符重载函数，则编译器会自动创造一个赋值运算符的重载</span><br><span class=\"line\">T::operator=(T)&#123;&#125;进行一个memberwise的赋值操作，即有成员变量是其他类则要调用那个类的赋值运算符重载函数</span><br><span class=\"line\"></span><br><span class=\"line\">注1：如果要自己实现赋值运算符的重载函数，则该函数一定要是成员函数，且是对自己赋值然后返回自己</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tT&amp; T::operator=(const T&amp; rhs)&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tif(this != &amp;rhs)&#123;\t//当自己不是赋值给自己时才做赋值操作，否则直接返回自己</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t//assignmeng的具体实现</span></span><br><span class=\"line\"><span class=\"code\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t\treturn *this;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">注2：if检查在类有动态申请内存（有指针成员变量）的时候要写，否容易出现问题</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tprivate:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tchar *p;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tA&amp; operator=(const&amp; A that)&#123;\t\t//此时当出现某对象自己给自己赋值时报错，因为p已经被delete了，that.p不存在，直接报错，要不就读到别人地址了</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t\tdelete p;</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t\tp = new [strlen(that.p)+1];</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t\tstrcpy(p, that.p);</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t\treturn *this;</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\t自动类型转换</span><br><span class=\"line\"><span class=\"code\">\t当一个函数f的参数需要类A的变量，但类A有一个参数为类B的构造函数，此时给f一个B的对象，仍然不会出错。因为系统会自动调用A的对应的那个构造函数来通过B的对象来构造一个A的临时匿名对象传给f函数，如果不想系统自动转换则需要在该构造函数前加上explicit关键字</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"bullet\">2.</span>\t默认的自动转换（=&gt; 的意思相当于是可以把 =&gt; 左边的东西直接传给右边）：</span><br><span class=\"line\"><span class=\"code\">\tPrimitive（小范围 =&gt; 大范围）：</span></span><br><span class=\"line\"><span class=\"code\">\t\tchar =&gt; short =&gt; int =&gt; float =&gt; double</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t\t\t =&gt; int =&gt; long</span></span><br><span class=\"line\"><span class=\"code\">\tImplicit(对于单独某个类来说)：</span></span><br><span class=\"line\"><span class=\"code\">\t\tT =&gt; T&amp;,\t绑定</span></span><br><span class=\"line\"><span class=\"code\">\t\tT&amp; =&gt; T,\t初始化/赋值</span></span><br><span class=\"line\"><span class=\"code\">\t\tT* =&gt; void*,\t去除指针类型，简称退型，指针仍指向那片地址空间，但指针没有类型了</span></span><br><span class=\"line\"><span class=\"code\">\t\tT =&gt; const T,\t把一个变量当const看待</span></span><br><span class=\"line\"><span class=\"code\">\t\tT[] =&gt; T*,\t数组可以用指针来控制</span></span><br><span class=\"line\"><span class=\"code\">\t\tT* =&gt; T[],\t指针可以用数组来控制</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"bullet\">3.</span>\t专用类型转换（T =&gt; C，不同类型之间的转换）</span><br><span class=\"line\"><span class=\"code\">\t使用专用类型转换函数</span></span><br><span class=\"line\"><span class=\"code\">\t类中声明：operator target_class();</span></span><br><span class=\"line\"><span class=\"code\">\t类外定义：X::operator target_class()&#123;...&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t作用：将X类的对象转换为target_class类的对象</span></span><br><span class=\"line\"><span class=\"code\">\t专用的类型转换函数，该函数没有写返回类型，实际上target_class就是返回类型，target_class可以是任何系统和自定义的类</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass Rational &#123;</span></span><br><span class=\"line\"><span class=\"code\">\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t...</span></span><br><span class=\"line\"><span class=\"code\">\t\toperator double() const;\t//将rational类转换为double类型</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tRational::operator double() const &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\treturn numerator_/(double) denominator_;\t//实现转换，瞎写的，这里是在举例子怎么写</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注：不能出现：</span><br><span class=\"line\"><span class=\"bullet\">\t1.</span> A类中有一个转换为B类的专用类型转换函数a<span class=\"emphasis\">_to_</span>b()</span><br><span class=\"line\"><span class=\"bullet\">\t2.</span> B类中有一个以A类对象为参数的构造函数B(A&amp; a)</span><br><span class=\"line\"><span class=\"bullet\">\t3.</span> 有一个函数f需要一个B类对象，但传给f了一个A类的对象</span><br><span class=\"line\"><span class=\"code\">\t此时报错，因为编译器不知道用a_to_b函数还是B(A&amp; a)函数，它俩没有优先级区别，此时要么删掉一个，或者在B(A&amp; a)函数前加上explicit关键字免得系统自动调用这个构造函数</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_21](#C++ 自动类型转换\t\t\t\t&#x3D;&#x3D;检验代码_21&#x3D;&#x3D;)</p>\n<h2 id=\"基础概念-14——模板——Template\"><a href=\"#基础概念-14——模板——Template\" class=\"headerlink\" title=\"基础概念_14——模板——Template\"></a>基础概念_14——模板——Template</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一种重用代码的方式，此时变量类型成为参数，可以有两种Template，function和class两种</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-函数模板——function-template\"><a href=\"#1-函数模板——function-template\" class=\"headerlink\" title=\"1.函数模板——function template\"></a>1.函数模板——function template</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一种模板用来做出函数，相当于告诉编译器，它要怎么帮你做出一个函数</span></span><br><span class=\"line\">如：</span><br><span class=\"line\">使用一般函数：</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span>&amp; x, <span class=\"type\">int</span>&amp; y)</span></span>&#123;\t<span class=\"comment\">//这个函数只能交换俩int类型的变量</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> temp = x;</span><br><span class=\"line\">\t\tx = y;</span><br><span class=\"line\">\t\ty = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">使用函数模板：</span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt; <span class=\"keyword\">class</span> <span class=\"title class_\">T</span> &gt;\t<span class=\"comment\">//template是关键字，class T是用来代表任意类型（你要是喜欢也可以用X）（实际上就是用来占位的，可以有多个如：template &lt;class T1, class T2&gt;，逗号隔开即可），这一语句下面是函数那就是函数模板，是类那就是类模板，即下面的swap函数就是函数模板，T代表任意的类型可以是基本类型也可以是用户自定义类型</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span> <span class=\"params\">(T&amp; x, T&amp; y)</span></span>&#123;\t</span><br><span class=\"line\">\t\tT temp = x;</span><br><span class=\"line\">\t\tx = y;</span><br><span class=\"line\">\t\ty = tmep;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">注<span class=\"number\">1</span>：实际上上面的代码是declaration（声明），编译器会把这段代码记录下来，以后遇到调用swap时，会用那个模板把T变成调用处对应的类型X（随便用个字母表示），自动做出一个参数是X类型的swap函数（和其他的swap形成重载）</span><br><span class=\"line\"></span><br><span class=\"line\">注<span class=\"number\">2</span>：使用函数模板后系统会ban掉显示（<span class=\"keyword\">explicit</span>）自动类型转换和隐式（implicit）类型转换，如上面例子中<span class=\"built_in\">swap</span>(<span class=\"type\">int</span>,<span class=\"type\">int</span>);可以，但<span class=\"built_in\">swap</span>(<span class=\"type\">int</span>,<span class=\"type\">double</span>);不行</span><br><span class=\"line\"></span><br><span class=\"line\">注<span class=\"number\">3</span>：重载规则，检查是否只有唯一的函数匹配--否--&gt;检查是否只有唯一的函数模板匹配--否--&gt;找重载函数</span><br><span class=\"line\"></span><br><span class=\"line\">注<span class=\"number\">4</span>：如果函数模板的函数中没有使用到占位的<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>，则在调用时需显示的给出标识用哪种类型如：</span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"type\">void</span> )</span></span>&#123;...&#125;</span><br><span class=\"line\">    <span class=\"built_in\">foo</span>&lt;<span class=\"type\">int</span>&gt;();\t<span class=\"comment\">//此时 T 的type是int </span></span><br><span class=\"line\">    <span class=\"built_in\">foo</span>&lt;<span class=\"type\">float</span>&gt;();\t<span class=\"comment\">//此时 T 的type是float</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-类模板——class-tmeplate\"><a href=\"#2-类模板——class-tmeplate\" class=\"headerlink\" title=\"2_类模板——class tmeplate\"></a>2_类模板——class tmeplate</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一种模板用来做出类，类模板里的每一个函数都是函数模板</span></span><br><span class=\"line\">例子：</span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;\t<span class=\"comment\">//同函数模板，关键字和占位类型（占位类型可以有多个如：template&lt; class key, class value&gt; ，逗号隔开即可），表示下面的东西是template，Vector是一个声明</span></span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">Vector</span> &#123;\t<span class=\"comment\">//和正常类一样，Vector是名字</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">Vector</span>(<span class=\"type\">int</span>);\t<span class=\"comment\">//构造函数，参数为int</span></span><br><span class=\"line\">\t\t~<span class=\"built_in\">Vector</span>();\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">Vector</span>(<span class=\"type\">const</span> Vector&amp;);<span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">\t\tVector&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Vector&amp;);\t<span class=\"comment\">//赋值运算符重载</span></span><br><span class=\"line\">\t\tT&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">int</span>);\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\tT* m_elements;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> m_size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">注<span class=\"number\">5</span>：使用Vector时因为表示传参数，所以得像 注<span class=\"number\">4</span> 那样显示地指明 T 的type，如：<span class=\"function\">Vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">i</span><span class=\"params\">(<span class=\"number\">100</span>)</span></span>;\t<span class=\"comment\">//通过参数为int类型的构造函数创建一个Vector对象，且 T 的类型是int</span></span><br><span class=\"line\"></span><br><span class=\"line\">注<span class=\"number\">6</span>：类模板中的类的函数，都得写成函数模板的格式（其实也就是在类成员函数的定义前加上 <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span> &gt;，然后按需求把某些变量类型改成 T ，类名后和域解析符前得加上 &lt;T&gt; ）如：</span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;\t<span class=\"comment\">//不能省</span></span><br><span class=\"line\">\tVector&lt;T&gt;::<span class=\"built_in\">Vector</span>(<span class=\"type\">int</span> size) : <span class=\"built_in\">m_size</span>(size) &#123; <span class=\"comment\">//参数为int的构造函数的定义，注意Vector&lt;T&gt;，中&lt;T&gt;不能省</span></span><br><span class=\"line\">\t\tm_elements = <span class=\"keyword\">new</span> T[m_size];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;\t<span class=\"comment\">//不能省</span></span><br><span class=\"line\">\tT&amp; Vector&lt;T&gt;::<span class=\"keyword\">operator</span>[] (<span class=\"type\">int</span> indx)\t&#123; <span class=\"comment\">//赋值运算符重载函数的定义，注意Vector&lt;T&gt;，中&lt;T&gt;不能省</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (indx &lt; m_size &amp;&amp; indx &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> m_elements[indx];</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">注<span class=\"number\">7</span>：如果出现Vector&lt; Vector &lt; <span class=\"type\">double</span> *&gt; &gt;;（即有一个Vector它的每一个单元都是一个Vector，而那个Vector的每一个单元都是一个<span class=\"type\">double</span> *）这种要注意，最后面的两个&gt;，有些编译器要中间加一个空格，否则会识别为右移或者流</span><br><span class=\"line\">    </span><br><span class=\"line\">注<span class=\"number\">8</span>：模板函数的占位类型实际可以非常复杂如：</span><br><span class=\"line\">    Vector&lt; <span class=\"built_in\">int</span> (*) (Vector&lt;<span class=\"type\">double</span>&gt;&amp;,<span class=\"type\">int</span>) &gt;;（一个Vector它的每一个单元都是一个函数指针，该函数指针指向的函数的参数有两项，第一项是一个每一个单元都是<span class=\"type\">double</span>的Vector而且是通过引用传递，第二项是一个<span class=\"type\">int</span>）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-模板函数——template-function\"><a href=\"#3-模板函数——template-function\" class=\"headerlink\" title=\"3_模板函数——template function\"></a>3_模板函数——template function</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">就是由模板生成的函数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-模板类——template-class\"><a href=\"#4-模板类——template-class\" class=\"headerlink\" title=\"4_模板类——template class\"></a>4_模板类——template class</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">就是由模板生成的类</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-特别注意-1-x3D-x3D\"><a href=\"#x3D-x3D-特别注意-1-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意_1&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意_1&#x3D;&#x3D;</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">模板<span class=\"keyword\">template</span>的参数不仅可以是一种未指定类型（占位类型），也可以是实际类型（甚至可以给其设置缺省值）</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> bounds = <span class=\"number\">100</span>&gt; <span class=\"comment\">//bounds是一个带缺省值的变量，且在模板里面可以直接使用</span></span><br><span class=\"line\">\t<span class=\"keyword\">class</span> FixedVector &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">FixedVector</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t\tT&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">int</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\tT elements[bounds];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tFixedVector&lt;<span class=\"type\">int</span>, <span class=\"number\">50</span>&gt; v1; \t<span class=\"comment\">//种50个int</span></span><br><span class=\"line\">\tFixedVector&lt;<span class=\"type\">int</span>, <span class=\"number\">10</span>*<span class=\"number\">5</span>&gt; v2;\t<span class=\"comment\">//种50个int</span></span><br><span class=\"line\">\tFixedVector&lt;<span class=\"type\">int</span>&gt; v3;\t\t<span class=\"comment\">//种100个int</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-特别注意-2-x3D-x3D\"><a href=\"#x3D-x3D-特别注意-2-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意_2&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意_2&#x3D;&#x3D;</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\ttemplate和template之间不能做继承，</span><br><span class=\"line\"><span class=\"bullet\">2.</span>\ttemplate可以继承于一个non-template的类</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">3.</span>\tnon-template类也可以继承template类（实际是先种出一个模板类再把这个模板类继承给那个non-template类）如：</span><br><span class=\"line\"><span class=\"code\">\tclass SupervisorGroup : public List&lt;Employee*&gt;&#123;...&#125; //List是一个类模板，这里指定了占位类型为Employee *</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-15——异常——exception\"><a href=\"#基础概念-15——异常——exception\" class=\"headerlink\" title=\"基础概念_15——异常——exception\"></a>基础概念_15——异常——exception</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">概念：</span><br><span class=\"line\">\t运行到某处时，有问题出现，但当前环境或程序或函数无法处理，以至于无法继续下去的情况就叫exception，但在某处，某个程序或函数可以处理</span><br><span class=\"line\"></span><br><span class=\"line\">关键字：</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tcode;\t\t\t\t\t\t<span class=\"comment\">//catch中也可以throw异常</span></span><br><span class=\"line\">\t&#125; <span class=\"built_in\">catch</span> ( error_type )&#123;\t\t\t<span class=\"comment\">// error_type 是 ... 时表示捕获所有类型的异常</span></span><br><span class=\"line\">\t\tcode;\t\t\t\t\t\t<span class=\"comment\">//catch中也可以throw异常</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">throw</span> error_type;\t<span class=\"comment\">//向上抛异常并退出当前函数，直到遇到有catch能捕获抛出的异常时停止</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> block</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        code_1;\t\t\t\t\t\t\t\t<span class=\"comment\">//尝试做一些可能会导致异常的代码</span></span><br><span class=\"line\">    &#125;<span class=\"built_in\">catch</span> (error_type_1 var_name)&#123;\t\t\t<span class=\"comment\">//error_type_1 var_name可以理解成函数的形参表，且var_name变量在对应的code中可以使用，其实catch就像一个处理函数</span></span><br><span class=\"line\">    \tcode_2;</span><br><span class=\"line\">    &#125;<span class=\"built_in\">catch</span> (error_type_2 var_name)&#123;\t\t\t<span class=\"comment\">//针对error_type的子类，会执行类型转换（upcast，向上造型），即子类的捕获要放在父类捕获前，否则该子类catch永远无法执行，编译无法通过</span></span><br><span class=\"line\">        code_3;</span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t\t\t<span class=\"comment\">//catch查找是按从上到下的顺序查找的，如果catch(...)是第一个catch则其后的catch全部永远没法执行，编译无法通过</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">特色操作：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> : throw(error_type_1, error_type_2)&#123;</span>\t<span class=\"comment\">//c++函数后面这样写，代表该函数在运行时最多可能会抛出这些异常，这样写后func只能抛出error_type_1和error_type_2两种异常，抛其他异常，系统反而会抛异常</span></span><br><span class=\"line\">    \tcode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//一个函数后面不这样写，则可以抛出任何异常。如果是throw()，括号里面不写类型则意味着该函数不会抛出任何异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">注：c中malloc失败时会返回一个null，但在c++中不会，只会抛一个bad_malloc异常</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-特别注意-x3D-x3D-4\"><a href=\"#x3D-x3D-特别注意-x3D-x3D-4\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意&#x3D;&#x3D;</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造函数中如果使用抛异常来通知构造失败的话（因为构造函数和析构函数没有返回值），可能会导致奇奇怪怪的问题，因为如果构造函数使用到了new，但构造没成功，抛了异常，那么new来的空间就变成垃圾内存了</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-16——流——stream\"><a href=\"#基础概念-16——流——stream\" class=\"headerlink\" title=\"基础概念_16——流——stream\"></a>基础概念_16——流——stream</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">流——单方向</span><br><span class=\"line\">c和c++对文件操作的区别：</span><br><span class=\"line\"><span class=\"code\">\tc语言中，对一个文件可以任意的游走（random access），从第一段开始读，从第25段的第34个字符开始读。而c++的流是单方向的，“流”过去了，就没有了</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">流操作——Stream operations</span><br><span class=\"line\"><span class=\"bullet\">1.</span>\tExtractors —— &gt;&gt; 从流里面读东西（已经被重载，根据左边的receiver不同调用的不同，如果receiver是istream则是extractor，receiver如果是一个int则是右移）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">2.</span>\tInserters —— &lt;&lt; 向流里面写东西（同上）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">3.</span>\tManipulators —— 操控流的怎么读，怎么写（类似格式化输入输出）</span><br><span class=\"line\"></span><br><span class=\"line\">流的类型——Stream type</span><br><span class=\"line\"><span class=\"bullet\">1.</span>\tText streams</span><br><span class=\"line\"><span class=\"code\">\t文本流，parse和format，解析和格式化</span></span><br><span class=\"line\"><span class=\"code\">2.\tBinary streams</span></span><br><span class=\"line\"><span class=\"code\">\t二进制数据，</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>\tistream &gt;&gt; lvalue</span><br><span class=\"line\">\t会根据lvalue的变量类型，自动解析怎么把值传给lvalue</span><br><span class=\"line\">注<span class=\"number\">1</span>：自动解析的类型：</span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\t%c</span><br><span class=\"line\">\t<span class=\"type\">short</span>, <span class=\"type\">int</span>\t%d</span><br><span class=\"line\">\t<span class=\"type\">long</span>\t\t%ld</span><br><span class=\"line\">\t<span class=\"type\">float</span>\t\t%g</span><br><span class=\"line\">\t<span class=\"type\">double</span>\t\t%lg</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">double</span>\t%Lg</span><br><span class=\"line\">\t<span class=\"type\">char</span> *\t\t%s</span><br><span class=\"line\">\t<span class=\"type\">void</span> *\t\t%p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>\t手动重载 &gt;&gt; 运算符</span><br><span class=\"line\">istream&amp; <span class=\"keyword\">operator</span>&gt;&gt;(istream&amp; is, T&amp; obj)&#123;\t<span class=\"comment\">//第一个参数（也就是receiver），istream&amp;之所以不加const是因为要修改流</span></span><br><span class=\"line\">\tcode;\t\t<span class=\"comment\">//读取流操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> is;\t<span class=\"comment\">//返回类型也是istream&amp; 是操作流之后可以把操作完后的流继续操作，如：( ( cin&gt;&gt;a )&gt;&gt;b )&gt;&gt;c</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>\t手动重载 &lt;&lt; 运算符</span><br><span class=\"line\">    ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; os, <span class=\"type\">const</span> T&amp; obj)&#123;</span><br><span class=\"line\">    \tcode;\t\t<span class=\"comment\">//实际插入流操作</span></span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> os;\t\t<span class=\"comment\">//\t( ( cout&lt;&lt;a )&lt;&lt;b )&lt;&lt;c，返回的是ostream&amp;的原因</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"number\">4.</span>\t常见使用</span><br><span class=\"line\">    ch = cin.<span class=\"built_in\">get</span>();\t读一个字符，如果读完了则返回EOF</span><br><span class=\"line\">    cout.<span class=\"built_in\">put</span>(ch);\t<span class=\"comment\">// 打印一个字符</span></span><br><span class=\"line\">    <span class=\"built_in\">ignore</span>(<span class=\"type\">int</span> limit = <span class=\"number\">1</span>, <span class=\"type\">int</span> delim = EOF);\t跳过多少个东西不读，一直读到什么位置，这里缺省值是跳过一个，一直读到结束</span><br><span class=\"line\">    cout.<span class=\"built_in\">flush</span>();\t<span class=\"comment\">//强制输出流的内容到物理介质上去</span></span><br><span class=\"line\"><span class=\"number\">5.</span>\tmanipulator，格式化\t<span class=\"comment\">//要导入头文件iomanip</span></span><br><span class=\"line\">    endl其实是个manipulator</span><br><span class=\"line\">    <span class=\"comment\">//例子</span></span><br><span class=\"line\">    cin &gt;&gt; hex &gt;&gt; n;\t<span class=\"comment\">//以十六进制输入给n</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"number\">1000.243</span> &lt;&lt; endl;\t<span class=\"comment\">//按两位小数输出</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">setw</span>(<span class=\"number\">20</span>) &lt;&lt; <span class=\"string\">&quot;OK!&quot;</span>;\t<span class=\"comment\">//占20位，输出右对齐</span></span><br><span class=\"line\"><span class=\"number\">6.</span>\t常见manipulators:</span><br><span class=\"line\">\tdec, hex, otc\t数字进制转化\t\t\t\t\t\t   \t\t \t\t\tI,O</span><br><span class=\"line\">    endl\t\t\t插入一个新行，并使用flush\t\t\t\t \t\t\t\t\t O</span><br><span class=\"line\">\tflush\t\t\tflush流（相当于刷新缓冲区）\t\t\t\t\t\t\t\t<span class=\"function\">O</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">setw</span><span class=\"params\">(<span class=\"type\">int</span>)</span>\t\t设置占位宽度（最小要这么宽，宽度大于设定则不管）\t\t\tI, O</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">setfill</span><span class=\"params\">(ch)</span>\t\t如果输出的东西没有设定的那么宽，则用什么填充\t\t\t\t I, O</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">setbase</span><span class=\"params\">(<span class=\"type\">int</span>)</span>\t相当于进制拓展，可以设定以任意进制输出\t\t\t\t\t\t   O</span></span><br><span class=\"line\"><span class=\"function\">\tws\t\t\t\t\t跳过空格\t\t\t\t\t\t\t\t\t\t\tI</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">setprecision</span><span class=\"params\">(<span class=\"type\">int</span>)</span>\t设置精度，即多少位小数\t\t\t\t\t\t\t\t\tO</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">setiosflags</span><span class=\"params\">(<span class=\"type\">long</span>)</span>\t设置流里面都是ON，相当于1\t\t\t\t\t\t\tI, O</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">resetiosflags</span><span class=\"params\">(<span class=\"type\">long</span>)</span>\t设置流里面都是OFF，相当于0\t\t\t\t\t\t\tI, O</span></span><br><span class=\"line\"><span class=\"function\">7.\t预定义流</span></span><br><span class=\"line\"><span class=\"function\">        cin\t\t\tstandard input</span></span><br><span class=\"line\"><span class=\"function\">        cout\t\tstandard output</span></span><br><span class=\"line\"><span class=\"function\">        cerr\t\tunbuffered <span class=\"title\">error</span><span class=\"params\">(debugging)</span> output</span></span><br><span class=\"line\"><span class=\"function\">        clog\t\tbuffered <span class=\"title\">error</span><span class=\"params\">(debugging)</span> output</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-自定义Manipulator-与-IOS-flag-x3D-x3D\"><a href=\"#x3D-x3D-自定义Manipulator-与-IOS-flag-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;自定义Manipulator 与 IOS flag&#x3D;&#x3D;\"></a>&#x3D;&#x3D;自定义Manipulator 与 IOS flag&#x3D;&#x3D;</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>\tManipulator</span><br><span class=\"line\"><span class=\"comment\">//这是全局函数</span></span><br><span class=\"line\"><span class=\"function\">ostream&amp; <span class=\"title\">manip</span><span class=\"params\">(ostream&amp; out)</span></span>&#123;</span><br><span class=\"line\">    code;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ostream&amp; <span class=\"title\">tab</span><span class=\"params\">(ostream&amp; out)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>;\t\t<span class=\"comment\">//返回一个ostream的引用，且返回时还有一个 &lt;&lt; 的调用，把&#x27;\\t&#x27;插入到流中</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;Hello&quot;</span> &lt;&lt; tab &lt;&lt; <span class=\"string\">&quot;World!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> ios :: flag\t标志</span><br><span class=\"line\">    ios::skipws\t\t\t\t\t\t\t<span class=\"comment\">//忽略前导空格</span></span><br><span class=\"line\">    ios::lef, ios::right\t\t\t\t<span class=\"comment\">//设置左对齐，右对齐</span></span><br><span class=\"line\">    ios::internal\t\t\t\t\t\t<span class=\"comment\">//数值的符号位在域宽内左对齐，数值右对齐，中间由填充字符填充</span></span><br><span class=\"line\">    ios::dec, ios::oct, ios::hex\t\t<span class=\"comment\">//设置整数的基数为10，8，16</span></span><br><span class=\"line\">    ios::showbase\t\t\t\t\t\t<span class=\"comment\">//强制输出整数的基数(八进制数以0打头，十六进制数以0x打头)</span></span><br><span class=\"line\">    ios::showpoint\t\t\t\t\t\t<span class=\"comment\">//强制显示小数点</span></span><br><span class=\"line\">    ios::uppercase\t\t\t\t\t\t<span class=\"comment\">//16进制数大写输出</span></span><br><span class=\"line\">    ios::showpos\t\t\t\t\t\t<span class=\"comment\">//强制显示符号</span></span><br><span class=\"line\">    ios::scientific, ios::fixed\t\t\t<span class=\"comment\">//设置指数显示，固定浮点显示</span></span><br><span class=\"line\">    ios::unitbuf\t\t\t\t\t\t<span class=\"comment\">//每次输出后刷新所有的流</span></span><br><span class=\"line\">    ios::boolalpha \t\t\t\t\t\t<span class=\"comment\">//以“true”/“false”的形式输出布尔值</span></span><br><span class=\"line\">    ios::stdio \t\t\t\t\t\t\t<span class=\"comment\">//每次输出之后清除stdout, stderr</span></span><br><span class=\"line\">   \t<span class=\"comment\">//使用方法</span></span><br><span class=\"line\">    <span class=\"number\">2.1</span>\t\t使用<span class=\"function\">Manipulator</span></span><br><span class=\"line\"><span class=\"function\">    \t<span class=\"title\">setiosflags</span><span class=\"params\">(flags)</span></span>;\t\t\t\t<span class=\"comment\">//flags 就是上面的代码，如ios::skipws</span></span><br><span class=\"line\">    \t<span class=\"built_in\">resetiosflags</span>(flags);</span><br><span class=\"line\">\t<span class=\"number\">2.2</span>\t\t使用stream成员函数</span><br><span class=\"line\">        istream.<span class=\"built_in\">setf</span>(flags);\t\t\t\t\t<span class=\"comment\">//flags 同理，istream是cin或cout这种流对象</span></span><br><span class=\"line\">        istream.<span class=\"built_in\">unsetf</span>(flags);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-17——STL——Standard-Library\"><a href=\"#基础概念-17——STL——Standard-Library\" class=\"headerlink\" title=\"基础概念_17——STL——Standard Library\"></a>基础概念_17——STL——Standard Library</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\t容器——Containers（注意在使用时所有的容器都是小写，实际上就是类模板）</span><br><span class=\"line\"><span class=\"code\">\tVector\t\t一个可以在后面（一个方向）增长的数组</span></span><br><span class=\"line\"><span class=\"code\">\tDeque\t\t一个可以在前后都可以增长的数组</span></span><br><span class=\"line\"><span class=\"code\">\tList\t\t双向链表</span></span><br><span class=\"line\"><span class=\"code\">\tSets\t\t集合（没有重复的元素）</span></span><br><span class=\"line\"><span class=\"code\">\tMap\t\t\t映射，键值对</span></span><br><span class=\"line\"><span class=\"code\">\tPair\t\t表达两东西之间的关系，这两东西可以是任何东西</span></span><br><span class=\"line\"><span class=\"code\">2.\t基础算法——Basic Algorithms（实际上是一些函数模板）</span></span><br><span class=\"line\"><span class=\"code\">\tsort\t\t排序</span></span><br><span class=\"line\"><span class=\"code\">\tsearch\t\t查找</span></span><br><span class=\"line\"><span class=\"code\">\t...</span></span><br><span class=\"line\"><span class=\"code\">3.\t迭代器——Iterators</span></span><br><span class=\"line\"><span class=\"code\">\t如：</span></span><br><span class=\"line\"><span class=\"code\">\t\tvector&lt;int&gt;::iterator p;\t//p是vector&lt;int&gt;这个类里面的类叫iterator的对象</span></span><br><span class=\"line\"><span class=\"code\">\t\tp = x.begin();\t\t\t\t//p现在用来代表x中的第一个元素</span></span><br><span class=\"line\"><span class=\"code\">\t\tcout &lt;&lt; *p &lt;&lt; endl;\t\t\t//*是被重载了的，vector&lt;in&gt;说明p是一个int，所以*p是一个int</span></span><br><span class=\"line\"><span class=\"code\">\t\tp++;\t\t\t\t\t\t//++也是被重载过的</span></span><br><span class=\"line\"><span class=\"code\">4.\t所有STL的东西都是在 std 那个命名空间中，所以得使用using namespace std;否则用一个就得加 std::</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"类-例子\"><a href=\"#类-例子\" class=\"headerlink\" title=\"类_例子\"></a>类_例子</h2><h4 id=\"售票机类\"><a href=\"#售票机类\" class=\"headerlink\" title=\"售票机类\"></a>售票机类</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TicketMachine</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showPrompt</span><span class=\"params\">()</span></span>;\t<span class=\"comment\">//成员函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getMoney</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printTicket</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showBalance</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printError</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> PRICE;\t<span class=\"comment\">//成员变量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> balance;</span><br><span class=\"line\">    <span class=\"type\">int</span> total;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检验代码\"><a href=\"#检验代码\" class=\"headerlink\" title=\"检验代码\"></a>检验代码</h2><h4 id=\"分析类不同实例的成员变量值-x3D-x3D-检验代码-1-x3D-x3D\"><a href=\"#分析类不同实例的成员变量值-x3D-x3D-检验代码-1-x3D-x3D\" class=\"headerlink\" title=\"分析类不同实例的成员变量值\t\t\t&#x3D;&#x3D;检验代码_1&#x3D;&#x3D;\"></a>分析类不同实例的成员变量值\t\t\t&#x3D;&#x3D;检验代码_1&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">A::f</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ti = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA a;</span><br><span class=\"line\">\tA b;</span><br><span class=\"line\">\tb.i = <span class=\"number\">30</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b.i_1 = &quot;</span> &lt;&lt; b.i &lt;&lt; endl;</span><br><span class=\"line\">\ta.i = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a.i_1 = &quot;</span> &lt;&lt; a.i &lt;&lt; endl;</span><br><span class=\"line\">\ta.<span class=\"built_in\">f</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b.i_2 = &quot;</span> &lt;&lt; b.i &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a.i_2 = &quot;</span> &lt;&lt; a.i &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.i_1 = <span class=\"number\">30</span></span><br><span class=\"line\">a.i_1 = <span class=\"number\">10</span></span><br><span class=\"line\">b.i_2 = <span class=\"number\">30</span></span><br><span class=\"line\">a.i_2 = <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"探究c-对象实质-x3D-x3D-检验代码-2-x3D-x3D\"><a href=\"#探究c-对象实质-x3D-x3D-检验代码-2-x3D-x3D\" class=\"headerlink\" title=\"探究c++对象实质\t\t\t&#x3D;&#x3D;检验代码_2&#x3D;&#x3D;\"></a>探究c++对象实质\t\t\t&#x3D;&#x3D;检验代码_2&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">A::f</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ti = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;A::f()--&amp;i = &quot;</span> &lt;&lt; &amp;i &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA a;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;&amp;a = &quot;</span> &lt;&lt; &amp;a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;&amp;a.i = &quot;</span> &lt;&lt; &amp;(a.i) &lt;&lt; endl;</span><br><span class=\"line\">\ta.<span class=\"built_in\">f</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;a = <span class=\"number\">0x61fe1c</span></span><br><span class=\"line\">&amp;a.i = <span class=\"number\">0x61fe1c</span></span><br><span class=\"line\">A::<span class=\"built_in\">f</span>()--&amp;i = <span class=\"number\">0x61fe1c</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"解密new与delete测试1不带-x3D-x3D-检验代码-3-x3D-x3D\"><a href=\"#解密new与delete测试1不带-x3D-x3D-检验代码-3-x3D-x3D\" class=\"headerlink\" title=\"解密new与delete\t测试1\t不带[]\t\t&#x3D;&#x3D;检验代码_3&#x3D;&#x3D;\"></a>解密new与delete\t测试1\t不带[]\t\t&#x3D;&#x3D;检验代码_3&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>()&#123;i = <span class=\"number\">0</span>;cout &lt;&lt; <span class=\"string\">&quot;A::A()&quot;</span> &lt;&lt; endl;&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::~A(), i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> </span>&#123; <span class=\"keyword\">this</span>-&gt;i = i; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA *p = <span class=\"keyword\">new</span> A[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp[i].<span class=\"built_in\">set</span>(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"解密new与delete测试2带-x3D-x3D-检验代码-4-x3D-x3D\"><a href=\"#解密new与delete测试2带-x3D-x3D-检验代码-4-x3D-x3D\" class=\"headerlink\" title=\"解密new与delete\t测试2\t带[]\t&#x3D;&#x3D;检验代码_4&#x3D;&#x3D;\"></a>解密new与delete\t测试2\t带[]\t&#x3D;&#x3D;检验代码_4&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>() &#123;i = <span class=\"number\">0</span>;cout &lt;&lt; <span class=\"string\">&quot;A::A()&quot;</span> &lt;&lt; endl;&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::~A(), i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> </span>&#123; <span class=\"keyword\">this</span>-&gt;i = i; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA *p = <span class=\"keyword\">new</span> A[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t\tp[i].<span class=\"built_in\">set</span>(i);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">9</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">8</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">7</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">6</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">5</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">4</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">3</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">2</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">1</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"解密new与delete-x3D-x3D-检验代码-5-x3D-x3D\"><a href=\"#解密new与delete-x3D-x3D-检验代码-5-x3D-x3D\" class=\"headerlink\" title=\"解密new与delete\t\t\t\t&#x3D;&#x3D;检验代码_5&#x3D;&#x3D;\"></a>解密new与delete\t\t\t\t&#x3D;&#x3D;检验代码_5&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>()</span><br><span class=\"line\">\t&#123;i = <span class=\"number\">0</span>;cout &lt;&lt; <span class=\"string\">&quot;A::A()&quot;</span> &lt;&lt; endl;&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::~A(), i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">(A *q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::g(), q-&gt;i=&quot;</span> &lt;&lt; q-&gt;i &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> </span>&#123; <span class=\"keyword\">this</span>-&gt;i = i; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA a;</span><br><span class=\"line\">\ta.<span class=\"built_in\">set</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tA b;</span><br><span class=\"line\">\tb.<span class=\"built_in\">set</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\ta.<span class=\"built_in\">g</span>(&amp;b);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-4\"><a href=\"#输出-4\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">g</span>(), q-&gt;i=<span class=\"number\">1000</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">1000</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"继承初体验-x3D-x3D-检验代码-6-x3D-x3D\"><a href=\"#继承初体验-x3D-x3D-检验代码-6-x3D-x3D\" class=\"headerlink\" title=\"继承初体验\t\t\t\t&#x3D;&#x3D;检验代码_6&#x3D;&#x3D;\"></a>继承初体验\t\t\t\t&#x3D;&#x3D;检验代码_6&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>() : <span class=\"built_in\">i</span>(<span class=\"number\">0</span>) &#123; cout &lt;&lt; <span class=\"string\">&quot;A::A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::f()&quot;</span> &lt;&lt; <span class=\"string\">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> ii)</span> </span>&#123; i = ii; &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A&#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tB b;</span><br><span class=\"line\">\tb.<span class=\"built_in\">set</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">\tb.<span class=\"built_in\">print</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-5\"><a href=\"#输出-5\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">f</span>()i=<span class=\"number\">100</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"继承再体验-x3D-x3D-检验代码-7-x3D-x3D\"><a href=\"#继承再体验-x3D-x3D-检验代码-7-x3D-x3D\" class=\"headerlink\" title=\"继承再体验\t\t\t\t&#x3D;&#x3D;检验代码_7&#x3D;&#x3D;\"></a>继承再体验\t\t\t\t&#x3D;&#x3D;检验代码_7&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>(<span class=\"type\">int</span> ii) : <span class=\"built_in\">i</span>(ii) &#123;&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::print() i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> ii)</span> </span>&#123; i = ii; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">B</span>() : <span class=\"built_in\">A</span>(<span class=\"number\">15</span>) &#123; cout &lt;&lt; <span class=\"string\">&quot;B::B() &quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">B</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;B::~B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">set</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tB b;</span><br><span class=\"line\">\tb.<span class=\"built_in\">set</span>(<span class=\"number\">66</span>);</span><br><span class=\"line\">\tb.<span class=\"built_in\">f</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-6\"><a href=\"#输出-6\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B::<span class=\"built_in\">B</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">print</span>() i = <span class=\"number\">2</span></span><br><span class=\"line\">B::~<span class=\"built_in\">B</span>()</span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"c-名字隐藏-x3D-x3D-检验代码-8-x3D-x3D\"><a href=\"#c-名字隐藏-x3D-x3D-检验代码-8-x3D-x3D\" class=\"headerlink\" title=\"c++名字隐藏\t\t\t\t&#x3D;&#x3D;检验代码_8&#x3D;&#x3D;\"></a>c++名字隐藏\t\t\t\t&#x3D;&#x3D;检验代码_8&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::print() i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125; <span class=\"comment\">//A类中print有重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span> ii)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::print(int ii) &quot;</span> &lt;&lt; ii &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> ii)</span> </span>&#123; i = ii; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">B</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;B::B() &quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">B</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;B::~B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">set</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;B::print()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tB b;</span><br><span class=\"line\">\tb.<span class=\"built_in\">print</span>();\t\t\t<span class=\"comment\">//使用B类自己的print函数</span></span><br><span class=\"line\">\tb.A::<span class=\"built_in\">print</span>(<span class=\"number\">1234</span>);\t<span class=\"comment\">//使用A类的那个print函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-7\"><a href=\"#输出-7\" class=\"headerlink\" title=\"输出\"></a>输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">B::<span class=\"built_in\">B</span>()</span><br><span class=\"line\">B::<span class=\"built_in\">print</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">print</span>(<span class=\"type\">int</span> ii) <span class=\"number\">1234</span></span><br><span class=\"line\">B::~<span class=\"built_in\">B</span>()</span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"C-重载-x3D-x3D-检验代码-9-x3D-x3D\"><a href=\"#C-重载-x3D-x3D-检验代码-9-x3D-x3D\" class=\"headerlink\" title=\"C++重载\t\t\t\t&#x3D;&#x3D;检验代码_9&#x3D;&#x3D;\"></a>C++重载\t\t\t\t&#x3D;&#x3D;检验代码_9&#x3D;&#x3D;</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//code.h文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j=<span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//code.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;code.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;code.cpp::func &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;:&quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//main.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;code.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">func</span>(<span class=\"number\">1</span>,<span class=\"number\">29</span>);</span><br><span class=\"line\">        <span class=\"built_in\">func</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//编译时用 g++ code.cpp main.cpp -o main.exe</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-8\"><a href=\"#输出-8\" class=\"headerlink\" title=\"输出\"></a>输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code.cpp::func <span class=\"number\">1</span>:<span class=\"number\">29</span></span><br><span class=\"line\">code.cpp::func <span class=\"number\">5</span>:<span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-缺省声明探究-x3D-x3D-检验代码-10-x3D-x3D\"><a href=\"#C-缺省声明探究-x3D-x3D-检验代码-10-x3D-x3D\" class=\"headerlink\" title=\"C++缺省声明探究\t\t\t\t&#x3D;&#x3D;检验代码_10&#x3D;&#x3D;\"></a>C++缺省声明探究\t\t\t\t&#x3D;&#x3D;检验代码_10&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//code.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i=<span class=\"number\">111</span>, <span class=\"type\">int</span> j=<span class=\"number\">111</span>)</span></span>;\t<span class=\"comment\">//定义文件中的声明，此处声明不会生效，或者说会被覆盖</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;code.cpp::func &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;:&quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//main.cpp文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j=<span class=\"number\">123</span>)</span></span>;\t<span class=\"comment\">//调用func函数的文件中的声明，会失效</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">func</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//编译时用 g++ code.cpp main.cpp\t会默认生成a.exe (windows下)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-9\"><a href=\"#输出-9\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code.cpp::func <span class=\"number\">5</span>:<span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-其他编译单元调用内联函数-x3D-x3D-检验代码-11-x3D-x3D\"><a href=\"#C-其他编译单元调用内联函数-x3D-x3D-检验代码-11-x3D-x3D\" class=\"headerlink\" title=\"C++其他编译单元调用内联函数\t\t\t\t&#x3D;&#x3D;检验代码_11&#x3D;&#x3D;\"></a>C++其他编译单元调用内联函数\t\t\t\t&#x3D;&#x3D;检验代码_11&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;code.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">func</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//code.h文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j = <span class=\"number\">19</span>)</span></span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; j = &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//编译时用 g++ main.cpp</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-10\"><a href=\"#输出-10\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">5</span> j = <span class=\"number\">19</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-const运用-x3D-x3D-检验代码-12-x3D-x3D\"><a href=\"#C-const运用-x3D-x3D-检验代码-12-x3D-x3D\" class=\"headerlink\" title=\"C++ const运用\t\t\t\t&#x3D;&#x3D;检验代码_12&#x3D;&#x3D;\"></a>C++ const运用\t\t\t\t&#x3D;&#x3D;检验代码_12&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">char</span> *s1 = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> s2[] = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;s1 =   %p\\n&quot;</span>, s1);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;s2 =   %p\\n&quot;</span>, s2);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;main = %p\\n&quot;</span>, main);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-11\"><a href=\"#输出-11\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 =   <span class=\"number\">0000000000404000</span></span><br><span class=\"line\">s2 =   <span class=\"number\">000000000061F</span>E0C</span><br><span class=\"line\">main = <span class=\"number\">0000000000401550</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-const运用-2-x3D-x3D-检验代码-13-x3D-x3D\"><a href=\"#C-const运用-2-x3D-x3D-检验代码-13-x3D-x3D\" class=\"headerlink\" title=\"C++ const运用_2\t\t\t\t&#x3D;&#x3D;检验代码_13&#x3D;&#x3D;\"></a>C++ const运用_2\t\t\t\t&#x3D;&#x3D;检验代码_13&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() : <span class=\"built_in\">i</span>(<span class=\"number\">2</span>) &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;f()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;f() const&quot;</span> &lt;&lt; endl; &#125; <span class=\"comment\">//这两f函数的默认参数this不一样，一个带有const关键字，一个没有，所以可实现重载</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> A a;\t<span class=\"comment\">//a是有const关键字的对象</span></span><br><span class=\"line\">    a.<span class=\"built_in\">f</span>();\t\t<span class=\"comment\">//调用的是带const关键字的f函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-12\"><a href=\"#输出-12\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">f</span>() <span class=\"type\">const</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-conversion-x3D-x3D-检验代码-14-x3D-x3D\"><a href=\"#C-conversion-x3D-x3D-检验代码-14-x3D-x3D\" class=\"headerlink\" title=\"C++ conversion\t\t\t\t&#x3D;&#x3D;检验代码_14&#x3D;&#x3D;\"></a>C++ conversion\t\t\t\t&#x3D;&#x3D;检验代码_14&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() : <span class=\"built_in\">i</span>(<span class=\"number\">1</span>) &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot; A.i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125; <span class=\"comment\">// A类中的print函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A</span><br><span class=\"line\">&#123; <span class=\"comment\">// B类继承于A类</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>() : <span class=\"built_in\">j</span>(<span class=\"number\">4</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot; B.j = &quot;</span> &lt;&lt; j &lt;&lt; endl; &#125; <span class=\"comment\">// B类中的print函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    B b;</span><br><span class=\"line\">    a.<span class=\"built_in\">print</span>();</span><br><span class=\"line\">    b.<span class=\"built_in\">print</span>();          <span class=\"comment\">//调用的是B类的成员函数print</span></span><br><span class=\"line\">    b.A::<span class=\"built_in\">print</span>();       <span class=\"comment\">//调用的是A类的成员函数print</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *p = (<span class=\"type\">int</span> *)&amp;a; <span class=\"comment\">//这里的&amp;是取地址，不是引用，取a对象的地址，并转换为int类型</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p = &quot;</span> &lt;&lt; p;</span><br><span class=\"line\">    *p = <span class=\"number\">20</span>; <span class=\"comment\">//取了地址后，直接通过地址改变private属性的成员变量的值</span></span><br><span class=\"line\">    a.<span class=\"built_in\">print</span>();</span><br><span class=\"line\">    p = (<span class=\"type\">int</span> *)&amp;b; <span class=\"comment\">//取对象b的地址，该地址如果是int型指针则正好可以控制A类中的i，即子类中的第一个成员变量</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p = &quot;</span> &lt;&lt; p;</span><br><span class=\"line\">    a.<span class=\"built_in\">print</span>();</span><br><span class=\"line\">    *p = <span class=\"number\">123</span>; <span class=\"comment\">//肆意改动对象b的private成员变量的值</span></span><br><span class=\"line\">    p++;      <span class=\"comment\">// p是int型指针，++后可以控制对象b中的j</span></span><br><span class=\"line\">    *p = <span class=\"number\">2333</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p = &quot;</span> &lt;&lt; p;</span><br><span class=\"line\">    b.A::<span class=\"built_in\">print</span>(); <span class=\"comment\">//输出i</span></span><br><span class=\"line\">    b.<span class=\"built_in\">print</span>();    <span class=\"comment\">//输出j</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-13\"><a href=\"#输出-13\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> A.i = <span class=\"number\">1</span></span><br><span class=\"line\"> B.j = <span class=\"number\">4</span></span><br><span class=\"line\"> A.i = <span class=\"number\">1</span></span><br><span class=\"line\">p = <span class=\"number\">0x61fe04</span> A.i = <span class=\"number\">20</span></span><br><span class=\"line\">p = <span class=\"number\">0x61fdfc</span> A.i = <span class=\"number\">20</span></span><br><span class=\"line\">p = <span class=\"number\">0x61fe00</span> A.i = <span class=\"number\">123</span></span><br><span class=\"line\"> B.j = <span class=\"number\">2333</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-virtual关键字-x3D-x3D-检验代码-15-x3D-x3D\"><a href=\"#C-virtual关键字-x3D-x3D-检验代码-15-x3D-x3D\" class=\"headerlink\" title=\"C++ virtual关键字\t\t\t\t&#x3D;&#x3D;检验代码_15&#x3D;&#x3D;\"></a>C++ virtual关键字\t\t\t\t&#x3D;&#x3D;检验代码_15&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() : <span class=\"built_in\">i</span>(<span class=\"number\">123</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::f()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a, b;</span><br><span class=\"line\">    a.<span class=\"built_in\">f</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;sizeof(a) = &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(a) &lt;&lt; endl;<span class=\"comment\">//输出对象a的大小</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *p = (<span class=\"type\">int</span> *)&amp;a;</span><br><span class=\"line\">    <span class=\"type\">int</span> *q = (<span class=\"type\">int</span> *)&amp;b;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;q,*q = &quot;</span> &lt;&lt; *q &lt;&lt; endl;\t<span class=\"comment\">//输出对象a的vtpr指针</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p,*P = &quot;</span> &lt;&lt; *p &lt;&lt; endl;\t<span class=\"comment\">//输出对象b的vtpr指针</span></span><br><span class=\"line\">    p++;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p+1,*P = &quot;</span> &lt;&lt; *p &lt;&lt; endl;\t<span class=\"comment\">//不知道输出了什么玩意的值</span></span><br><span class=\"line\">    p++;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p+2,*P = &quot;</span> &lt;&lt; *p &lt;&lt; endl;\t<span class=\"comment\">//输出对现象a中的i的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-14\"><a href=\"#输出-14\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">f</span>()</span><br><span class=\"line\"><span class=\"built_in\">sizeof</span>(a) = <span class=\"number\">16</span></span><br><span class=\"line\">q,*q = <span class=\"number\">4212016</span></span><br><span class=\"line\">p,*P = <span class=\"number\">4212016</span></span><br><span class=\"line\">p+<span class=\"number\">1</span>,*P = <span class=\"number\">0</span></span><br><span class=\"line\">p+<span class=\"number\">2</span>,*P = <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-魔改vtpr-x3D-x3D-检验代码-16-x3D-x3D\"><a href=\"#C-魔改vtpr-x3D-x3D-检验代码-16-x3D-x3D\" class=\"headerlink\" title=\"C++ 魔改vtpr\t\t\t\t&#x3D;&#x3D;检验代码_16&#x3D;&#x3D;\"></a>C++ 魔改vtpr\t\t\t\t&#x3D;&#x3D;检验代码_16&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>\t\t<span class=\"comment\">//父类A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() : <span class=\"built_in\">i</span>(<span class=\"number\">123</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::f() i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A\t\t<span class=\"comment\">//子类B</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>() : <span class=\"built_in\">j</span>(<span class=\"number\">888</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;B::f() i = &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; j = &quot;</span> &lt;&lt; j &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    B b;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p = (<span class=\"type\">int</span> *)&amp;a;</span><br><span class=\"line\">    <span class=\"type\">int</span> *q = (<span class=\"type\">int</span> *)&amp;b;</span><br><span class=\"line\">    A *aa = &amp;a;</span><br><span class=\"line\">    B *bb = &amp;b;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;object a : &quot;</span> &lt;&lt; endl;\t<span class=\"comment\">//输出父类A的对象a的成员函数f</span></span><br><span class=\"line\">    aa-&gt;<span class=\"built_in\">f</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;object b : &quot;</span> &lt;&lt; endl;\t<span class=\"comment\">//输出子类B的对象b的成员函数f</span></span><br><span class=\"line\">    bb-&gt;<span class=\"built_in\">f</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;b.vtpr to a.vtpr&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;object a : &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    *p = *q;\t<span class=\"comment\">//把子类对象b的vtpr指针赋值给了父类对象a的vtpr指针</span></span><br><span class=\"line\">    aa-&gt;<span class=\"built_in\">f</span>();\t<span class=\"comment\">//此时父类对象a的vtpr已经指向了子类的vtable了所以调用的是子类的虚函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-15\"><a href=\"#输出-15\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object a :</span><br><span class=\"line\">A::<span class=\"built_in\">f</span>() i = <span class=\"number\">123</span></span><br><span class=\"line\">object b :</span><br><span class=\"line\">B::<span class=\"built_in\">f</span>() i = <span class=\"number\">123</span> j = <span class=\"number\">888</span></span><br><span class=\"line\">b.vtpr to a.vtpr</span><br><span class=\"line\">object a :</span><br><span class=\"line\">B::<span class=\"built_in\">f</span>() i = <span class=\"number\">123</span> j = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-覆写-x3D-x3D-检验代码-17-x3D-x3D\"><a href=\"#C-覆写-x3D-x3D-检验代码-17-x3D-x3D\" class=\"headerlink\" title=\"C++ 覆写\t\t\t\t&#x3D;&#x3D;检验代码_17&#x3D;&#x3D;\"></a>C++ 覆写\t\t\t\t&#x3D;&#x3D;检验代码_17&#x3D;&#x3D;</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int i;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    A() : i(123) &#123;&#125;</span><br><span class=\"line\">    virtual void f() &#123; cout &lt;&lt; &quot;A::f() i = &quot; &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class B : public A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int j;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    B() : j(888) &#123;&#125;</span><br><span class=\"line\">    virtual void f() &#123; A::f(); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    B b;</span><br><span class=\"line\">    b.f();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-16\"><a href=\"#输出-16\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::f() i = 123</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-引用再体验-x3D-x3D-检验代码-18-x3D-x3D\"><a href=\"#C-引用再体验-x3D-x3D-检验代码-18-x3D-x3D\" class=\"headerlink\" title=\"C++ 引用再体验\t\t\t\t&#x3D;&#x3D;检验代码_18&#x3D;&#x3D;\"></a>C++ 引用再体验\t\t\t\t&#x3D;&#x3D;检验代码_18&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> array[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>&amp; <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;arry[3] = &quot;</span> &lt;&lt; array[<span class=\"number\">3</span>] &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"built_in\">func</span>(<span class=\"number\">3</span>) = <span class=\"number\">24</span>;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;arry[3] = &quot;</span> &lt;&lt; array[<span class=\"number\">3</span>] &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-17\"><a href=\"#输出-17\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arry[<span class=\"number\">3</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">arry[<span class=\"number\">3</span>] = <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-匿名变量-x3D-x3D-检验代码-19-x3D-x3D\"><a href=\"#C-匿名变量-x3D-x3D-检验代码-19-x3D-x3D\" class=\"headerlink\" title=\"C++ 匿名变量\t\t\t\t&#x3D;&#x3D;检验代码_19&#x3D;&#x3D;\"></a>C++ 匿名变量\t\t\t\t&#x3D;&#x3D;检验代码_19&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">f</span>(i * <span class=\"number\">3</span>);\t\t<span class=\"comment\">//系统会自动创建一个匿名变量来保存这个运算的值</span></span><br><span class=\"line\">    <span class=\"built_in\">f</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-18\"><a href=\"#输出-18\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-静态成员变量-x3D-x3D-检验代码-20-x3D-x3D\"><a href=\"#C-静态成员变量-x3D-x3D-检验代码-20-x3D-x3D\" class=\"headerlink\" title=\"C++ 静态成员变量\t\t\t\t&#x3D;&#x3D;检验代码_20&#x3D;&#x3D;\"></a>C++ 静态成员变量\t\t\t\t&#x3D;&#x3D;检验代码_20&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;i = <span class=\"number\">10</span>;&#125;\t<span class=\"comment\">//这句只是赋值，不是初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::f() i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> ii)</span> </span>&#123; i = ii; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> A::i;\t<span class=\"comment\">// A类中的静态成员i的定义也是初始化（只是没有赋初值）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a, b;</span><br><span class=\"line\">    a.<span class=\"built_in\">set</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\">    b.<span class=\"built_in\">f</span>();\t\t<span class=\"comment\">//如果i是public的，还可以直接b.i或者A::i来访问i都一样</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-19\"><a href=\"#输出-19\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">f</span>() i = <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-自动类型转换-x3D-x3D-检验代码-21-x3D-x3D\"><a href=\"#C-自动类型转换-x3D-x3D-检验代码-21-x3D-x3D\" class=\"headerlink\" title=\"C++ 自动类型转换\t\t\t\t&#x3D;&#x3D;检验代码_21&#x3D;&#x3D;\"></a>C++ 自动类型转换\t\t\t\t&#x3D;&#x3D;检验代码_21&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>;\t<span class=\"comment\">//B类的前项声明，免得因为B类写在A类后面导致编译器找不到B类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:\t<span class=\"comment\">//在这个构造函数前加上关键字explicit后，将使该函数不能用于自动类型转换，然后报错</span></span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">const</span> B &amp;b) &#123; cout &lt;&lt; <span class=\"string\">&quot;A::A(const b &amp;b)&quot;</span> &lt;&lt; endl; &#125; <span class=\"comment\">// A类有一个可以通过B类对象构造自身对象的构造函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(A a)</span> <span class=\"comment\">// f函数需要一个A类的对象</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;f()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    B b;</span><br><span class=\"line\">    <span class=\"built_in\">f</span>(b); <span class=\"comment\">//给f函数传一个B类的对象b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-20\"><a href=\"#输出-20\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">A</span>(<span class=\"type\">const</span> b &amp;b)\t<span class=\"comment\">//默认调用的了A那个构造函数先通过B类的对象构造处一个匿名的A类的对象再传给f函数</span></span><br><span class=\"line\"><span class=\"built_in\">f</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"widget":{"top":[{"class_name":{"id_name":null,"name":null,"icon":null,"html":null}}],"bottom":[{"class_name":"user-map","id_name":"user-map","name":"访客地图","icon":"fas fa-heartbeat","order":null,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}}},"cover":false,"excerpt":"","more":"<h2 id=\"基本概念-1——杂项篇\"><a href=\"#基本概念-1——杂项篇\" class=\"headerlink\" title=\"基本概念_1——杂项篇\"></a>基本概念_1——杂项篇</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个类应该要有的函数：</span><br><span class=\"line\"><span class=\"code\">\tdefault constructor //默认构造函数</span></span><br><span class=\"line\"><span class=\"code\">\tvirtual destructor\t//带virtual关键字的析构函数</span></span><br><span class=\"line\"><span class=\"code\">\tcopy constructor\t//拷贝构造函数</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"What-to-do-not-How-to-do\"><a href=\"#What-to-do-not-How-to-do\" class=\"headerlink\" title=\"What to do not How to do\"></a>What to do not How to do</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\tClass 类，指具有相似特点的东西的抽象集合，类是虚的，是一种观点，像是对象的说明</span></span><br><span class=\"line\"><span class=\"code\">\tObject 实体，对象，是实例化的Class，是实的</span></span><br><span class=\"line\"><span class=\"code\">\tInterface 接口，即对象接收外部消息的途径，方法。主要是为了低耦合，隐藏内部实现</span></span><br><span class=\"line\"><span class=\"code\">注：Interface也可以理解成一个类对外公开的部分，可以是成员函数，也可以是成员变量</span></span><br><span class=\"line\"><span class=\"code\">\tEncapsulation 封装，把数据和对数据的操作放在对象里，隐藏数据的细节，其他对象只能通过受允许的操作来操作数据</span></span><br><span class=\"line\"><span class=\"code\">\t:: 域名解析符，用法&lt;Class Name&gt;::&lt;function name&gt;   不加Class Name时意味着为全局函数，同理 ::a++，意味着全局变量a++</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"一些基本常识：\"><a href=\"#一些基本常识：\" class=\"headerlink\" title=\"一些基本常识：\"></a>一些基本常识：</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\t&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tcode;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">可以使用大括号来把一些代码括起来，其中的变量仅在大括号中存在，离开大括号就会自动销毁</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">\t# 开头的代码是编译预处理指令 如：#ifndef xxx 如果没有定义xxx #define xxx就定义xxx  #endif 定义结束</span></span><br><span class=\"line\"><span class=\"code\">\t注：#ifndef 常用于可能会出现反复定义的情况时 如：a.h中include了b.h，b.h中include了a.h，导致a.h中的定义出现不止一次</span></span><br><span class=\"line\"><span class=\"code\">因此引入了标准头文件结构避免出现重复定义：</span></span><br><span class=\"line\"><span class=\"code\">\t#ifndef HEADER_FLAG</span></span><br><span class=\"line\"><span class=\"code\">\t#define HEADER_FLAG</span></span><br><span class=\"line\"><span class=\"code\">\t//code</span></span><br><span class=\"line\"><span class=\"code\">\t#endif</span></span><br><span class=\"line\"><span class=\"code\">\t一个头文件只放一个Class的声明（Class大概是只有声明）</span></span><br><span class=\"line\"><span class=\"code\">\t&quot;xxx.h&quot;\t用&quot;&quot;括起来的头文件，编译器会去当前目录查找 </span></span><br><span class=\"line\"><span class=\"code\">\t&lt;xxx.h&gt;\t用&lt;&gt;括起来的头文件，编译器会去系统目录查找</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;xxx&gt;\tc++特有的插入方法</span></span><br><span class=\"line\"><span class=\"code\">\t*.h\t文件中放声明（只有头没有body）declaration  **全局变量的declaration用关键字 extern &lt;var type&gt; &lt;var name&gt;**</span></span><br><span class=\"line\"><span class=\"code\">该方式等价于对编译器说，我知道有一个全局变量，叫什么，什么类型，但我不知道它在哪里，然后编译器就会给它留个位置</span></span><br><span class=\"line\"><span class=\"code\">\t头文件 Header == interface</span></span><br><span class=\"line\"><span class=\"code\">\t*.cpp 文件中放定义（有头有body，实现）  definition，一个.cpp文件就是一个编译单元，在编译环节，编译器只会关注这一个编译单元，所以就是存在和其他编译单元同名的全局变量也是能通过编译的</span></span><br><span class=\"line\"><span class=\"code\">\tAbstract 抽象，只看某个层次，屏蔽其他部分的做法就叫抽象</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一般来说a.h文件是用来给调用a.cpp文件中的实现的其他文件看的，a.cpp文件是用来实现的。但也有特例，如内联函数的定义就需要直接写在.h文件中</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a><a href=\"#%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0\">内联函数</a></h3><h4 id=\"编译过程：\"><a href=\"#编译过程：\" class=\"headerlink\" title=\"编译过程：\"></a>编译过程：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">\tb(编译预处理) --&gt; c[编译]</span><br><span class=\"line\">\tc --&gt; d[汇编]</span><br><span class=\"line\">\td --&gt; e(链接)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">\ta(.ii)--&gt;b[.o]</span><br><span class=\"line\">\tb--&gt;c[.s]</span><br><span class=\"line\">\tc--&gt;d(.out)</span><br><span class=\"line\">\tc--&gt;e(.exe)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"g-命令\"><a href=\"#g-命令\" class=\"headerlink\" title=\"g++命令\"></a>g++命令</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--save-temps  保留中间文件</span><br><span class=\"line\">-Wall  输出所有可能的warning</span><br><span class=\"line\">-c 只编译不链接</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基本概念-2——变量篇\"><a href=\"#基本概念-2——变量篇\" class=\"headerlink\" title=\"基本概念_2——变量篇\"></a>基本概念_2——变量篇</h2><h4 id=\"常识\"><a href=\"#常识\" class=\"headerlink\" title=\"常识\"></a>常识</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">    local variable 本地变量，函数中定义的变量</span></span><br><span class=\"line\"><span class=\"code\">    parameters\t函数参数</span></span><br><span class=\"line\"><span class=\"code\">两种variable都是一样的，仅在对应函数运行时存在，放在本地</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a><strong>重点</strong></h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">field （一般）成员变量，类中的变量。存在于对应实例化的对象中，如，a，b都为A类的对象，则a中的成员变量值与b中可以不同</span><br></pre></td></tr></table></figure>\n\n<p>[参看检验代码_1 ](#分析类不同实例的成员变量值\t\t\t&#x3D;&#x3D;检验代码_1&#x3D;&#x3D;)</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：c++对象中实际仅有成员变量，也就是说，A a，实际a指向的地址中只有a的成员变量，没有成员函数在里面</span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_2](#探究c++对象实质\t\t\t&#x3D;&#x3D;检验代码_2&#x3D;&#x3D;)</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\tfield_function 成员函数，类的函数，属于类，不属于任何某个对象（实例）,相当于是该类所有对象的公共函数，但它（成员函数）会知道自己本次控制的是哪一个对象的成员变量</span></span><br><span class=\"line\"><span class=\"code\">注：实际就是采用了  this 是一个hidden parameter this的类型就是成员函数所属的类的指针，也就是说，所有的成员变量系统实际上是默认在其前面加上了this-&gt;，当然主动加上也是可以的</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">\t对于成员变量和成员函数可以这样理解，动物会运动，运动就是一种动物类的成员函数，如鸟会飞，飞这个动作不是属于某个鸟的，而是鸟这类的。但每一个动物的大小，颜色属于成员变量，如某只鸟的颜色，大小，</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基本概念-3——构造析构篇\"><a href=\"#基本概念-3——构造析构篇\" class=\"headerlink\" title=\"基本概念_3——构造析构篇\"></a>基本概念_3——构造析构篇</h2><h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor 构造，构造函数。无返回类型和返回值，且与类同名。在对象实例化时自动调用（无法干预），也在此时传参数给构造函数。其他同成员函数</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"例子-如：\"><a href=\"#例子-如：\" class=\"headerlink\" title=\"例子 如：\"></a>例子 如：</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Tree</span>(<span class=\"type\">int</span> x);\t<span class=\"comment\">//类Tree的构造函数，这里的形参名必须和构造函数定义处的形参一致\t</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Tree::<span class=\"built_in\">Tree</span>(<span class=\"type\">int</span> x)&#123;\t\t<span class=\"comment\">//实现一些初始化的操作，实例化对象时调用</span></span><br><span class=\"line\">    i = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Tree <span class=\"title\">t</span><span class=\"params\">(<span class=\"number\">12</span>)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">destructor 析构，析构函数。无返回类型，且与类同名，但前面多一个tilde ~符号。在对象要被结束掉时调用，无参数。析构意味着该对象的空间即将被收回，此时调用析构函数。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"例子-如：-1\"><a href=\"#例子-如：-1\" class=\"headerlink\" title=\"例子 如：\"></a>例子 如：</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Cat</span>(<span class=\"type\">int</span> init);</span><br><span class=\"line\">    ~<span class=\"built_in\">Cat</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Cat::<span class=\"built_in\">Cat</span>(<span class=\"type\">int</span> init)&#123; <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    i = init;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Cat::~<span class=\"built_in\">Cat</span>()&#123;\t\t<span class=\"comment\">//析构函数，一般执行释放系统资源等操作</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Game Over&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"> \tcout &lt;&lt; <span class=\"string\">&quot;before create &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">    \t<span class=\"function\">Cat <span class=\"title\">cat</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\t&#125;   </span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;after destructure&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-4——对象初始化-amp-amp-new和delete\"><a href=\"#基础概念-4——对象初始化-amp-amp-new和delete\" class=\"headerlink\" title=\"基础概念_4——对象初始化 &amp;&amp; new和delete\"></a>基础概念_4——对象初始化 &amp;&amp; new和delete</h2><h4 id=\"常识：\"><a href=\"#常识：\" class=\"headerlink\" title=\"常识：\"></a>常识：</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c++中的struct和class基本是一样，都可以称为类，只是struct在没有声明访问属性的地方默认为public，而class默认为private。一般只有当类非常简单时用struct，其他情况都用class</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">X</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"type\">float</span> f;</span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">X x1 = &#123;<span class=\"number\">1</span>, <span class=\"number\">1.1</span>, <span class=\"string\">&#x27;c&#x27;</span>&#125;;\t<span class=\"comment\">//结构体初始化的一种方式</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"默认构造函数\"><a href=\"#默认构造函数\" class=\"headerlink\" title=\"默认构造函数\"></a>默认构造函数</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\tdefault constructor \t没有参数，有参数就不是默认构造函数</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass Y&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tint a;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tY(int a);\t\t//有参数，不是默认构造函数</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;;</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">\tclass B&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tint b;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tB();\t\t//没有参数，是默认</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"new与delete\"><a href=\"#new与delete\" class=\"headerlink\" title=\"new与delete\"></a>new与delete</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new------------对应-------------delete</span><br><span class=\"line\">new <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>&gt;</span></span> 申请对应类的空间并返回指向改空间的地址</span><br><span class=\"line\">new <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>&gt;</span></span>[<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">num</span>&gt;</span></span>]------------对应-----------delete [] <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现流程\"><a href=\"#实现流程\" class=\"headerlink\" title=\"实现流程\"></a>实现流程</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">\ta(new) --&gt; b[系统申请一片内存空间]</span><br><span class=\"line\">\tb --&gt; c[调用类对应的构造函数]</span><br><span class=\"line\">\tc --&gt; d(返回该空间的地址)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">\ta(delete) --&gt; b[调用类的析构函数]</span><br><span class=\"line\">\tb --&gt; c(回收内存空间)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拓展：\"><a href=\"#拓展：\" class=\"headerlink\" title=\"拓展：\"></a>拓展：</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c++运行时，会有一个inch table用于记录动态申请空间的变量表，记录申请的大小（单位是byte）和地址（首地址），所以若指向某数组空间的指针++后，调用delete时会报错，因为inch table中只记录了首地址</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> * psome = <span class=\"keyword\">new</span> <span class=\"type\">int</span> [<span class=\"number\">10</span>];\t\t<span class=\"comment\">//new 10个int </span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] psome;\t\t\t<span class=\"comment\">//new时使用了[]，delete时也要用[]，不带[]只会执行第一个对象的析构函数，[]会提示系统，这里要析构多个对象，且会从最后一个对象开始析构</span></span><br><span class=\"line\">注<span class=\"number\">1</span>：无论使不使用[]，空间都会收回，收回空间查inch table就可以知道要收回的大小和起始地址了，能运行但会死循环</span><br><span class=\"line\">注<span class=\"number\">2</span>：<span class=\"keyword\">delete</span>可以<span class=\"keyword\">delete</span> <span class=\"literal\">NULL</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_3](#解密new与delete\t测试1\t不带[]\t\t&#x3D;&#x3D;检验代码_3&#x3D;&#x3D;)</p>\n<p>[参考检验代码_4](#解密new与delete\t测试2\t带[]\t&#x3D;&#x3D;检验代码_4&#x3D;&#x3D;)</p>\n<h2 id=\"基础概念-5——访问控制-amp-amp-初始化列表（成员变量初始化首选，且父类的初始化只能初始化列表，否则父类得有默认构造函数）\"><a href=\"#基础概念-5——访问控制-amp-amp-初始化列表（成员变量初始化首选，且父类的初始化只能初始化列表，否则父类得有默认构造函数）\" class=\"headerlink\" title=\"基础概念_5——访问控制&amp;&amp;初始化列表（成员变量初始化首选，且父类的初始化只能初始化列表，否则父类得有默认构造函数）\"></a>基础概念_5——访问控制&amp;&amp;初始化列表（成员变量初始化首选，且父类的初始化只能初始化列表，否则父类得有默认构造函数）</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 基础知识：</span><br><span class=\"line\"> \tpublic 公共的，任何人都可以访问</span><br><span class=\"line\"> \tprivate 私有的，只有这个类的成员函数可以访问这个类的成员变量或成员函数，子类也不能直接访问，这是对类来说的，如果是同一个类的不同对象则它们之间可以相互访问对方的private 成员变量</span><br><span class=\"line\"> \tprotected 受保护的，只有这个类自己和它的子类可以访问，在其他地方则不能直接使用</span><br><span class=\"line\"> \tfriends\t朋友，声明别的类，别的函数，或者别的类的某个函数是朋友，这样朋友就可以访问该类的private。一般用在运算符重载</span><br><span class=\"line\">注：c++的访问控制只在编译环节存在，运行时其实没有访问控制。运行时对象b也可以访问对象a的私有变量和函数</span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_5](#解密new与delete\t\t\t\t&#x3D;&#x3D;检验代码_5&#x3D;&#x3D;)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">初始化：</span><br><span class=\"line\">类中的成员变量可以在构造函数中实现“初始化”，这样写实际是赋值，并非初始化，当成员变量是一个类，系统会去找该类的默认构造函数，当其没有默认构造函数时，报错。</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> *p;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">A</span>()&#123;p=<span class=\"number\">0</span>;i=<span class=\"number\">0</span>;&#125;\t<span class=\"comment\">//在构造函数中初始化成员变量p和i</span></span><br><span class=\"line\">\t\t~<span class=\"built_in\">A</span>();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">使用初始化列表 格式：\t构造函数(形参):&lt;成员变量<span class=\"number\">1</span>&gt;(初始值<span class=\"number\">1</span>), &lt;成员变量<span class=\"number\">2</span>&gt;(初始值<span class=\"number\">2</span>)&#123;&#125;\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">name</span>(args)[:init-list]&#123;&#125;</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> *p;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">A</span>():<span class=\"built_in\">p</span>(<span class=\"number\">0</span>), <span class=\"built_in\">i</span>(<span class=\"number\">0</span>)&#123;&#125; <span class=\"comment\">//在构造函数:后使用初始化列表，这样写，p和i的初始化会在构造函数之前完成</span></span><br><span class=\"line\">\t\t~<span class=\"built_in\">A</span>();</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">注：当初始化</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"friend的使用\"><a href=\"#friend的使用\" class=\"headerlink\" title=\"friend的使用\"></a>friend的使用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注2：前项声明，一种用于通知编译器的方式，告诉编译器，有一个叫X的东西存在，因为Y中使用了X，不这样写会报错</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">X</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Y</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(X*)</span></span>;\t\t<span class=\"comment\">//任何指针的大小都是一样的，且没有用到X内部的成员，因此前项声明可以使用</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">X</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">(X*, <span class=\"type\">int</span>)</span></span>;\t<span class=\"comment\">//函数朋友</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">Y::f</span><span class=\"params\">(X*)</span></span>;\t<span class=\"comment\">//某个类的某个函数朋友，此处为Y类的f函数是X类朋友</span></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">Z</span>;\t\t<span class=\"comment\">//类/结构体朋友</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">h</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特别注意\"><a href=\"#特别注意\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实际上在c++中主要拿到对象的地址就可以为所欲为，哪怕成员变量是private一样想改就改</span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_14](#C++ conversion\t\t\t\t&#x3D;&#x3D;检验代码_14&#x3D;&#x3D;)</p>\n<h2 id=\"基础概念-6——组合，继承，软件重用\"><a href=\"#基础概念-6——组合，继承，软件重用\" class=\"headerlink\" title=\"基础概念_6——组合，继承，软件重用\"></a>基础概念_6——组合，继承，软件重用</h2><h3 id=\"类的组合-composition\"><a href=\"#类的组合-composition\" class=\"headerlink\" title=\"类的组合  composition\"></a>类的组合  composition</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将一些已有的类的对象组合在一起拼凑成一个类，称为组合</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\t现在有一个class engine的对象和class tyre的对象，把它们组合在一起，拼凑成一个class car</span></span><br><span class=\"line\"><span class=\"code\">即：</span></span><br><span class=\"line\"><span class=\"code\">\tclass中的成员变量可以是其他的class的对象</span></span><br><span class=\"line\"><span class=\"code\">分类：</span></span><br><span class=\"line\"><span class=\"code\">\tFully:当一个类就是另一个类的一部分时称为fully\t就像肚子里的孩子</span></span><br><span class=\"line\"><span class=\"code\">\tBy reference:当一个类知道另一个类在哪里，能调用其方法，但其并非是它的一部分时称为by reference\t就像已经生出来的孩子</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">在代码中，fully实际就是成员变量是一个类，而by reference是一个类的指针，指向的。</span></span><br><span class=\"line\"><span class=\"code\">\t一般当一个类是另一个类的一部分时用fully形式，当一个类属于另一个类但不是其一部分时用by reference形式</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\t人是一个类，书包是一个类，心脏是一个类，则心脏用fully形式，书包用by reference形式</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;...&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Currency</span>&#123;...&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SavingAccount</span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">    \t<span class=\"built_in\">SavingsAccount</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name, <span class=\"type\">const</span> <span class=\"type\">char</span>* address, <span class=\"type\">int</span> cents); <span class=\"comment\">//构造函数，有参数所以不是默认构造函数</span></span><br><span class=\"line\">    \t~<span class=\"built_in\">SavingAccount</span>();\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;\t\t<span class=\"comment\">//一般成员函数</span></span><br><span class=\"line\">   \t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">    \tPerson m_saver;\t\t<span class=\"comment\">//fully形式的组合</span></span><br><span class=\"line\">    \tCurrency m_balance;\t<span class=\"comment\">//fully形式的组合</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">SavingAccount::<span class=\"built_in\">SavingAccount</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* name, <span class=\"type\">const</span> <span class=\"type\">char</span>* address, <span class=\"type\">int</span> cents):<span class=\"built_in\">m_saver</span>(name, address), <span class=\"built_in\">m_balance</span>(<span class=\"number\">0</span>,cents)&#123;&#125;; \t<span class=\"comment\">//SavingAccount的构造函数，需要负责把其fully形式的成员变量初始化，类成员变量也需要，否则系统会去找其类成员变量的默认构造函数</span></span><br><span class=\"line\">SavingAccount::<span class=\"built_in\">print</span>()&#123;</span><br><span class=\"line\">    m_saver.<span class=\"built_in\">print</span>();\t<span class=\"comment\">//对象自己调用自己的print()</span></span><br><span class=\"line\">    m_balance.<span class=\"built_in\">print</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类的继承-inheritance\"><a href=\"#类的继承-inheritance\" class=\"headerlink\" title=\"类的继承 inheritance\"></a>类的继承 inheritance</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用一个现有的类来改造，形成一个新的类</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tstudent继承于person则称student是person的超类，因为student继承于person则person有的student都有，但student还有一些person没有的，所以称student是person的superset，即超集</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">分类：</span><br><span class=\"line\"><span class=\"code\">\tBase\t基类</span></span><br><span class=\"line\"><span class=\"code\">\tSuper\t超类</span></span><br><span class=\"line\"><span class=\"code\">\tParent\t父类</span></span><br><span class=\"line\"><span class=\"code\">\tDerived\t派生类</span></span><br><span class=\"line\"><span class=\"code\">\tSub\t\t次类</span></span><br><span class=\"line\"><span class=\"code\">\tChild\t子类</span></span><br><span class=\"line\"><span class=\"code\">使用方法：class B : public A&#123;&#125;;\t\tB继承于A</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_6](#继承初体验\t\t\t\t&#x3D;&#x3D;检验代码_6&#x3D;&#x3D;)</p>\n<h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\t父类有的成员，子类继承后都会有，但是父类中private的成员子类不能直接用。相当于父辈给子辈留了一笔钱，但钱由信托保管，子辈不能直接使用。编译通不过。</span></span><br><span class=\"line\"><span class=\"code\">注：protected属性的成员则子类可以直接访问，相当于父类留了一些让子类访问父类private成员的接口，但这些接口别人不能使用</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"子类父类构造和析构的顺序\"><a href=\"#子类父类构造和析构的顺序\" class=\"headerlink\" title=\"子类父类构造和析构的顺序\"></a>子类父类构造和析构的顺序</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造</span><br><span class=\"line\"><span class=\"code\">\t先调用父类构造函数，然后调用子类构造函数，</span></span><br><span class=\"line\"><span class=\"code\">注：此时若父类没有默认构造函数，则需要在子类的构造函数中使用初始化列表的方式初始化父类且需要给其传参数，即使用构造函数初始化，而非默认构造函数，不这样的话，若父类无默认初始化构造函数编译时就会报错</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">析构</span><br><span class=\"line\"><span class=\"code\">\t先调用子类的析构函数，再调用父类的析构函数</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_7](#继承再体验\t\t\t\t&#x3D;&#x3D;检验代码_7&#x3D;&#x3D;)</p>\n<h3 id=\"名字隐藏（C-独有）\"><a href=\"#名字隐藏（C-独有）\" class=\"headerlink\" title=\"名字隐藏（C++独有）\"></a>名字隐藏（C++独有）</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\t当父类中有overload的成员函数，且和子类中的成员函数同名时，c++会自动隐藏父类中的那些成员函数，只保留的子类自己的成员函数</span></span><br><span class=\"line\"><span class=\"code\">注1：此时想调用父类的那些函数得用域解析符 ::</span></span><br><span class=\"line\"><span class=\"code\">注2：当子类和父类有同名且同参数的成员函数时，默认使用的是子类的成员函数，如果想要使用父类的则需要使用 域解析符 ::</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;...&#125;;</span></span><br><span class=\"line\"><span class=\"code\">\tclass B : public A &#123;...&#125;;</span></span><br><span class=\"line\"><span class=\"code\">\tB b;</span></span><br><span class=\"line\"><span class=\"code\">\tb.func();\t//使用B中的成员函数func</span></span><br><span class=\"line\"><span class=\"code\">\tb.A::func();//使用A中的成员函数func</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_8](#c++名字隐藏\t\t\t\t&#x3D;&#x3D;检验代码_8&#x3D;&#x3D;)</p>\n<h2 id=\"基础概念-7——函数重载-amp-amp-内联函数\"><a href=\"#基础概念-7——函数重载-amp-amp-内联函数\" class=\"headerlink\" title=\"基础概念_7——函数重载 &amp;&amp;内联函数\"></a>基础概念_7——函数重载 &amp;&amp;内联函数</h2><h3 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重载——overloading</span><br><span class=\"line\"><span class=\"code\">\t指一些函数可以具有相同的函数名，但它们的参数不一样（类型，个数...），调用函数时编译器会根据给出的参数来判断调用的哪一个函数</span></span><br><span class=\"line\"><span class=\"code\">注：返回类型不能作为构成overloading的条件</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">缺省值——default arguments（少用）</span><br><span class=\"line\"><span class=\"code\">\t可以预先给函数的形参赋上值</span></span><br><span class=\"line\"><span class=\"code\">\t写法：</span></span><br><span class=\"line\"><span class=\"code\">\t\tint func(int i, int j, int k=1, int m=2)&#123;&#125;;</span></span><br><span class=\"line\"><span class=\"code\">注1：没有缺省值的形参要放在有缺省值的形参前面</span></span><br><span class=\"line\"><span class=\"code\">注2：如果有多个编译单元，即.cpp文件，记得一起编译，否则会找不到定义</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_9](#C++重载\t\t\t\t&#x3D;&#x3D;检验代码_9&#x3D;&#x3D;)</p>\n<h3 id=\"特别注意：\"><a href=\"#特别注意：\" class=\"headerlink\" title=\"特别注意：\"></a>特别注意：</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">缺省值一般是写在.h文件中，即写在函数声明中，当然函数的声明也可以写在.cpp文件中（这样的话，假如别人的函数实际上是没有缺省值的，但你在自己的.cpp文件中给它加上一个带有缺省值的声明也是可以的，且此时仅自己的.cpp文件中声明生效），且如果没有声明，只有定义也可以直接写在定义中</span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_10](#C++缺省声明探究\t\t\t\t&#x3D;&#x3D;检验代码_10&#x3D;&#x3D;)</p>\n<h3 id=\"内联函数-1\"><a href=\"#内联函数-1\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提出原因：</span><br><span class=\"line\"><span class=\"code\">\t函数调用涉及一系列的压栈出栈操作，在存在同一个函数大量调用时，影响效率，因此提出了内联函数</span></span><br><span class=\"line\"><span class=\"code\">使用方法：</span></span><br><span class=\"line\"><span class=\"code\">\tinline &lt;callback type&gt; &lt;function_name&gt; ()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"code\">原理：</span></span><br><span class=\"line\"><span class=\"code\">\t当编译器检测到inline关键词时会将inline函数的代码嵌入到调用它的地方，且仍保持inline函数的独立性（函数有自己的变量，空间...）</span></span><br><span class=\"line\"><span class=\"code\">与C的#define的不同：</span></span><br><span class=\"line\"><span class=\"code\">\t#define不做类型检查，inline定义的函数会对参数做类型检查</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\t#define f(a) (a) + (a)\t\t//不会检查传来的参数是什么类型</span></span><br><span class=\"line\"><span class=\"code\">\tinline int f(int a)&#123;return a*2;&#125; //会检查传来的参数是否是int类型</span></span><br><span class=\"line\"><span class=\"code\">注：</span></span><br><span class=\"line\"><span class=\"code\">\t当用户定义的inline太过复杂时，编译器可能会拒绝嵌入</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i*<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"built_in\">f</span>(a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际上现在f(a)等价于 a + a，编译器会自己优化成这样</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特别注意：-1\"><a href=\"#特别注意：-1\" class=\"headerlink\" title=\"特别注意：\"></a>特别注意：</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内联函数的要求：</span><br><span class=\"line\"><span class=\"code\">\t当内联函数需要被其他编译单元调用时，需要将内联函数的函数体（即函数实现，定义）放在.h文件中，因为编译器要在调用的地方嵌入内联函数的代码，而编译器同一时间只能处理一个编译单元，所以必须在预处理时将内联代码放入调用其的编译单元内</span></span><br><span class=\"line\"><span class=\"code\">注1：只在本编译单元调用inline函数时，不用写到.h文件中（废话）</span></span><br><span class=\"line\"><span class=\"code\">注2：非常小的函数，编译器自动inline，太大的函数，inline无效，递归函数不要inline。建议只有两三行，且调用次数多的函数使用inline</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_11](#C++其他编译单元调用内联函数\t\t\t\t&#x3D;&#x3D;检验代码_11&#x3D;&#x3D;)</p>\n<h3 id=\"类中的内联函数\"><a href=\"#类中的内联函数\" class=\"headerlink\" title=\"类中的内联函数\"></a>类中的内联函数</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当在类中直接给出成员函数的body时，编译器默认为inline</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::print&quot;</span> &lt;&lt; endl; &#125; \t<span class=\"comment\">//默认为内联函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>;\t\t\t\t\t\t\t\t<span class=\"comment\">//一般成员函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inline_test</span><span class=\"params\">()</span></span>;\t\t\t<span class=\"comment\">//这也是inline型，只是放在类外面</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set_i</span><span class=\"params\">(<span class=\"type\">int</span> ii)</span> </span>&#123; i = ii; &#125;\t\t\t\t <span class=\"comment\">// inline型成员函数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">&#125; <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">A::test</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; \t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//一般成员函数的body</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;A::test()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">A::inline_test</span><span class=\"params\">()</span>   <span class=\"comment\">//inline型成员函数的body，inline关键字不能省</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;inline A::inline_test()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：这样写，从运行的效果来说，如果inline型的成员变量访问该类的成员变量，实际相当于直接访问成员变量，如a.set<span class=\"emphasis\">_i(10)运行效率等价于a.i=10</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-8——const\"><a href=\"#基础概念-8——const\" class=\"headerlink\" title=\"基础概念_8——const\"></a>基础概念_8——const</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基础知识：</span><br><span class=\"line\"><span class=\"code\">\t被const关键词修饰后，变量不能进行修改和再次赋值，但对于c++来说，const修饰后仍然还是变量，不是常数，仍然遵循一般变量的规则</span></span><br><span class=\"line\"><span class=\"code\">extern关键词可以声明该变量是一个定义在某处的变量</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\textern const int bufsize; //bufsize是某处的一个变量，且在此处是const的</span></span><br><span class=\"line\"><span class=\"code\">const的使用：</span></span><br><span class=\"line\"><span class=\"code\">\t如果该变量用const修饰，且编译前已经知道了其具体值，此时则可以用于给数组确定大小，若编译前不知道值，则编译时报错，因为编译器不知道给该数组分配多大的空间</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tconst int n = 12;</span></span><br><span class=\"line\"><span class=\"code\">\tint array[n];\t\t//可以使用</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">\tint x;cin&gt;&gt;x;</span></span><br><span class=\"line\"><span class=\"code\">\tconst int size = x;</span></span><br><span class=\"line\"><span class=\"code\">\tint array[x];\t//报错，编译器不知道应该分配多大空间给array</span></span><br><span class=\"line\"><span class=\"code\">同理，用extern const int bufsize; 这样也不能用来给数组分配空间，因为编译器不知道bufsize到底有多大</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指针和const\"><a href=\"#指针和const\" class=\"headerlink\" title=\"指针和const\"></a>指针和const</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span>* <span class=\"type\">const</span> q = <span class=\"string\">&quot;abc&quot;</span>;\t\t<span class=\"comment\">//q这个指针是const的，即其指向的地址不能改变</span></span><br><span class=\"line\">*q = <span class=\"string\">&#x27;c&#x27;</span>;\t<span class=\"comment\">//可以</span></span><br><span class=\"line\">q++;\t\t<span class=\"comment\">//不可以，其实就是指针的内容不能变，但指向的地址的内容可以变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* p = <span class=\"string\">&quot;ABCD&quot;</span>;\t<span class=\"comment\">//q这个指针指向的内容是const的</span></span><br><span class=\"line\">*p = <span class=\"string\">&#x27;b&#x27;</span>;\t<span class=\"comment\">//不可以，报错，即这个内容是不能改变的\t实际是不能通过p指针来修改那个内存单元，而非是那个内存单元不可修改</span></span><br><span class=\"line\">p++;\t<span class=\"comment\">//可以，指针的内容是可以变的</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-总结-x3D-x3D\"><a href=\"#x3D-x3D-总结-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;总结&#x3D;&#x3D;\"></a>&#x3D;&#x3D;总结&#x3D;&#x3D;</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> 在*前时，指针指向的内容是<span class=\"type\">const</span>的，在*后时，指针是<span class=\"type\">const</span>的。</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"string\">&quot;Bob&quot;</span>, <span class=\"number\">200</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> Person* p = &amp;p1;\t<span class=\"comment\">//指针指向的对象为const</span></span><br><span class=\"line\">\tPerson <span class=\"type\">const</span>* p = &amp;p1;\t<span class=\"comment\">//指针指向的对象为const</span></span><br><span class=\"line\">\tPerson *<span class=\"type\">const</span> p = &amp;p1;\t<span class=\"comment\">//指针为const</span></span><br><span class=\"line\">注<span class=\"number\">1</span>：当指向的对象为<span class=\"type\">const</span>时，并非说对象不可修改，而是指不能被这个指针所修改</span><br><span class=\"line\">    <span class=\"comment\">//一般用在，如要传一个对象给其他人，但直接传对象太麻烦了，要拷贝...，传指针快还方便，但害怕别人用传过去的指针修改对象，所以可以传const指针，这样就不能通过该指针修改了</span></span><br><span class=\"line\">    </span><br><span class=\"line\">注<span class=\"number\">2</span>：用指针指向写死的字符串时默认是<span class=\"type\">const</span>\t如： <span class=\"type\">char</span> *s = <span class=\"string\">&quot;hello world&quot;</span>;这字符串是会放到代码段中，然后s指向其，编译器默认其为<span class=\"type\">const</span></span><br><span class=\"line\"><span class=\"comment\">//但char s[] = &quot;hello world&quot;;则可以，因为系统会把代码段中的&quot;hello world&quot;拷贝到堆栈中的s数组中</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_12](#C++ const运用\t\t\t\t&#x3D;&#x3D;检验代码_12&#x3D;&#x3D;)</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在函数后面加上const，一般出现在类中，意味着该函数不能修改该类的成员变量的值</span><br><span class=\"line\">注：此时该函数声明和定义的地方都得加上const</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;</span></span><br><span class=\"line\"><span class=\"code\">\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\tA();</span></span><br><span class=\"line\"><span class=\"code\">\t\t~A();</span></span><br><span class=\"line\"><span class=\"code\">\t\tvoid test_func() const;\t\t//声明一个带有const关键字的成员函数</span></span><br><span class=\"line\"><span class=\"code\">\tprivate:</span></span><br><span class=\"line\"><span class=\"code\">\t\tint i;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;;</span></span><br><span class=\"line\"><span class=\"code\">\tvoid A::test_func() const&#123;\t//带有const关键字的成员函数的定义</span></span><br><span class=\"line\"><span class=\"code\">\t\ti++;\t//报错，const类型的成员函数无法修改成员变量的值</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">注1：实现原理实际上是编译器把this改成了带const关键字的this，所以该函数通过this无法修改成员变量，因为const &lt;pointer_type&gt;* p，p所指内容无法通过p修改</span></span><br><span class=\"line\"><span class=\"code\">注2：如果在一个对象前面加上const则该对象就没法被修改了</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tconst A a;\t//a的成员变量无法被修改，这样做没有意义</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用const来实现重载\"><a href=\"#使用const来实现重载\" class=\"headerlink\" title=\"使用const来实现重载\"></a>使用const来实现重载</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实际上就是默认参数this带了const关键字，所以可以重载</span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_13](#C++ const运用_2\t\t\t\t&#x3D;&#x3D;检验代码_13&#x3D;&#x3D;)</p>\n<h3 id=\"特别注意-1\"><a href=\"#特别注意-1\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当对象带有const关键字时，要求将其所有成员变量在对象在初始化时都初始化（写在构造函数里面初始化和使用初始化列表初始化都可）。并且，如果要调用某个成员函数则该成员函数必须得有带const关键字的重载</span><br><span class=\"line\"><span class=\"code\">\t实际上是因为当一对象带有const关键字时，其调用成员函数时，它传递的this是带有const关键字。因此当其调用某一成员函数，且该成员函数没有带const的重载时，相当于找不到对应函数</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">当对象有的成员变量是带有const关键字时，则这些成员变量需要在构造函数中初始化，且只能使用初始化列表初始化（只要成员变量带了const关键字，都必须使用初始化列表初始化）</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-9——引用reference\"><a href=\"#基础概念-9——引用reference\" class=\"headerlink\" title=\"基础概念_9——引用\treference\"></a>基础概念_9——引用\treference</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引用相当于给一个东西又取了一个名字</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tchar c;</span></span><br><span class=\"line\"><span class=\"code\">\tchar&amp; r = c;\t//即c和r是同一个字符的两个不同的名字</span></span><br><span class=\"line\"><span class=\"code\">使用方法：</span></span><br><span class=\"line\"><span class=\"code\">\t一般情况：</span></span><br><span class=\"line\"><span class=\"code\">\t\ttype&amp; refname = name;</span></span><br><span class=\"line\"><span class=\"code\">\t\t类型&amp; 引用的名字 = 被引用的目标;</span></span><br><span class=\"line\"><span class=\"code\">\t参数表或成员变量时：</span></span><br><span class=\"line\"><span class=\"code\">\t\ttype&amp; refname</span></span><br><span class=\"line\"><span class=\"code\">注1：引用在定义时必须初始化，且让其初始化的东西必须是在内存空间有地址的</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tint&amp; z = i*3;\t//报错，因为i*3只有结果，但结果没有储存在内存中</span></span><br><span class=\"line\"><span class=\"code\">和const搭配</span></span><br><span class=\"line\"><span class=\"code\">\tconst int&amp; z = x;\t//z是x的引用但不能通过z去修改x的值 即z是read-only reference</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注2：&amp;也可以用在函数上</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tint&amp; func(); \t//即最后func函数返回的是一个int类型的引用</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注3：&amp;不能当作overload的参考，即如果想重载，但两个函数只有&amp;的区别，则报错</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tvoid func(int&amp; a);</span></span><br><span class=\"line\"><span class=\"code\">\tvoid func(int a);</span></span><br><span class=\"line\"><span class=\"code\">\tint x = 2;</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(x);\t//报错，因为编译器不知道到底要找哪一个func函数</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注4：</span><br><span class=\"line\"><span class=\"code\">\t实际上，reference的实现就是靠的const point，只是为了少一些*所以提出了reference，且一旦实现了引用就没办法去看这个引用自己的地址了，以后对其的操作都是在对其引用对象操作</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特别注意-2\"><a href=\"#特别注意-2\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">references和pointres的区别:</span><br><span class=\"line\"><span class=\"code\">\tref不能是null，point可以是</span></span><br><span class=\"line\"><span class=\"code\">\tref依赖于一个已经存在的变量，point则是独立于其他变量</span></span><br><span class=\"line\"><span class=\"code\">\tref一旦初始化后，就不能再改变引用对象，point可以改变指向对象</span></span><br><span class=\"line\"><span class=\"code\">\tref不能引用ref，point可以指向另外的point</span></span><br><span class=\"line\"><span class=\"code\">重点：</span></span><br><span class=\"line\"><span class=\"code\">   \t有指针的引用，但没有引用的指针，就近原则，*离p近，p就是指针。&amp;离p近，p就是引用</span></span><br><span class=\"line\"><span class=\"code\">   \t即：</span></span><br><span class=\"line\"><span class=\"code\">   \t\tint&amp;* p;\t //报错，这里的意思是*p的类型是int ref的，即这个指针是int ref类型，出现了引用的指针</span></span><br><span class=\"line\"><span class=\"code\">   \t\tvoid func(int*&amp; p);\t //可以，这里指p是ref，它引用的变量是int ref类型的，即指针的引用</span></span><br><span class=\"line\"><span class=\"code\">  \t没有引用类型的数组，因为ref时间根本就不是实体，因此不能有数组</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-10——转换-conversion，造型-amp-amp-多态性-amp-amp-覆写-overriding\"><a href=\"#基础概念-10——转换-conversion，造型-amp-amp-多态性-amp-amp-覆写-overriding\" class=\"headerlink\" title=\"基础概念_10——转换 conversion，造型 &amp;&amp; 多态性  &amp;&amp; 覆写 overriding\"></a>基础概念_10——转换 conversion，造型 &amp;&amp; 多态性  &amp;&amp; 覆写 overriding</h2><h3 id=\"转换-amp-amp-造型\"><a href=\"#转换-amp-amp-造型\" class=\"headerlink\" title=\"转换&amp;&amp;造型\"></a>转换&amp;&amp;造型</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果B类继承于A类，则主要是A可以使用的地方，B都可以使用。即子类的对象都可以当父类对象看待这叫upcast，向上造型</span><br><span class=\"line\">把父类当子类看待叫downcast，有风险报错</span><br><span class=\"line\">cast 造型和类型转换有区别</span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_14](#C++ conversion\t\t\t\t&#x3D;&#x3D;检验代码_14&#x3D;&#x3D;)</p>\n<h3 id=\"多态-polymorphism\"><a href=\"#多态-polymorphism\" class=\"headerlink\" title=\"多态  polymorphism\"></a>多态  polymorphism</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtual关键字：</span><br><span class=\"line\"><span class=\"code\">\t成员函数前带有virtual意味着，如果该类的子类中重新写的该成员函数，则子类的那个成员函数和父类的成员函数有关系，且只要继承树中有一个祖先的函数带了virtual，其子子孙孙的那个同名函数都会默认带上virtual不管用户自己写不写上virtual。一般都写上方便看</span></span><br><span class=\"line\"><span class=\"code\">多态的实现：</span></span><br><span class=\"line\"><span class=\"code\">\tupcast，向上造型，把子类对象当父类对象看待</span></span><br><span class=\"line\"><span class=\"code\">\tDynamic binding，动态绑定，运行时才知道到底调用的哪个函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子-2\"><a href=\"#例子-2\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">render</span><span class=\"params\">(Shape* p)</span></span>&#123;</span><br><span class=\"line\">    p-&gt;<span class=\"built_in\">render</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//即这个p-&gt;render函数实际调用的是哪个render函数要得到运行时，传的哪个shape或shape类的子类的对象才知道，它会去调用该对象对应的render，这就叫多态，这里p就是多态的</span></span><br><span class=\"line\"><span class=\"comment\">//这里只要是shape或其子类都可以作为参数传进来</span></span><br><span class=\"line\"><span class=\"comment\">//而virtual的意思就是告诉编译器，不要把后面的render函数写死了，实际调用的哪一个render得看运行时是那个对象</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"x3D-x3D-特别注意-x3D-x3D\"><a href=\"#x3D-x3D-特别注意-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意&#x3D;&#x3D;</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注1：</span><br><span class=\"line\"><span class=\"code\">\t任意一个类只要有带有virtual的成员函数则其大小就要比正常的类大且此时编译器会在实例化对象时给对象加上一个隐藏的成员变量vtpr指针，该指针指向这个类的vtable表，所有同一个类的实例化对象都指向同一个表，表中就是该类的各个虚函数的地址。而多态就是把子类的vtable中的虚函数地址换成了子类自己实现的那个虚函数的地址，如果子类没有自己声明那个虚函数则默认填上父类的那个虚函数的地址</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_15](#C++ virtual关键字\t\t\t\t检验代码_15)</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注2：</span><br><span class=\"line\"><span class=\"code\">\t通过赋值将子类对象赋值即 = 给父类对象，则父类的对象的vtpr仍不变。但可以通过指针来强行改变对象的vtpr指向。如果是通过指向子类对象的指针赋值给指向父类的指针，则实际是指针指向变了，俩对象都没变化</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_16](#C++ 魔改vtpr\t\t\t\t&#x3D;&#x3D;检验代码_16&#x3D;&#x3D;)</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注3：</span><br><span class=\"line\"><span class=\"code\">\t析构函数一般要用virtual格式，因为当把一个子类对象传给一个父类指针时，若delete该指针，当析构函数不是虚函数时，调用的就是父类的析构函数去析构的子类对象（静态绑定编译器直接把对应函数地址写死在那），只有当析构函数是虚函数时，才调用的是子类的析构函数（动态绑定编译器搞出个vtpr，用的时候去找vtable看用哪个函数）</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"覆写\"><a href=\"#覆写\" class=\"headerlink\" title=\"覆写\"></a>覆写</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当子类覆写父类的成员函数后，又想使用父类的成员函数时要用 域解析符 ::</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tvirtual void f();</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tclass B : public A&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tvirtual void f()&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t\tA::f();</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_17](#C++ 覆写\t\t\t\t&#x3D;&#x3D;检验代码_17&#x3D;&#x3D;)</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：</span><br><span class=\"line\"><span class=\"code\">\t当父类中的某成员函数即有重载（overload）又有覆写（override），则子类必须覆写所有的重载，否则会发送name hidden（函数隐藏）</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">重载和覆盖（覆写）的区别：</span><br><span class=\"line\"><span class=\"code\">\t虚函数是基类希望派生类重新定义的函数，派生类重新定义基类虚函数的做法叫做覆盖；重载就在允许在相同作用域中存在多个同名的函数，这些函数的参数表不同。重载的概念不属于面向对象编程，编译器根据函数不同的形参表对同名函数的名称做修饰，然后这些同名函数就成了不同的函数。重载的确定是在编译时确定，是静态的；虚函数则是在运行时动态确定。</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-11——引用再体验\"><a href=\"#基础概念-11——引用再体验\" class=\"headerlink\" title=\"基础概念_11——引用再体验\"></a>基础概念_11——引用再体验</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注1：</span><br><span class=\"line\"><span class=\"code\">\t当类中的成员变量是引用类型时，必须使用初始化列表来初始化该成员变量</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tprivate:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tint&amp; i;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tX(int&amp; a);</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tX::X(int&amp; a) : i(a) &#123;&#125;\t\t//初始化列表也可以写在类外面</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-特别注意-x3D-x3D-1\"><a href=\"#x3D-x3D-特别注意-x3D-x3D-1\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意&#x3D;&#x3D;</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">\t当函数要返回一个ref（引用）时，更倾向于返回一个非本地变量（因为离开该函数，本地变量就不存在了），然后就出现了，一个函数的返回值做了赋值符号的左值</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(3) = 21;</span></span><br><span class=\"line\"><span class=\"code\">注：</span></span><br><span class=\"line\"><span class=\"code\">\t当函数的形参是ref类型时，向函数传递temporary value（就是那些在内存空间没有储存的地址的值，如23，i*2这种实际上是系统用一个const int型的匿名变量来接值，若非要用一个参数是const int&amp; 的函数来接也是可以实现的😂）</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_18](#C++ 引用再体验\t\t\t\t&#x3D;&#x3D;检验代码_18&#x3D;&#x3D;)</p>\n<p>[参考检验代码_19](#C++ 匿名变量\t\t\t\t&#x3D;&#x3D;检验代码_19&#x3D;&#x3D;)</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结论：</span><br><span class=\"line\"><span class=\"code\">\t在给一些函数传递对象时的方法</span></span><br><span class=\"line\"><span class=\"code\">A a;\t\t\t//a是A类的对象</span></span><br><span class=\"line\"><span class=\"code\">法1：</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(A x);\t//func函数的形参格式</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(a);\t//直接传对象，系统会再拷贝一次对象a，占空间，耗时长</span></span><br><span class=\"line\"><span class=\"code\">法2：</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(A* x);</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(&amp;a);\t//传a的地址，不安全，func可以通过x指针修改a中成员变量</span></span><br><span class=\"line\"><span class=\"code\">法3：</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(const A* x);\t</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(&amp;a);\t//传a的地址，且不能通过x指针修改a中的成员变量</span></span><br><span class=\"line\"><span class=\"code\">法4：通法</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(const A&amp; x);</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(a);\t//同上，只是不用在func函数中写很多的*，因为指针要使用时得用*来表示该操作是对指向空间的操作</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意区分函数返回的是值还是变量</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;...&#125;;</span></span><br><span class=\"line\"><span class=\"code\">\tA func()&#123;\t//这个返回的是一个变量，返回值可以作 = 的左值，但是作完左值后，就没办法控制这个变量了，它相当于消失了</span></span><br><span class=\"line\"><span class=\"code\">\t\tA a;</span></span><br><span class=\"line\"><span class=\"code\">\t\treturn a;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tint func()&#123;\t\t//这个返回的是一个值 10，返回值不可以作 = 的左值</span></span><br><span class=\"line\"><span class=\"code\">\t\tint i = 10;</span></span><br><span class=\"line\"><span class=\"code\">\t\treturn 10;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-12——拷贝构造\"><a href=\"#基础概念-12——拷贝构造\" class=\"headerlink\" title=\"基础概念_12——拷贝构造\"></a>基础概念_12——拷贝构造</h2><h3 id=\"x3D-x3D-特别注意-x3D-x3D-2\"><a href=\"#x3D-x3D-特别注意-x3D-x3D-2\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意&#x3D;&#x3D;</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">初始化initialization和赋值assignment的区别</span><br><span class=\"line\"><span class=\"code\">\tint i = 10;\t\t//初始化且赋值，初始化只能有一次</span></span><br><span class=\"line\"><span class=\"code\">\ti = 12;\t\t\t//赋值，赋值可以有多次</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注1：c++中既可以使用 = 来初始化对象，又可以使用 () 来初始化，使用 = 时需要存在一个构造函数的参数是 = 的右值</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tclass A &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tA();</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tA(int i);</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tA a; //调用A()构造函数</span></span><br><span class=\"line\"><span class=\"code\">\tA a = 10; //调用A(int i)构造函数</span></span><br><span class=\"line\"><span class=\"code\">\tA a(10); //等价于上一句</span></span><br><span class=\"line\"><span class=\"code\">注2：</span></span><br><span class=\"line\"><span class=\"code\">\t当初始化时使用另外一个同一个类的对象来初始化一个对象，这就叫拷贝构造</span></span><br><span class=\"line\"><span class=\"code\">拷贝构造函数，自己不定义时，编译器会自动给出（默认拷贝每一个成员变量，如果有另外的类的对象，则会用对应的那个类的拷贝构造来拷贝这个成员变量，这是成员对成员的拷贝，即有成员变量是类的对象时是通过拷贝构造函数来拷贝的，不是字节对字节的拷贝），格式就是构造函数只是参数是这类的对象的const 引用</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass A &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tA();\t//默认构造函数</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tA(const A&amp; );\t//拷贝构造函数，&amp; 不能省，不然编译器会告诉你，你写错了🤣，因为不写&amp;就会反复发生拷贝构造还没法跳出循环</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tA(int i);\t//自定义构造函数</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tA a; //调用A()构造函数</span></span><br><span class=\"line\"><span class=\"code\">\tA a = 10; //调用A(int i)构造函数</span></span><br><span class=\"line\"><span class=\"code\">\tA a(10); //等价于上一句 </span></span><br><span class=\"line\"><span class=\"code\">注3：当类中的成员变量有指针时，拷贝构造函数默认会把拷贝出来的对象的那个指针成员变量指向，被拷贝的对象的那个对应的指针指向的内存空间</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">拷贝构造发生在用一个对象去初始化的另一个对象时，有显然情景和隐藏情景</span><br><span class=\"line\">显然情景：</span><br><span class=\"line\"><span class=\"code\">\tA a;</span></span><br><span class=\"line\"><span class=\"code\">\tA b = a;\t\t//显然用一个对象去初始化另一个对象</span></span><br><span class=\"line\"><span class=\"code\">\tA b(a);\t\t//等价于上一条语句，只是写的方式不一样</span></span><br><span class=\"line\"><span class=\"code\">隐藏情景——1：</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(A b);</span></span><br><span class=\"line\"><span class=\"code\">\tA a;</span></span><br><span class=\"line\"><span class=\"code\">\tfunc(a);\t//在函数调用传递参数时发生拷贝构造</span></span><br><span class=\"line\"><span class=\"code\">隐藏情景——2：</span></span><br><span class=\"line\"><span class=\"code\">\tA func(...);</span></span><br><span class=\"line\"><span class=\"code\">\tA a = func(...);\t//在函数返回时发生拷贝构造</span></span><br><span class=\"line\"><span class=\"code\">注：</span></span><br><span class=\"line\"><span class=\"code\">\t把拷贝构造函数放在private下面，可以让别人没法用该类的对象来构造另一个对象，不能拿来直接当函数参数传递</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-13——静态-Static\"><a href=\"#基础概念-13——静态-Static\" class=\"headerlink\" title=\"基础概念_13——静态 Static\"></a>基础概念_13——静态 Static</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static——c：</span><br><span class=\"line\"><span class=\"code\">\t一个全局变量是static的指该变量只在那个.c文件中有效</span></span><br><span class=\"line\"><span class=\"code\">\t一个本地变量是static的指该本地变量具有持久储存（离开这个函数，进入其他函数，该变量依然存在不会被销毁，实际上一个本地变量加上static后就是全局变量）</span></span><br><span class=\"line\"><span class=\"code\">\t一个函数是static的指该函数只能在那个.c文件中被访问</span></span><br><span class=\"line\"><span class=\"code\">static——c++：</span></span><br><span class=\"line\"><span class=\"code\">\t带static关键字的本地变量，意味着该变量持久储存，但只能在该函数内部访问</span></span><br><span class=\"line\"><span class=\"code\">\t带static关键字的成员变量，意味着该变量可以被该类所有的对象访问，即被所有实例共享，但该变量只会初始化一次</span></span><br><span class=\"line\"><span class=\"code\">\t带static关键字的成员函数，意味着该函数可以被该类所有的对象使用，即被所有的实例共享，但该函数只能访问带有static关键字的成员变量</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">全局变量的构造函数在程序运行时，main函数执行前执行。它的析构函数在程序结束后main函数结束时调用</span><br><span class=\"line\">注：</span><br><span class=\"line\"><span class=\"code\">\tc++多个文件中全局变量的初始化是没有固定顺序的，所以当全局变量之前相互有依赖关系时，要么把有依赖的全局变量全写在用一个文件中，要么别这样写</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"static-成员变量（实际上就是把那个变量搞成了全局变量，且声明其是某个类的全局变量）\"><a href=\"#static-成员变量（实际上就是把那个变量搞成了全局变量，且声明其是某个类的全局变量）\" class=\"headerlink\" title=\"static 成员变量（实际上就是把那个变量搞成了全局变量，且声明其是某个类的全局变量）\"></a>static 成员变量（实际上就是把那个变量搞成了全局变量，且声明其是某个类的全局变量）</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：</span><br><span class=\"line\"><span class=\"code\">\t直接写static int i;这是声明，不是定义，编译能过，但链接过不了，这语句类似于extern int i;即告诉编译器有一个i存在，但在哪并没有说</span></span><br><span class=\"line\"><span class=\"code\">实际使用需在某处给出static成员变量的定义</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;</span></span><br><span class=\"line\"><span class=\"code\">\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\tA();</span></span><br><span class=\"line\"><span class=\"code\">\t\tvirtual ~A();</span></span><br><span class=\"line\"><span class=\"code\">\t\tA(const A&amp; );</span></span><br><span class=\"line\"><span class=\"code\">\tprivate:</span></span><br><span class=\"line\"><span class=\"code\">\t\tstatic int i;\t//A类中带有static关键字的i的声明</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tint A::i;\t//i的定义，没有这句，链接报错，提示找不到i，这句就是正常的定义，除了多了个类名和域解析符，也写成 int A::i = 123;都可以</span></span><br><span class=\"line\"><span class=\"code\">带static关键字的成员变量，是类的所有对象共享的，且怎能在它定义处初始化，不能用初始化列表来初始化</span></span><br><span class=\"line\"><span class=\"code\">注：如果成员变量带有static关键字则哪怕没有实例化任何该类的对象，仍然可以通过&lt;class_name&gt;::&lt;var_name&gt;();来使用该成员变量</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_20](#C++ 静态成员变量\t\t\t\t&#x3D;&#x3D;检验代码_20&#x3D;&#x3D;)</p>\n<h3 id=\"static成员函数\"><a href=\"#static成员函数\" class=\"headerlink\" title=\"static成员函数\"></a>static成员函数</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果成员函数带有static关键字则哪怕没有实例化任何该类的对象，仍然可以通过<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class_name</span>&gt;</span></span>::<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">func_name</span>&gt;</span></span>();调用该成员函数</span><br><span class=\"line\"></span><br><span class=\"line\">注：静态的成员函数只能访问静态的成员变量，连this这个隐藏变量都不能使用（也就是说静态成员函数没有隐藏变量this），因为你甚至可以不实例化对象来调用它，要是它能访问this岂不是找了个寂寞🙌</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-13——运算符重载\"><a href=\"#基础概念-13——运算符重载\" class=\"headerlink\" title=\"基础概念_13——运算符重载\"></a>基础概念_13——运算符重载</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c++中能够被重载的运算符：</span><br><span class=\"line\"><span class=\"bullet\">\t+</span> - * / % ^ &amp; | ~</span><br><span class=\"line\"><span class=\"code\">\t= &lt; &gt; += -= *= /= %= ^= &amp;= |=</span></span><br><span class=\"line\"><span class=\"code\">\t&lt;&lt; &gt;&gt; &gt;&gt;= &lt;&lt;= == != &lt;= &gt;= ! &amp;&amp; || ++ --</span></span><br><span class=\"line\"><span class=\"code\">\t, -&gt;* -&gt; () []</span></span><br><span class=\"line\"><span class=\"code\">\toperator new\toperator delete\t\t//你没看错，new和delete都能重载😮</span></span><br><span class=\"line\"><span class=\"code\">\toperator new[]\toperator delete[]</span></span><br><span class=\"line\"><span class=\"code\">c++中不能重载的运算符：</span></span><br><span class=\"line\"><span class=\"code\">\t.\t.*\t::\t?:</span></span><br><span class=\"line\"><span class=\"code\">\tsizeof\ttypeid</span></span><br><span class=\"line\"><span class=\"code\">\tstatic_cast\tdynamic_cast const_cast reinterpret_cast</span></span><br><span class=\"line\"><span class=\"code\">注1：运算符重载只针对已有的运算符，你不能自己搞一个颜文字来重载。运算符重载只是针对自己定义的类或者其他什么自定义数据类型（枚举...）</span></span><br><span class=\"line\"><span class=\"code\">注2：不能重载基础的数据类型的运算符，什么int的加法重载成减法那是不行的</span></span><br><span class=\"line\"><span class=\"code\">注3：不能重载操作数个数，即不能把二目运算符改成三目运算符，还不能改运算的优先级</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运算符重载实际上就是为那个运算符写一个特别的函数，该函数前面要使用operator关键字</span><br><span class=\"line\">该函数可以作为某个类的成员函数</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tconst String String::operator +(const String&amp; that);</span></span><br><span class=\"line\"><span class=\"code\">该函数返回一个带const关键字的String类的对象，需要一个String对象参数（+ 需要两个算子，但String是一个类，所以当其对象使用自己所属类的成员函数时，自带一个this，因此只需要一个参数就可以了）</span></span><br><span class=\"line\"><span class=\"code\">该函数也可以作为全局函数</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tconst String operator +(const String&amp; r, const String&amp; l);</span></span><br><span class=\"line\"><span class=\"code\">参数列表中用的带const关键字的引用是为了防止在该函数内部对对象的成员变量进行修改（加法是不会修改两算子的值），因为这不是某个类的成员函数，所有需要两个算子</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注：这里返回值也带const的原因是因为防止出现返回结果作左值的情况</span><br><span class=\"line\">如：出现</span><br><span class=\"line\"><span class=\"code\">\ta + b = 6;\t这种操作，编译通不过</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-特别注意-x3D-x3D-3\"><a href=\"#x3D-x3D-特别注意-x3D-x3D-3\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意&#x3D;&#x3D;</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在c++中运算符的左边算子称为receiver，编译器通过左边算子来确定，这个运算符应该用哪个重载的函数</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"function\">Integer <span class=\"title\">x</span><span class=\"params\">(<span class=\"number\">1</span>)</span>, <span class=\"title\">y</span><span class=\"params\">(<span class=\"number\">5</span>)</span>, z</span>;\t<span class=\"comment\">//初始化x, y, z（为赋值）</span></span><br><span class=\"line\">\tx + y;\t<span class=\"comment\">//实际等价于x.operator+(y)，receiver是x</span></span><br><span class=\"line\">\tz = x + y;\t<span class=\"comment\">//使用的是Interger的 + ，receiver是x</span></span><br><span class=\"line\">\tz = x + <span class=\"number\">3</span>;\t<span class=\"comment\">//使用的是Interger的 + ，receiver是x，且3会被先构造成一个你匿名的Interger的对象（Interger有一个参数为int的构造函数）</span></span><br><span class=\"line\">\tz = <span class=\"number\">3</span> + y; \t<span class=\"comment\">//用的是int的+，receiver是3，此时需要int有一个通过Integer构造int的构造函数，否则报错，编译不过</span></span><br><span class=\"line\"></span><br><span class=\"line\">一目运算符</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Integer</span>&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"type\">const</span> Integer <span class=\"keyword\">operator</span>-() <span class=\"type\">const</span>&#123;\t<span class=\"comment\">//只需要一个算子的运算符，作为成员函数时不需要参数，因为默认有个this，函数返回值带const是为了防止返回结果作左值，函数带const是为了不修改作运算的对象的值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">Integer</span>(-i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">z = -x;\t<span class=\"comment\">//等价于z.operator=(x.operator-());</span></span><br><span class=\"line\"></span><br><span class=\"line\">注：一目运算符使用全局函数重载时，一般要在操作的类中使用关键字<span class=\"keyword\">friend</span>声明</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">Integer</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">friend</span> <span class=\"type\">const</span> Integer <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Integer&amp; lhs, <span class=\"type\">const</span> Integer&amp; rhs);\t<span class=\"comment\">//声明这个函数是friend，其可以访问Integer类的成员变量（private的成员变量也可以访问）</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">const</span> Integer <span class=\"keyword\">operator</span>+(<span class=\"type\">const</span> Integer&amp; lhs, <span class=\"type\">const</span> Integer&amp; rhs)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">Integer</span>(lhs.i + rhs.i);</span><br><span class=\"line\">\t&#125;\t<span class=\"comment\">//重载 + 的函数的body，返回值加const防止返回结果作左值，形参加const防止修改算子的值</span></span><br><span class=\"line\">\tz = x + y;\t<span class=\"comment\">//可以，完全符合这个全局重载函数的参数列表</span></span><br><span class=\"line\">\tz = x + <span class=\"number\">3</span>;\t<span class=\"comment\">//可以，receiver是x，Integer类有一个自己的运算符重载函数，会先把3构造成一个匿名的Integer对象，在调用全局重载函数</span></span><br><span class=\"line\">\tz = <span class=\"number\">3</span> + x;\t<span class=\"comment\">//可以，会默认把3构造成一个匿名的Integer对象，再调用这个全局重载函数</span></span><br><span class=\"line\">\tz = <span class=\"number\">3</span> + <span class=\"number\">7</span>;\t<span class=\"comment\">//可以，receiver是3，调用int::operator+()把结果10返回来后用构造函数构造成一个Integer之后在赋值给z</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关于是否把对一个类的运算符重载函数做成成员函数：</span><br><span class=\"line\"><span class=\"bullet\">1.</span>\t单目运算符重载应该做成成员函数</span><br><span class=\"line\"><span class=\"bullet\">2.</span>\t= () [] -&gt; -&gt;* 这几个必须做成成员函数</span><br><span class=\"line\"><span class=\"bullet\">3.</span>\t其他的所有二目运算符做成非成员函数（使用friend关键字在类中声明）</span><br><span class=\"line\"></span><br><span class=\"line\">关于运算符重载函数的参数设置：</span><br><span class=\"line\"><span class=\"bullet\">1.</span>\t如果该运算符不会修改算子，则形参要用const修饰，如：+ - =</span><br><span class=\"line\"><span class=\"bullet\">2.</span>\t如果该运算符要修改算子，则形参不能有const修饰，如：++ -- </span><br><span class=\"line\"><span class=\"bullet\">3.</span>\t如果运算结果不能作左值，则函数需要用const修饰，如：+ -</span><br><span class=\"line\"><span class=\"bullet\">4.</span>\t如果运算结果可以作左值，则函数不要用const修饰，如：[]</span><br><span class=\"line\"><span class=\"bullet\">5.</span>\t如果是类成员函数，且运算结果是会修改该类对象，则该函数不能用const来修饰</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常见的运算符原型\"><a href=\"#常见的运算符原型\" class=\"headerlink\" title=\"常见的运算符原型\"></a>常见的运算符原型</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>\t+-*/%&amp;|~</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">const</span> T <span class=\"title\">operatorX</span><span class=\"params\">(<span class=\"type\">const</span> T&amp; i, <span class=\"type\">const</span> T&amp;r)</span><span class=\"type\">const</span></span>;</span><br><span class=\"line\"><span class=\"number\">2.</span>\t! &amp;&amp; || &lt; &lt;= == &gt;= &gt;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> <span class=\"built_in\">operatorX</span>(<span class=\"type\">const</span> T&amp;i, <span class=\"type\">const</span> T&amp;r)<span class=\"type\">const</span>;</span><br><span class=\"line\"><span class=\"number\">3.</span>\t[]</span><br><span class=\"line\">\tT&amp; T::<span class=\"keyword\">operator</span>[](<span class=\"type\">int</span> index);</span><br><span class=\"line\"><span class=\"number\">4.</span>\t++</span><br><span class=\"line\">prefix ++（++在算子前）：</span><br><span class=\"line\">    <span class=\"type\">const</span> T&amp; <span class=\"keyword\">operator</span>++();\t<span class=\"comment\">//返回的是加完后的结果，如：++a，返回的是a加完后的结果</span></span><br><span class=\"line\">定义的例子(具体怎么实现得看具体对象)：</span><br><span class=\"line\"><span class=\"type\">const</span> Integer&amp; Integer::<span class=\"keyword\">operator</span>++()&#123;\t<span class=\"comment\">//这里函数返回值带ref更方便，要是直接返回一个对象则会发生拷贝构造</span></span><br><span class=\"line\">    *<span class=\"keyword\">this</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">postifx ++（++在算子后）:</span><br><span class=\"line\">\t<span class=\"type\">const</span> T <span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>); <span class=\"comment\">//返回的是加完前的结果，如：a++，返回的是a加完前的a</span></span><br><span class=\"line\">定义的例子：</span><br><span class=\"line\"><span class=\"type\">const</span> Integer Integer::<span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>)&#123;\t<span class=\"comment\">//这里函数返回值没有带ref是因为不能返回一个本地变量的ref，因为离开了这个函数，本地变量就不存在了</span></span><br><span class=\"line\">    <span class=\"function\">Integer <span class=\"title\">old</span><span class=\"params\">(*<span class=\"keyword\">this</span>)</span></span>;\t<span class=\"comment\">//拷贝构造</span></span><br><span class=\"line\">    ++(*<span class=\"keyword\">this</span>);\t\t<span class=\"comment\">//调用上面的prefix ++函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> old;\t\t<span class=\"comment\">//返回一个对象，在发生一次拷贝构造</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">5.</span>\t--</span><br><span class=\"line\">道理同++</span><br><span class=\"line\">\t<span class=\"type\">const</span> T&amp; <span class=\"keyword\">operator</span>--();</span><br><span class=\"line\">\t<span class=\"type\">const</span> T&amp; <span class=\"keyword\">operator</span>--(<span class=\"type\">int</span>);</span><br><span class=\"line\">注：++和--中prefix和postfix参数不一样是为了做重载，编译时，调用postfix函数编译器会自动给一个 <span class=\"number\">0</span> 作为参数</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">6.</span> [] index运算符</span><br><span class=\"line\">    返回的是成员的引用，因为可以用来作左值</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"奇淫巧计\"><a href=\"#奇淫巧计\" class=\"headerlink\" title=\"奇淫巧计\"></a>奇淫巧计</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于关系运算符：&gt; &lt; &gt;= &lt;= == !=\t只需要定义&lt;和==即可，其他的都可以通过这俩来推出</span><br><span class=\"line\">如：</span><br><span class=\"line\">bool Integer::operator==( const Integer&amp; rhs) const &#123;</span><br><span class=\"line\"><span class=\"code\">\treturn i == rhs.i;\t\t\t//定义了 ==</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">bool Integer::operator!=( const Integer&amp; rhs) const &#123;</span></span><br><span class=\"line\"><span class=\"code\">\treturn !(*this == rhs);\t\t//调用了 == </span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">bool Integer::operator&lt;( const Integer&amp; rhs) const &#123;</span></span><br><span class=\"line\"><span class=\"code\">\treturn i &lt; rhs.i;\t\t\t//定义了 &lt;</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">bool Integer::operator&gt;( const Integer&amp; rhs) const &#123;</span></span><br><span class=\"line\"><span class=\"code\">\treturn rhs &lt; *this;\t//调用了 &lt;</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">bool Integer::operator&lt;=( const Integer&amp; rhs) const &#123;</span></span><br><span class=\"line\"><span class=\"code\">\treturn !(rhs &lt; *this); //调用了 &lt;</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">bool Integer::operator&gt;=( const Integer&amp; rhs) const &#123;</span></span><br><span class=\"line\"><span class=\"code\">\treturn !(*this &lt; ths); //调用了 &lt;</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注：这样写的好处是，以后要修改代码，只需要改两处地方即可</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果没有给一个类的赋值运算符重载函数，则编译器会自动创造一个赋值运算符的重载</span><br><span class=\"line\">T::operator=(T)&#123;&#125;进行一个memberwise的赋值操作，即有成员变量是其他类则要调用那个类的赋值运算符重载函数</span><br><span class=\"line\"></span><br><span class=\"line\">注1：如果要自己实现赋值运算符的重载函数，则该函数一定要是成员函数，且是对自己赋值然后返回自己</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"code\">\tT&amp; T::operator=(const T&amp; rhs)&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tif(this != &amp;rhs)&#123;\t//当自己不是赋值给自己时才做赋值操作，否则直接返回自己</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t//assignmeng的具体实现</span></span><br><span class=\"line\"><span class=\"code\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t\treturn *this;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">注2：if检查在类有动态申请内存（有指针成员变量）的时候要写，否容易出现问题</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass A&#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\tprivate:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tchar *p;</span></span><br><span class=\"line\"><span class=\"code\">\t\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tA&amp; operator=(const&amp; A that)&#123;\t\t//此时当出现某对象自己给自己赋值时报错，因为p已经被delete了，that.p不存在，直接报错，要不就读到别人地址了</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t\tdelete p;</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t\tp = new [strlen(that.p)+1];</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t\tstrcpy(p, that.p);</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t\treturn *this;</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\t自动类型转换</span><br><span class=\"line\"><span class=\"code\">\t当一个函数f的参数需要类A的变量，但类A有一个参数为类B的构造函数，此时给f一个B的对象，仍然不会出错。因为系统会自动调用A的对应的那个构造函数来通过B的对象来构造一个A的临时匿名对象传给f函数，如果不想系统自动转换则需要在该构造函数前加上explicit关键字</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"bullet\">2.</span>\t默认的自动转换（=&gt; 的意思相当于是可以把 =&gt; 左边的东西直接传给右边）：</span><br><span class=\"line\"><span class=\"code\">\tPrimitive（小范围 =&gt; 大范围）：</span></span><br><span class=\"line\"><span class=\"code\">\t\tchar =&gt; short =&gt; int =&gt; float =&gt; double</span></span><br><span class=\"line\"><span class=\"code\">\t\t\t\t\t =&gt; int =&gt; long</span></span><br><span class=\"line\"><span class=\"code\">\tImplicit(对于单独某个类来说)：</span></span><br><span class=\"line\"><span class=\"code\">\t\tT =&gt; T&amp;,\t绑定</span></span><br><span class=\"line\"><span class=\"code\">\t\tT&amp; =&gt; T,\t初始化/赋值</span></span><br><span class=\"line\"><span class=\"code\">\t\tT* =&gt; void*,\t去除指针类型，简称退型，指针仍指向那片地址空间，但指针没有类型了</span></span><br><span class=\"line\"><span class=\"code\">\t\tT =&gt; const T,\t把一个变量当const看待</span></span><br><span class=\"line\"><span class=\"code\">\t\tT[] =&gt; T*,\t数组可以用指针来控制</span></span><br><span class=\"line\"><span class=\"code\">\t\tT* =&gt; T[],\t指针可以用数组来控制</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"bullet\">3.</span>\t专用类型转换（T =&gt; C，不同类型之间的转换）</span><br><span class=\"line\"><span class=\"code\">\t使用专用类型转换函数</span></span><br><span class=\"line\"><span class=\"code\">\t类中声明：operator target_class();</span></span><br><span class=\"line\"><span class=\"code\">\t类外定义：X::operator target_class()&#123;...&#125;</span></span><br><span class=\"line\"><span class=\"code\">\t作用：将X类的对象转换为target_class类的对象</span></span><br><span class=\"line\"><span class=\"code\">\t专用的类型转换函数，该函数没有写返回类型，实际上target_class就是返回类型，target_class可以是任何系统和自定义的类</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tclass Rational &#123;</span></span><br><span class=\"line\"><span class=\"code\">\tpublic:</span></span><br><span class=\"line\"><span class=\"code\">\t\t...</span></span><br><span class=\"line\"><span class=\"code\">\t\toperator double() const;\t//将rational类转换为double类型</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tRational::operator double() const &#123;</span></span><br><span class=\"line\"><span class=\"code\">\t\treturn numerator_/(double) denominator_;\t//实现转换，瞎写的，这里是在举例子怎么写</span></span><br><span class=\"line\"><span class=\"code\">\t&#125;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">注：不能出现：</span><br><span class=\"line\"><span class=\"bullet\">\t1.</span> A类中有一个转换为B类的专用类型转换函数a<span class=\"emphasis\">_to_</span>b()</span><br><span class=\"line\"><span class=\"bullet\">\t2.</span> B类中有一个以A类对象为参数的构造函数B(A&amp; a)</span><br><span class=\"line\"><span class=\"bullet\">\t3.</span> 有一个函数f需要一个B类对象，但传给f了一个A类的对象</span><br><span class=\"line\"><span class=\"code\">\t此时报错，因为编译器不知道用a_to_b函数还是B(A&amp; a)函数，它俩没有优先级区别，此时要么删掉一个，或者在B(A&amp; a)函数前加上explicit关键字免得系统自动调用这个构造函数</span></span><br></pre></td></tr></table></figure>\n\n<p>[参考检验代码_21](#C++ 自动类型转换\t\t\t\t&#x3D;&#x3D;检验代码_21&#x3D;&#x3D;)</p>\n<h2 id=\"基础概念-14——模板——Template\"><a href=\"#基础概念-14——模板——Template\" class=\"headerlink\" title=\"基础概念_14——模板——Template\"></a>基础概念_14——模板——Template</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一种重用代码的方式，此时变量类型成为参数，可以有两种Template，function和class两种</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-函数模板——function-template\"><a href=\"#1-函数模板——function-template\" class=\"headerlink\" title=\"1.函数模板——function template\"></a>1.函数模板——function template</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一种模板用来做出函数，相当于告诉编译器，它要怎么帮你做出一个函数</span></span><br><span class=\"line\">如：</span><br><span class=\"line\">使用一般函数：</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"type\">int</span>&amp; x, <span class=\"type\">int</span>&amp; y)</span></span>&#123;\t<span class=\"comment\">//这个函数只能交换俩int类型的变量</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> temp = x;</span><br><span class=\"line\">\t\tx = y;</span><br><span class=\"line\">\t\ty = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">使用函数模板：</span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt; <span class=\"keyword\">class</span> <span class=\"title class_\">T</span> &gt;\t<span class=\"comment\">//template是关键字，class T是用来代表任意类型（你要是喜欢也可以用X）（实际上就是用来占位的，可以有多个如：template &lt;class T1, class T2&gt;，逗号隔开即可），这一语句下面是函数那就是函数模板，是类那就是类模板，即下面的swap函数就是函数模板，T代表任意的类型可以是基本类型也可以是用户自定义类型</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span> <span class=\"params\">(T&amp; x, T&amp; y)</span></span>&#123;\t</span><br><span class=\"line\">\t\tT temp = x;</span><br><span class=\"line\">\t\tx = y;</span><br><span class=\"line\">\t\ty = tmep;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">注<span class=\"number\">1</span>：实际上上面的代码是declaration（声明），编译器会把这段代码记录下来，以后遇到调用swap时，会用那个模板把T变成调用处对应的类型X（随便用个字母表示），自动做出一个参数是X类型的swap函数（和其他的swap形成重载）</span><br><span class=\"line\"></span><br><span class=\"line\">注<span class=\"number\">2</span>：使用函数模板后系统会ban掉显示（<span class=\"keyword\">explicit</span>）自动类型转换和隐式（implicit）类型转换，如上面例子中<span class=\"built_in\">swap</span>(<span class=\"type\">int</span>,<span class=\"type\">int</span>);可以，但<span class=\"built_in\">swap</span>(<span class=\"type\">int</span>,<span class=\"type\">double</span>);不行</span><br><span class=\"line\"></span><br><span class=\"line\">注<span class=\"number\">3</span>：重载规则，检查是否只有唯一的函数匹配--否--&gt;检查是否只有唯一的函数模板匹配--否--&gt;找重载函数</span><br><span class=\"line\"></span><br><span class=\"line\">注<span class=\"number\">4</span>：如果函数模板的函数中没有使用到占位的<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>，则在调用时需显示的给出标识用哪种类型如：</span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"type\">void</span> )</span></span>&#123;...&#125;</span><br><span class=\"line\">    <span class=\"built_in\">foo</span>&lt;<span class=\"type\">int</span>&gt;();\t<span class=\"comment\">//此时 T 的type是int </span></span><br><span class=\"line\">    <span class=\"built_in\">foo</span>&lt;<span class=\"type\">float</span>&gt;();\t<span class=\"comment\">//此时 T 的type是float</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-类模板——class-tmeplate\"><a href=\"#2-类模板——class-tmeplate\" class=\"headerlink\" title=\"2_类模板——class tmeplate\"></a>2_类模板——class tmeplate</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一种模板用来做出类，类模板里的每一个函数都是函数模板</span></span><br><span class=\"line\">例子：</span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;\t<span class=\"comment\">//同函数模板，关键字和占位类型（占位类型可以有多个如：template&lt; class key, class value&gt; ，逗号隔开即可），表示下面的东西是template，Vector是一个声明</span></span><br><span class=\"line\">\t<span class=\"keyword\">class</span> <span class=\"title class_\">Vector</span> &#123;\t<span class=\"comment\">//和正常类一样，Vector是名字</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">Vector</span>(<span class=\"type\">int</span>);\t<span class=\"comment\">//构造函数，参数为int</span></span><br><span class=\"line\">\t\t~<span class=\"built_in\">Vector</span>();\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">Vector</span>(<span class=\"type\">const</span> Vector&amp;);<span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">\t\tVector&amp; <span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Vector&amp;);\t<span class=\"comment\">//赋值运算符重载</span></span><br><span class=\"line\">\t\tT&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">int</span>);\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\tT* m_elements;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> m_size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">注<span class=\"number\">5</span>：使用Vector时因为表示传参数，所以得像 注<span class=\"number\">4</span> 那样显示地指明 T 的type，如：<span class=\"function\">Vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">i</span><span class=\"params\">(<span class=\"number\">100</span>)</span></span>;\t<span class=\"comment\">//通过参数为int类型的构造函数创建一个Vector对象，且 T 的类型是int</span></span><br><span class=\"line\"></span><br><span class=\"line\">注<span class=\"number\">6</span>：类模板中的类的函数，都得写成函数模板的格式（其实也就是在类成员函数的定义前加上 <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span> &gt;，然后按需求把某些变量类型改成 T ，类名后和域解析符前得加上 &lt;T&gt; ）如：</span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;\t<span class=\"comment\">//不能省</span></span><br><span class=\"line\">\tVector&lt;T&gt;::<span class=\"built_in\">Vector</span>(<span class=\"type\">int</span> size) : <span class=\"built_in\">m_size</span>(size) &#123; <span class=\"comment\">//参数为int的构造函数的定义，注意Vector&lt;T&gt;，中&lt;T&gt;不能省</span></span><br><span class=\"line\">\t\tm_elements = <span class=\"keyword\">new</span> T[m_size];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>&gt;\t<span class=\"comment\">//不能省</span></span><br><span class=\"line\">\tT&amp; Vector&lt;T&gt;::<span class=\"keyword\">operator</span>[] (<span class=\"type\">int</span> indx)\t&#123; <span class=\"comment\">//赋值运算符重载函数的定义，注意Vector&lt;T&gt;，中&lt;T&gt;不能省</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (indx &lt; m_size &amp;&amp; indx &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> m_elements[indx];</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">注<span class=\"number\">7</span>：如果出现Vector&lt; Vector &lt; <span class=\"type\">double</span> *&gt; &gt;;（即有一个Vector它的每一个单元都是一个Vector，而那个Vector的每一个单元都是一个<span class=\"type\">double</span> *）这种要注意，最后面的两个&gt;，有些编译器要中间加一个空格，否则会识别为右移或者流</span><br><span class=\"line\">    </span><br><span class=\"line\">注<span class=\"number\">8</span>：模板函数的占位类型实际可以非常复杂如：</span><br><span class=\"line\">    Vector&lt; <span class=\"built_in\">int</span> (*) (Vector&lt;<span class=\"type\">double</span>&gt;&amp;,<span class=\"type\">int</span>) &gt;;（一个Vector它的每一个单元都是一个函数指针，该函数指针指向的函数的参数有两项，第一项是一个每一个单元都是<span class=\"type\">double</span>的Vector而且是通过引用传递，第二项是一个<span class=\"type\">int</span>）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-模板函数——template-function\"><a href=\"#3-模板函数——template-function\" class=\"headerlink\" title=\"3_模板函数——template function\"></a>3_模板函数——template function</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">就是由模板生成的函数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-模板类——template-class\"><a href=\"#4-模板类——template-class\" class=\"headerlink\" title=\"4_模板类——template class\"></a>4_模板类——template class</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">就是由模板生成的类</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-特别注意-1-x3D-x3D\"><a href=\"#x3D-x3D-特别注意-1-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意_1&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意_1&#x3D;&#x3D;</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">模板<span class=\"keyword\">template</span>的参数不仅可以是一种未指定类型（占位类型），也可以是实际类型（甚至可以给其设置缺省值）</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> <span class=\"title class_\">T</span>, <span class=\"type\">int</span> bounds = <span class=\"number\">100</span>&gt; <span class=\"comment\">//bounds是一个带缺省值的变量，且在模板里面可以直接使用</span></span><br><span class=\"line\">\t<span class=\"keyword\">class</span> FixedVector &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">FixedVector</span>();</span><br><span class=\"line\">\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t\tT&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">int</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\tT elements[bounds];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tFixedVector&lt;<span class=\"type\">int</span>, <span class=\"number\">50</span>&gt; v1; \t<span class=\"comment\">//种50个int</span></span><br><span class=\"line\">\tFixedVector&lt;<span class=\"type\">int</span>, <span class=\"number\">10</span>*<span class=\"number\">5</span>&gt; v2;\t<span class=\"comment\">//种50个int</span></span><br><span class=\"line\">\tFixedVector&lt;<span class=\"type\">int</span>&gt; v3;\t\t<span class=\"comment\">//种100个int</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-特别注意-2-x3D-x3D\"><a href=\"#x3D-x3D-特别注意-2-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意_2&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意_2&#x3D;&#x3D;</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\ttemplate和template之间不能做继承，</span><br><span class=\"line\"><span class=\"bullet\">2.</span>\ttemplate可以继承于一个non-template的类</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">3.</span>\tnon-template类也可以继承template类（实际是先种出一个模板类再把这个模板类继承给那个non-template类）如：</span><br><span class=\"line\"><span class=\"code\">\tclass SupervisorGroup : public List&lt;Employee*&gt;&#123;...&#125; //List是一个类模板，这里指定了占位类型为Employee *</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-15——异常——exception\"><a href=\"#基础概念-15——异常——exception\" class=\"headerlink\" title=\"基础概念_15——异常——exception\"></a>基础概念_15——异常——exception</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">概念：</span><br><span class=\"line\">\t运行到某处时，有问题出现，但当前环境或程序或函数无法处理，以至于无法继续下去的情况就叫exception，但在某处，某个程序或函数可以处理</span><br><span class=\"line\"></span><br><span class=\"line\">关键字：</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tcode;\t\t\t\t\t\t<span class=\"comment\">//catch中也可以throw异常</span></span><br><span class=\"line\">\t&#125; <span class=\"built_in\">catch</span> ( error_type )&#123;\t\t\t<span class=\"comment\">// error_type 是 ... 时表示捕获所有类型的异常</span></span><br><span class=\"line\">\t\tcode;\t\t\t\t\t\t<span class=\"comment\">//catch中也可以throw异常</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">throw</span> error_type;\t<span class=\"comment\">//向上抛异常并退出当前函数，直到遇到有catch能捕获抛出的异常时停止</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> block</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        code_1;\t\t\t\t\t\t\t\t<span class=\"comment\">//尝试做一些可能会导致异常的代码</span></span><br><span class=\"line\">    &#125;<span class=\"built_in\">catch</span> (error_type_1 var_name)&#123;\t\t\t<span class=\"comment\">//error_type_1 var_name可以理解成函数的形参表，且var_name变量在对应的code中可以使用，其实catch就像一个处理函数</span></span><br><span class=\"line\">    \tcode_2;</span><br><span class=\"line\">    &#125;<span class=\"built_in\">catch</span> (error_type_2 var_name)&#123;\t\t\t<span class=\"comment\">//针对error_type的子类，会执行类型转换（upcast，向上造型），即子类的捕获要放在父类捕获前，否则该子类catch永远无法执行，编译无法通过</span></span><br><span class=\"line\">        code_3;</span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t\t\t<span class=\"comment\">//catch查找是按从上到下的顺序查找的，如果catch(...)是第一个catch则其后的catch全部永远没法执行，编译无法通过</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">特色操作：</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> : throw(error_type_1, error_type_2)&#123;</span>\t<span class=\"comment\">//c++函数后面这样写，代表该函数在运行时最多可能会抛出这些异常，这样写后func只能抛出error_type_1和error_type_2两种异常，抛其他异常，系统反而会抛异常</span></span><br><span class=\"line\">    \tcode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//一个函数后面不这样写，则可以抛出任何异常。如果是throw()，括号里面不写类型则意味着该函数不会抛出任何异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">注：c中malloc失败时会返回一个null，但在c++中不会，只会抛一个bad_malloc异常</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-特别注意-x3D-x3D-4\"><a href=\"#x3D-x3D-特别注意-x3D-x3D-4\" class=\"headerlink\" title=\"&#x3D;&#x3D;特别注意&#x3D;&#x3D;\"></a>&#x3D;&#x3D;特别注意&#x3D;&#x3D;</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">构造函数中如果使用抛异常来通知构造失败的话（因为构造函数和析构函数没有返回值），可能会导致奇奇怪怪的问题，因为如果构造函数使用到了new，但构造没成功，抛了异常，那么new来的空间就变成垃圾内存了</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-16——流——stream\"><a href=\"#基础概念-16——流——stream\" class=\"headerlink\" title=\"基础概念_16——流——stream\"></a>基础概念_16——流——stream</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">流——单方向</span><br><span class=\"line\">c和c++对文件操作的区别：</span><br><span class=\"line\"><span class=\"code\">\tc语言中，对一个文件可以任意的游走（random access），从第一段开始读，从第25段的第34个字符开始读。而c++的流是单方向的，“流”过去了，就没有了</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">流操作——Stream operations</span><br><span class=\"line\"><span class=\"bullet\">1.</span>\tExtractors —— &gt;&gt; 从流里面读东西（已经被重载，根据左边的receiver不同调用的不同，如果receiver是istream则是extractor，receiver如果是一个int则是右移）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">2.</span>\tInserters —— &lt;&lt; 向流里面写东西（同上）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">3.</span>\tManipulators —— 操控流的怎么读，怎么写（类似格式化输入输出）</span><br><span class=\"line\"></span><br><span class=\"line\">流的类型——Stream type</span><br><span class=\"line\"><span class=\"bullet\">1.</span>\tText streams</span><br><span class=\"line\"><span class=\"code\">\t文本流，parse和format，解析和格式化</span></span><br><span class=\"line\"><span class=\"code\">2.\tBinary streams</span></span><br><span class=\"line\"><span class=\"code\">\t二进制数据，</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>\tistream &gt;&gt; lvalue</span><br><span class=\"line\">\t会根据lvalue的变量类型，自动解析怎么把值传给lvalue</span><br><span class=\"line\">注<span class=\"number\">1</span>：自动解析的类型：</span><br><span class=\"line\">\t<span class=\"type\">char</span>\t\t%c</span><br><span class=\"line\">\t<span class=\"type\">short</span>, <span class=\"type\">int</span>\t%d</span><br><span class=\"line\">\t<span class=\"type\">long</span>\t\t%ld</span><br><span class=\"line\">\t<span class=\"type\">float</span>\t\t%g</span><br><span class=\"line\">\t<span class=\"type\">double</span>\t\t%lg</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">double</span>\t%Lg</span><br><span class=\"line\">\t<span class=\"type\">char</span> *\t\t%s</span><br><span class=\"line\">\t<span class=\"type\">void</span> *\t\t%p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>\t手动重载 &gt;&gt; 运算符</span><br><span class=\"line\">istream&amp; <span class=\"keyword\">operator</span>&gt;&gt;(istream&amp; is, T&amp; obj)&#123;\t<span class=\"comment\">//第一个参数（也就是receiver），istream&amp;之所以不加const是因为要修改流</span></span><br><span class=\"line\">\tcode;\t\t<span class=\"comment\">//读取流操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> is;\t<span class=\"comment\">//返回类型也是istream&amp; 是操作流之后可以把操作完后的流继续操作，如：( ( cin&gt;&gt;a )&gt;&gt;b )&gt;&gt;c</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>\t手动重载 &lt;&lt; 运算符</span><br><span class=\"line\">    ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; os, <span class=\"type\">const</span> T&amp; obj)&#123;</span><br><span class=\"line\">    \tcode;\t\t<span class=\"comment\">//实际插入流操作</span></span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> os;\t\t<span class=\"comment\">//\t( ( cout&lt;&lt;a )&lt;&lt;b )&lt;&lt;c，返回的是ostream&amp;的原因</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"number\">4.</span>\t常见使用</span><br><span class=\"line\">    ch = cin.<span class=\"built_in\">get</span>();\t读一个字符，如果读完了则返回EOF</span><br><span class=\"line\">    cout.<span class=\"built_in\">put</span>(ch);\t<span class=\"comment\">// 打印一个字符</span></span><br><span class=\"line\">    <span class=\"built_in\">ignore</span>(<span class=\"type\">int</span> limit = <span class=\"number\">1</span>, <span class=\"type\">int</span> delim = EOF);\t跳过多少个东西不读，一直读到什么位置，这里缺省值是跳过一个，一直读到结束</span><br><span class=\"line\">    cout.<span class=\"built_in\">flush</span>();\t<span class=\"comment\">//强制输出流的内容到物理介质上去</span></span><br><span class=\"line\"><span class=\"number\">5.</span>\tmanipulator，格式化\t<span class=\"comment\">//要导入头文件iomanip</span></span><br><span class=\"line\">    endl其实是个manipulator</span><br><span class=\"line\">    <span class=\"comment\">//例子</span></span><br><span class=\"line\">    cin &gt;&gt; hex &gt;&gt; n;\t<span class=\"comment\">//以十六进制输入给n</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">2</span>) &lt;&lt; <span class=\"number\">1000.243</span> &lt;&lt; endl;\t<span class=\"comment\">//按两位小数输出</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">setw</span>(<span class=\"number\">20</span>) &lt;&lt; <span class=\"string\">&quot;OK!&quot;</span>;\t<span class=\"comment\">//占20位，输出右对齐</span></span><br><span class=\"line\"><span class=\"number\">6.</span>\t常见manipulators:</span><br><span class=\"line\">\tdec, hex, otc\t数字进制转化\t\t\t\t\t\t   \t\t \t\t\tI,O</span><br><span class=\"line\">    endl\t\t\t插入一个新行，并使用flush\t\t\t\t \t\t\t\t\t O</span><br><span class=\"line\">\tflush\t\t\tflush流（相当于刷新缓冲区）\t\t\t\t\t\t\t\t<span class=\"function\">O</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">setw</span><span class=\"params\">(<span class=\"type\">int</span>)</span>\t\t设置占位宽度（最小要这么宽，宽度大于设定则不管）\t\t\tI, O</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">setfill</span><span class=\"params\">(ch)</span>\t\t如果输出的东西没有设定的那么宽，则用什么填充\t\t\t\t I, O</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">setbase</span><span class=\"params\">(<span class=\"type\">int</span>)</span>\t相当于进制拓展，可以设定以任意进制输出\t\t\t\t\t\t   O</span></span><br><span class=\"line\"><span class=\"function\">\tws\t\t\t\t\t跳过空格\t\t\t\t\t\t\t\t\t\t\tI</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">setprecision</span><span class=\"params\">(<span class=\"type\">int</span>)</span>\t设置精度，即多少位小数\t\t\t\t\t\t\t\t\tO</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">setiosflags</span><span class=\"params\">(<span class=\"type\">long</span>)</span>\t设置流里面都是ON，相当于1\t\t\t\t\t\t\tI, O</span></span><br><span class=\"line\"><span class=\"function\">\t<span class=\"title\">resetiosflags</span><span class=\"params\">(<span class=\"type\">long</span>)</span>\t设置流里面都是OFF，相当于0\t\t\t\t\t\t\tI, O</span></span><br><span class=\"line\"><span class=\"function\">7.\t预定义流</span></span><br><span class=\"line\"><span class=\"function\">        cin\t\t\tstandard input</span></span><br><span class=\"line\"><span class=\"function\">        cout\t\tstandard output</span></span><br><span class=\"line\"><span class=\"function\">        cerr\t\tunbuffered <span class=\"title\">error</span><span class=\"params\">(debugging)</span> output</span></span><br><span class=\"line\"><span class=\"function\">        clog\t\tbuffered <span class=\"title\">error</span><span class=\"params\">(debugging)</span> output</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-自定义Manipulator-与-IOS-flag-x3D-x3D\"><a href=\"#x3D-x3D-自定义Manipulator-与-IOS-flag-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;自定义Manipulator 与 IOS flag&#x3D;&#x3D;\"></a>&#x3D;&#x3D;自定义Manipulator 与 IOS flag&#x3D;&#x3D;</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>\tManipulator</span><br><span class=\"line\"><span class=\"comment\">//这是全局函数</span></span><br><span class=\"line\"><span class=\"function\">ostream&amp; <span class=\"title\">manip</span><span class=\"params\">(ostream&amp; out)</span></span>&#123;</span><br><span class=\"line\">    code;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ostream&amp; <span class=\"title\">tab</span><span class=\"params\">(ostream&amp; out)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>;\t\t<span class=\"comment\">//返回一个ostream的引用，且返回时还有一个 &lt;&lt; 的调用，把&#x27;\\t&#x27;插入到流中</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;Hello&quot;</span> &lt;&lt; tab &lt;&lt; <span class=\"string\">&quot;World!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> ios :: flag\t标志</span><br><span class=\"line\">    ios::skipws\t\t\t\t\t\t\t<span class=\"comment\">//忽略前导空格</span></span><br><span class=\"line\">    ios::lef, ios::right\t\t\t\t<span class=\"comment\">//设置左对齐，右对齐</span></span><br><span class=\"line\">    ios::internal\t\t\t\t\t\t<span class=\"comment\">//数值的符号位在域宽内左对齐，数值右对齐，中间由填充字符填充</span></span><br><span class=\"line\">    ios::dec, ios::oct, ios::hex\t\t<span class=\"comment\">//设置整数的基数为10，8，16</span></span><br><span class=\"line\">    ios::showbase\t\t\t\t\t\t<span class=\"comment\">//强制输出整数的基数(八进制数以0打头，十六进制数以0x打头)</span></span><br><span class=\"line\">    ios::showpoint\t\t\t\t\t\t<span class=\"comment\">//强制显示小数点</span></span><br><span class=\"line\">    ios::uppercase\t\t\t\t\t\t<span class=\"comment\">//16进制数大写输出</span></span><br><span class=\"line\">    ios::showpos\t\t\t\t\t\t<span class=\"comment\">//强制显示符号</span></span><br><span class=\"line\">    ios::scientific, ios::fixed\t\t\t<span class=\"comment\">//设置指数显示，固定浮点显示</span></span><br><span class=\"line\">    ios::unitbuf\t\t\t\t\t\t<span class=\"comment\">//每次输出后刷新所有的流</span></span><br><span class=\"line\">    ios::boolalpha \t\t\t\t\t\t<span class=\"comment\">//以“true”/“false”的形式输出布尔值</span></span><br><span class=\"line\">    ios::stdio \t\t\t\t\t\t\t<span class=\"comment\">//每次输出之后清除stdout, stderr</span></span><br><span class=\"line\">   \t<span class=\"comment\">//使用方法</span></span><br><span class=\"line\">    <span class=\"number\">2.1</span>\t\t使用<span class=\"function\">Manipulator</span></span><br><span class=\"line\"><span class=\"function\">    \t<span class=\"title\">setiosflags</span><span class=\"params\">(flags)</span></span>;\t\t\t\t<span class=\"comment\">//flags 就是上面的代码，如ios::skipws</span></span><br><span class=\"line\">    \t<span class=\"built_in\">resetiosflags</span>(flags);</span><br><span class=\"line\">\t<span class=\"number\">2.2</span>\t\t使用stream成员函数</span><br><span class=\"line\">        istream.<span class=\"built_in\">setf</span>(flags);\t\t\t\t\t<span class=\"comment\">//flags 同理，istream是cin或cout这种流对象</span></span><br><span class=\"line\">        istream.<span class=\"built_in\">unsetf</span>(flags);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基础概念-17——STL——Standard-Library\"><a href=\"#基础概念-17——STL——Standard-Library\" class=\"headerlink\" title=\"基础概念_17——STL——Standard Library\"></a>基础概念_17——STL——Standard Library</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\t容器——Containers（注意在使用时所有的容器都是小写，实际上就是类模板）</span><br><span class=\"line\"><span class=\"code\">\tVector\t\t一个可以在后面（一个方向）增长的数组</span></span><br><span class=\"line\"><span class=\"code\">\tDeque\t\t一个可以在前后都可以增长的数组</span></span><br><span class=\"line\"><span class=\"code\">\tList\t\t双向链表</span></span><br><span class=\"line\"><span class=\"code\">\tSets\t\t集合（没有重复的元素）</span></span><br><span class=\"line\"><span class=\"code\">\tMap\t\t\t映射，键值对</span></span><br><span class=\"line\"><span class=\"code\">\tPair\t\t表达两东西之间的关系，这两东西可以是任何东西</span></span><br><span class=\"line\"><span class=\"code\">2.\t基础算法——Basic Algorithms（实际上是一些函数模板）</span></span><br><span class=\"line\"><span class=\"code\">\tsort\t\t排序</span></span><br><span class=\"line\"><span class=\"code\">\tsearch\t\t查找</span></span><br><span class=\"line\"><span class=\"code\">\t...</span></span><br><span class=\"line\"><span class=\"code\">3.\t迭代器——Iterators</span></span><br><span class=\"line\"><span class=\"code\">\t如：</span></span><br><span class=\"line\"><span class=\"code\">\t\tvector&lt;int&gt;::iterator p;\t//p是vector&lt;int&gt;这个类里面的类叫iterator的对象</span></span><br><span class=\"line\"><span class=\"code\">\t\tp = x.begin();\t\t\t\t//p现在用来代表x中的第一个元素</span></span><br><span class=\"line\"><span class=\"code\">\t\tcout &lt;&lt; *p &lt;&lt; endl;\t\t\t//*是被重载了的，vector&lt;in&gt;说明p是一个int，所以*p是一个int</span></span><br><span class=\"line\"><span class=\"code\">\t\tp++;\t\t\t\t\t\t//++也是被重载过的</span></span><br><span class=\"line\"><span class=\"code\">4.\t所有STL的东西都是在 std 那个命名空间中，所以得使用using namespace std;否则用一个就得加 std::</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"类-例子\"><a href=\"#类-例子\" class=\"headerlink\" title=\"类_例子\"></a>类_例子</h2><h4 id=\"售票机类\"><a href=\"#售票机类\" class=\"headerlink\" title=\"售票机类\"></a>售票机类</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TicketMachine</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showPrompt</span><span class=\"params\">()</span></span>;\t<span class=\"comment\">//成员函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getMoney</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printTicket</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showBalance</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printError</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> PRICE;\t<span class=\"comment\">//成员变量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> balance;</span><br><span class=\"line\">    <span class=\"type\">int</span> total;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"检验代码\"><a href=\"#检验代码\" class=\"headerlink\" title=\"检验代码\"></a>检验代码</h2><h4 id=\"分析类不同实例的成员变量值-x3D-x3D-检验代码-1-x3D-x3D\"><a href=\"#分析类不同实例的成员变量值-x3D-x3D-检验代码-1-x3D-x3D\" class=\"headerlink\" title=\"分析类不同实例的成员变量值\t\t\t&#x3D;&#x3D;检验代码_1&#x3D;&#x3D;\"></a>分析类不同实例的成员变量值\t\t\t&#x3D;&#x3D;检验代码_1&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">A::f</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ti = <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA a;</span><br><span class=\"line\">\tA b;</span><br><span class=\"line\">\tb.i = <span class=\"number\">30</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b.i_1 = &quot;</span> &lt;&lt; b.i &lt;&lt; endl;</span><br><span class=\"line\">\ta.i = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a.i_1 = &quot;</span> &lt;&lt; a.i &lt;&lt; endl;</span><br><span class=\"line\">\ta.<span class=\"built_in\">f</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b.i_2 = &quot;</span> &lt;&lt; b.i &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a.i_2 = &quot;</span> &lt;&lt; a.i &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.i_1 = <span class=\"number\">30</span></span><br><span class=\"line\">a.i_1 = <span class=\"number\">10</span></span><br><span class=\"line\">b.i_2 = <span class=\"number\">30</span></span><br><span class=\"line\">a.i_2 = <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"探究c-对象实质-x3D-x3D-检验代码-2-x3D-x3D\"><a href=\"#探究c-对象实质-x3D-x3D-检验代码-2-x3D-x3D\" class=\"headerlink\" title=\"探究c++对象实质\t\t\t&#x3D;&#x3D;检验代码_2&#x3D;&#x3D;\"></a>探究c++对象实质\t\t\t&#x3D;&#x3D;检验代码_2&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">A::f</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\ti = <span class=\"number\">20</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;A::f()--&amp;i = &quot;</span> &lt;&lt; &amp;i &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA a;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;&amp;a = &quot;</span> &lt;&lt; &amp;a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;&amp;a.i = &quot;</span> &lt;&lt; &amp;(a.i) &lt;&lt; endl;</span><br><span class=\"line\">\ta.<span class=\"built_in\">f</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;a = <span class=\"number\">0x61fe1c</span></span><br><span class=\"line\">&amp;a.i = <span class=\"number\">0x61fe1c</span></span><br><span class=\"line\">A::<span class=\"built_in\">f</span>()--&amp;i = <span class=\"number\">0x61fe1c</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"解密new与delete测试1不带-x3D-x3D-检验代码-3-x3D-x3D\"><a href=\"#解密new与delete测试1不带-x3D-x3D-检验代码-3-x3D-x3D\" class=\"headerlink\" title=\"解密new与delete\t测试1\t不带[]\t\t&#x3D;&#x3D;检验代码_3&#x3D;&#x3D;\"></a>解密new与delete\t测试1\t不带[]\t\t&#x3D;&#x3D;检验代码_3&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>()&#123;i = <span class=\"number\">0</span>;cout &lt;&lt; <span class=\"string\">&quot;A::A()&quot;</span> &lt;&lt; endl;&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::~A(), i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> </span>&#123; <span class=\"keyword\">this</span>-&gt;i = i; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA *p = <span class=\"keyword\">new</span> A[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp[i].<span class=\"built_in\">set</span>(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-2\"><a href=\"#输出-2\" class=\"headerlink\" title=\"输出\"></a>输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"解密new与delete测试2带-x3D-x3D-检验代码-4-x3D-x3D\"><a href=\"#解密new与delete测试2带-x3D-x3D-检验代码-4-x3D-x3D\" class=\"headerlink\" title=\"解密new与delete\t测试2\t带[]\t&#x3D;&#x3D;检验代码_4&#x3D;&#x3D;\"></a>解密new与delete\t测试2\t带[]\t&#x3D;&#x3D;检验代码_4&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>() &#123;i = <span class=\"number\">0</span>;cout &lt;&lt; <span class=\"string\">&quot;A::A()&quot;</span> &lt;&lt; endl;&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::~A(), i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> </span>&#123; <span class=\"keyword\">this</span>-&gt;i = i; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA *p = <span class=\"keyword\">new</span> A[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t\tp[i].<span class=\"built_in\">set</span>(i);</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] p;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-3\"><a href=\"#输出-3\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">9</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">8</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">7</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">6</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">5</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">4</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">3</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">2</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">1</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"解密new与delete-x3D-x3D-检验代码-5-x3D-x3D\"><a href=\"#解密new与delete-x3D-x3D-检验代码-5-x3D-x3D\" class=\"headerlink\" title=\"解密new与delete\t\t\t\t&#x3D;&#x3D;检验代码_5&#x3D;&#x3D;\"></a>解密new与delete\t\t\t\t&#x3D;&#x3D;检验代码_5&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>()</span><br><span class=\"line\">\t&#123;i = <span class=\"number\">0</span>;cout &lt;&lt; <span class=\"string\">&quot;A::A()&quot;</span> &lt;&lt; endl;&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::~A(), i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">g</span><span class=\"params\">(A *q)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::g(), q-&gt;i=&quot;</span> &lt;&lt; q-&gt;i &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> </span>&#123; <span class=\"keyword\">this</span>-&gt;i = i; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tA a;</span><br><span class=\"line\">\ta.<span class=\"built_in\">set</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tA b;</span><br><span class=\"line\">\tb.<span class=\"built_in\">set</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\ta.<span class=\"built_in\">g</span>(&amp;b);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-4\"><a href=\"#输出-4\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">g</span>(), q-&gt;i=<span class=\"number\">1000</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">1000</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>(), i = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"继承初体验-x3D-x3D-检验代码-6-x3D-x3D\"><a href=\"#继承初体验-x3D-x3D-检验代码-6-x3D-x3D\" class=\"headerlink\" title=\"继承初体验\t\t\t\t&#x3D;&#x3D;检验代码_6&#x3D;&#x3D;\"></a>继承初体验\t\t\t\t&#x3D;&#x3D;检验代码_6&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>() : <span class=\"built_in\">i</span>(<span class=\"number\">0</span>) &#123; cout &lt;&lt; <span class=\"string\">&quot;A::A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::f()&quot;</span> &lt;&lt; <span class=\"string\">&quot;i=&quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> ii)</span> </span>&#123; i = ii; &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A&#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tB b;</span><br><span class=\"line\">\tb.<span class=\"built_in\">set</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">\tb.<span class=\"built_in\">print</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-5\"><a href=\"#输出-5\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">f</span>()i=<span class=\"number\">100</span></span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"继承再体验-x3D-x3D-检验代码-7-x3D-x3D\"><a href=\"#继承再体验-x3D-x3D-检验代码-7-x3D-x3D\" class=\"headerlink\" title=\"继承再体验\t\t\t\t&#x3D;&#x3D;检验代码_7&#x3D;&#x3D;\"></a>继承再体验\t\t\t\t&#x3D;&#x3D;检验代码_7&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>(<span class=\"type\">int</span> ii) : <span class=\"built_in\">i</span>(ii) &#123;&#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::print() i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> ii)</span> </span>&#123; i = ii; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">B</span>() : <span class=\"built_in\">A</span>(<span class=\"number\">15</span>) &#123; cout &lt;&lt; <span class=\"string\">&quot;B::B() &quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">B</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;B::~B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">set</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tB b;</span><br><span class=\"line\">\tb.<span class=\"built_in\">set</span>(<span class=\"number\">66</span>);</span><br><span class=\"line\">\tb.<span class=\"built_in\">f</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-6\"><a href=\"#输出-6\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B::<span class=\"built_in\">B</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">print</span>() i = <span class=\"number\">2</span></span><br><span class=\"line\">B::~<span class=\"built_in\">B</span>()</span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"c-名字隐藏-x3D-x3D-检验代码-8-x3D-x3D\"><a href=\"#c-名字隐藏-x3D-x3D-检验代码-8-x3D-x3D\" class=\"headerlink\" title=\"c++名字隐藏\t\t\t\t&#x3D;&#x3D;检验代码_8&#x3D;&#x3D;\"></a>c++名字隐藏\t\t\t\t&#x3D;&#x3D;检验代码_8&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">A</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;A::~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::print() i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125; <span class=\"comment\">//A类中print有重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"type\">int</span> ii)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::print(int ii) &quot;</span> &lt;&lt; ii &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> ii)</span> </span>&#123; i = ii; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">B</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;B::B() &quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t~<span class=\"built_in\">B</span>() &#123; cout &lt;&lt; <span class=\"string\">&quot;B::~B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">set</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;B::print()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tB b;</span><br><span class=\"line\">\tb.<span class=\"built_in\">print</span>();\t\t\t<span class=\"comment\">//使用B类自己的print函数</span></span><br><span class=\"line\">\tb.A::<span class=\"built_in\">print</span>(<span class=\"number\">1234</span>);\t<span class=\"comment\">//使用A类的那个print函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-7\"><a href=\"#输出-7\" class=\"headerlink\" title=\"输出\"></a>输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">A</span>()</span><br><span class=\"line\">B::<span class=\"built_in\">B</span>()</span><br><span class=\"line\">B::<span class=\"built_in\">print</span>()</span><br><span class=\"line\">A::<span class=\"built_in\">print</span>(<span class=\"type\">int</span> ii) <span class=\"number\">1234</span></span><br><span class=\"line\">B::~<span class=\"built_in\">B</span>()</span><br><span class=\"line\">A::~<span class=\"built_in\">A</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"C-重载-x3D-x3D-检验代码-9-x3D-x3D\"><a href=\"#C-重载-x3D-x3D-检验代码-9-x3D-x3D\" class=\"headerlink\" title=\"C++重载\t\t\t\t&#x3D;&#x3D;检验代码_9&#x3D;&#x3D;\"></a>C++重载\t\t\t\t&#x3D;&#x3D;检验代码_9&#x3D;&#x3D;</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//code.h文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j=<span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//code.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;code.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;code.cpp::func &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;:&quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//main.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;code.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">func</span>(<span class=\"number\">1</span>,<span class=\"number\">29</span>);</span><br><span class=\"line\">        <span class=\"built_in\">func</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//编译时用 g++ code.cpp main.cpp -o main.exe</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出-8\"><a href=\"#输出-8\" class=\"headerlink\" title=\"输出\"></a>输出</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code.cpp::func <span class=\"number\">1</span>:<span class=\"number\">29</span></span><br><span class=\"line\">code.cpp::func <span class=\"number\">5</span>:<span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-缺省声明探究-x3D-x3D-检验代码-10-x3D-x3D\"><a href=\"#C-缺省声明探究-x3D-x3D-检验代码-10-x3D-x3D\" class=\"headerlink\" title=\"C++缺省声明探究\t\t\t\t&#x3D;&#x3D;检验代码_10&#x3D;&#x3D;\"></a>C++缺省声明探究\t\t\t\t&#x3D;&#x3D;检验代码_10&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//code.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i=<span class=\"number\">111</span>, <span class=\"type\">int</span> j=<span class=\"number\">111</span>)</span></span>;\t<span class=\"comment\">//定义文件中的声明，此处声明不会生效，或者说会被覆盖</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;code.cpp::func &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;:&quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//main.cpp文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j=<span class=\"number\">123</span>)</span></span>;\t<span class=\"comment\">//调用func函数的文件中的声明，会失效</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">func</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//编译时用 g++ code.cpp main.cpp\t会默认生成a.exe (windows下)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-9\"><a href=\"#输出-9\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code.cpp::func <span class=\"number\">5</span>:<span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-其他编译单元调用内联函数-x3D-x3D-检验代码-11-x3D-x3D\"><a href=\"#C-其他编译单元调用内联函数-x3D-x3D-检验代码-11-x3D-x3D\" class=\"headerlink\" title=\"C++其他编译单元调用内联函数\t\t\t\t&#x3D;&#x3D;检验代码_11&#x3D;&#x3D;\"></a>C++其他编译单元调用内联函数\t\t\t\t&#x3D;&#x3D;检验代码_11&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;code.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">func</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//code.h文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j = <span class=\"number\">19</span>)</span></span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;i = &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; j = &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//编译时用 g++ main.cpp</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-10\"><a href=\"#输出-10\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">5</span> j = <span class=\"number\">19</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-const运用-x3D-x3D-检验代码-12-x3D-x3D\"><a href=\"#C-const运用-x3D-x3D-检验代码-12-x3D-x3D\" class=\"headerlink\" title=\"C++ const运用\t\t\t\t&#x3D;&#x3D;检验代码_12&#x3D;&#x3D;\"></a>C++ const运用\t\t\t\t&#x3D;&#x3D;检验代码_12&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">char</span> *s1 = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> s2[] = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;s1 =   %p\\n&quot;</span>, s1);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;s2 =   %p\\n&quot;</span>, s2);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;main = %p\\n&quot;</span>, main);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-11\"><a href=\"#输出-11\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1 =   <span class=\"number\">0000000000404000</span></span><br><span class=\"line\">s2 =   <span class=\"number\">000000000061F</span>E0C</span><br><span class=\"line\">main = <span class=\"number\">0000000000401550</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-const运用-2-x3D-x3D-检验代码-13-x3D-x3D\"><a href=\"#C-const运用-2-x3D-x3D-检验代码-13-x3D-x3D\" class=\"headerlink\" title=\"C++ const运用_2\t\t\t\t&#x3D;&#x3D;检验代码_13&#x3D;&#x3D;\"></a>C++ const运用_2\t\t\t\t&#x3D;&#x3D;检验代码_13&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() : <span class=\"built_in\">i</span>(<span class=\"number\">2</span>) &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;f()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;f() const&quot;</span> &lt;&lt; endl; &#125; <span class=\"comment\">//这两f函数的默认参数this不一样，一个带有const关键字，一个没有，所以可实现重载</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> A a;\t<span class=\"comment\">//a是有const关键字的对象</span></span><br><span class=\"line\">    a.<span class=\"built_in\">f</span>();\t\t<span class=\"comment\">//调用的是带const关键字的f函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-12\"><a href=\"#输出-12\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">f</span>() <span class=\"type\">const</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-conversion-x3D-x3D-检验代码-14-x3D-x3D\"><a href=\"#C-conversion-x3D-x3D-检验代码-14-x3D-x3D\" class=\"headerlink\" title=\"C++ conversion\t\t\t\t&#x3D;&#x3D;检验代码_14&#x3D;&#x3D;\"></a>C++ conversion\t\t\t\t&#x3D;&#x3D;检验代码_14&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() : <span class=\"built_in\">i</span>(<span class=\"number\">1</span>) &#123;&#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">A</span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot; A.i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125; <span class=\"comment\">// A类中的print函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A</span><br><span class=\"line\">&#123; <span class=\"comment\">// B类继承于A类</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>() : <span class=\"built_in\">j</span>(<span class=\"number\">4</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot; B.j = &quot;</span> &lt;&lt; j &lt;&lt; endl; &#125; <span class=\"comment\">// B类中的print函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    B b;</span><br><span class=\"line\">    a.<span class=\"built_in\">print</span>();</span><br><span class=\"line\">    b.<span class=\"built_in\">print</span>();          <span class=\"comment\">//调用的是B类的成员函数print</span></span><br><span class=\"line\">    b.A::<span class=\"built_in\">print</span>();       <span class=\"comment\">//调用的是A类的成员函数print</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *p = (<span class=\"type\">int</span> *)&amp;a; <span class=\"comment\">//这里的&amp;是取地址，不是引用，取a对象的地址，并转换为int类型</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p = &quot;</span> &lt;&lt; p;</span><br><span class=\"line\">    *p = <span class=\"number\">20</span>; <span class=\"comment\">//取了地址后，直接通过地址改变private属性的成员变量的值</span></span><br><span class=\"line\">    a.<span class=\"built_in\">print</span>();</span><br><span class=\"line\">    p = (<span class=\"type\">int</span> *)&amp;b; <span class=\"comment\">//取对象b的地址，该地址如果是int型指针则正好可以控制A类中的i，即子类中的第一个成员变量</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p = &quot;</span> &lt;&lt; p;</span><br><span class=\"line\">    a.<span class=\"built_in\">print</span>();</span><br><span class=\"line\">    *p = <span class=\"number\">123</span>; <span class=\"comment\">//肆意改动对象b的private成员变量的值</span></span><br><span class=\"line\">    p++;      <span class=\"comment\">// p是int型指针，++后可以控制对象b中的j</span></span><br><span class=\"line\">    *p = <span class=\"number\">2333</span>;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p = &quot;</span> &lt;&lt; p;</span><br><span class=\"line\">    b.A::<span class=\"built_in\">print</span>(); <span class=\"comment\">//输出i</span></span><br><span class=\"line\">    b.<span class=\"built_in\">print</span>();    <span class=\"comment\">//输出j</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-13\"><a href=\"#输出-13\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> A.i = <span class=\"number\">1</span></span><br><span class=\"line\"> B.j = <span class=\"number\">4</span></span><br><span class=\"line\"> A.i = <span class=\"number\">1</span></span><br><span class=\"line\">p = <span class=\"number\">0x61fe04</span> A.i = <span class=\"number\">20</span></span><br><span class=\"line\">p = <span class=\"number\">0x61fdfc</span> A.i = <span class=\"number\">20</span></span><br><span class=\"line\">p = <span class=\"number\">0x61fe00</span> A.i = <span class=\"number\">123</span></span><br><span class=\"line\"> B.j = <span class=\"number\">2333</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-virtual关键字-x3D-x3D-检验代码-15-x3D-x3D\"><a href=\"#C-virtual关键字-x3D-x3D-检验代码-15-x3D-x3D\" class=\"headerlink\" title=\"C++ virtual关键字\t\t\t\t&#x3D;&#x3D;检验代码_15&#x3D;&#x3D;\"></a>C++ virtual关键字\t\t\t\t&#x3D;&#x3D;检验代码_15&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() : <span class=\"built_in\">i</span>(<span class=\"number\">123</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::f()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a, b;</span><br><span class=\"line\">    a.<span class=\"built_in\">f</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;sizeof(a) = &quot;</span> &lt;&lt; <span class=\"built_in\">sizeof</span>(a) &lt;&lt; endl;<span class=\"comment\">//输出对象a的大小</span></span><br><span class=\"line\">    <span class=\"type\">int</span> *p = (<span class=\"type\">int</span> *)&amp;a;</span><br><span class=\"line\">    <span class=\"type\">int</span> *q = (<span class=\"type\">int</span> *)&amp;b;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;q,*q = &quot;</span> &lt;&lt; *q &lt;&lt; endl;\t<span class=\"comment\">//输出对象a的vtpr指针</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p,*P = &quot;</span> &lt;&lt; *p &lt;&lt; endl;\t<span class=\"comment\">//输出对象b的vtpr指针</span></span><br><span class=\"line\">    p++;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p+1,*P = &quot;</span> &lt;&lt; *p &lt;&lt; endl;\t<span class=\"comment\">//不知道输出了什么玩意的值</span></span><br><span class=\"line\">    p++;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;p+2,*P = &quot;</span> &lt;&lt; *p &lt;&lt; endl;\t<span class=\"comment\">//输出对现象a中的i的值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-14\"><a href=\"#输出-14\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">f</span>()</span><br><span class=\"line\"><span class=\"built_in\">sizeof</span>(a) = <span class=\"number\">16</span></span><br><span class=\"line\">q,*q = <span class=\"number\">4212016</span></span><br><span class=\"line\">p,*P = <span class=\"number\">4212016</span></span><br><span class=\"line\">p+<span class=\"number\">1</span>,*P = <span class=\"number\">0</span></span><br><span class=\"line\">p+<span class=\"number\">2</span>,*P = <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-魔改vtpr-x3D-x3D-检验代码-16-x3D-x3D\"><a href=\"#C-魔改vtpr-x3D-x3D-检验代码-16-x3D-x3D\" class=\"headerlink\" title=\"C++ 魔改vtpr\t\t\t\t&#x3D;&#x3D;检验代码_16&#x3D;&#x3D;\"></a>C++ 魔改vtpr\t\t\t\t&#x3D;&#x3D;检验代码_16&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>\t\t<span class=\"comment\">//父类A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() : <span class=\"built_in\">i</span>(<span class=\"number\">123</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::f() i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> : <span class=\"keyword\">public</span> A\t\t<span class=\"comment\">//子类B</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>() : <span class=\"built_in\">j</span>(<span class=\"number\">888</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;B::f() i = &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; j = &quot;</span> &lt;&lt; j &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    B b;</span><br><span class=\"line\">    <span class=\"type\">int</span> *p = (<span class=\"type\">int</span> *)&amp;a;</span><br><span class=\"line\">    <span class=\"type\">int</span> *q = (<span class=\"type\">int</span> *)&amp;b;</span><br><span class=\"line\">    A *aa = &amp;a;</span><br><span class=\"line\">    B *bb = &amp;b;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;object a : &quot;</span> &lt;&lt; endl;\t<span class=\"comment\">//输出父类A的对象a的成员函数f</span></span><br><span class=\"line\">    aa-&gt;<span class=\"built_in\">f</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;object b : &quot;</span> &lt;&lt; endl;\t<span class=\"comment\">//输出子类B的对象b的成员函数f</span></span><br><span class=\"line\">    bb-&gt;<span class=\"built_in\">f</span>();</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;b.vtpr to a.vtpr&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;object a : &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    *p = *q;\t<span class=\"comment\">//把子类对象b的vtpr指针赋值给了父类对象a的vtpr指针</span></span><br><span class=\"line\">    aa-&gt;<span class=\"built_in\">f</span>();\t<span class=\"comment\">//此时父类对象a的vtpr已经指向了子类的vtable了所以调用的是子类的虚函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-15\"><a href=\"#输出-15\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object a :</span><br><span class=\"line\">A::<span class=\"built_in\">f</span>() i = <span class=\"number\">123</span></span><br><span class=\"line\">object b :</span><br><span class=\"line\">B::<span class=\"built_in\">f</span>() i = <span class=\"number\">123</span> j = <span class=\"number\">888</span></span><br><span class=\"line\">b.vtpr to a.vtpr</span><br><span class=\"line\">object a :</span><br><span class=\"line\">B::<span class=\"built_in\">f</span>() i = <span class=\"number\">123</span> j = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-覆写-x3D-x3D-检验代码-17-x3D-x3D\"><a href=\"#C-覆写-x3D-x3D-检验代码-17-x3D-x3D\" class=\"headerlink\" title=\"C++ 覆写\t\t\t\t&#x3D;&#x3D;检验代码_17&#x3D;&#x3D;\"></a>C++ 覆写\t\t\t\t&#x3D;&#x3D;检验代码_17&#x3D;&#x3D;</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int i;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    A() : i(123) &#123;&#125;</span><br><span class=\"line\">    virtual void f() &#123; cout &lt;&lt; &quot;A::f() i = &quot; &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class B : public A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int j;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    B() : j(888) &#123;&#125;</span><br><span class=\"line\">    virtual void f() &#123; A::f(); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    B b;</span><br><span class=\"line\">    b.f();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-16\"><a href=\"#输出-16\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::f() i = 123</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-引用再体验-x3D-x3D-检验代码-18-x3D-x3D\"><a href=\"#C-引用再体验-x3D-x3D-检验代码-18-x3D-x3D\" class=\"headerlink\" title=\"C++ 引用再体验\t\t\t\t&#x3D;&#x3D;检验代码_18&#x3D;&#x3D;\"></a>C++ 引用再体验\t\t\t\t&#x3D;&#x3D;检验代码_18&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> array[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>&amp; <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;arry[3] = &quot;</span> &lt;&lt; array[<span class=\"number\">3</span>] &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"built_in\">func</span>(<span class=\"number\">3</span>) = <span class=\"number\">24</span>;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;arry[3] = &quot;</span> &lt;&lt; array[<span class=\"number\">3</span>] &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-17\"><a href=\"#输出-17\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arry[<span class=\"number\">3</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">arry[<span class=\"number\">3</span>] = <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-匿名变量-x3D-x3D-检验代码-19-x3D-x3D\"><a href=\"#C-匿名变量-x3D-x3D-检验代码-19-x3D-x3D\" class=\"headerlink\" title=\"C++ 匿名变量\t\t\t\t&#x3D;&#x3D;检验代码_19&#x3D;&#x3D;\"></a>C++ 匿名变量\t\t\t\t&#x3D;&#x3D;检验代码_19&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">f</span>(i * <span class=\"number\">3</span>);\t\t<span class=\"comment\">//系统会自动创建一个匿名变量来保存这个运算的值</span></span><br><span class=\"line\">    <span class=\"built_in\">f</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-18\"><a href=\"#输出-18\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-静态成员变量-x3D-x3D-检验代码-20-x3D-x3D\"><a href=\"#C-静态成员变量-x3D-x3D-检验代码-20-x3D-x3D\" class=\"headerlink\" title=\"C++ 静态成员变量\t\t\t\t&#x3D;&#x3D;检验代码_20&#x3D;&#x3D;\"></a>C++ 静态成员变量\t\t\t\t&#x3D;&#x3D;检验代码_20&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;i = <span class=\"number\">10</span>;&#125;\t<span class=\"comment\">//这句只是赋值，不是初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;A::f() i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> ii)</span> </span>&#123; i = ii; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> A::i;\t<span class=\"comment\">// A类中的静态成员i的定义也是初始化（只是没有赋初值）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    A a, b;</span><br><span class=\"line\">    a.<span class=\"built_in\">set</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\">    b.<span class=\"built_in\">f</span>();\t\t<span class=\"comment\">//如果i是public的，还可以直接b.i或者A::i来访问i都一样</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-19\"><a href=\"#输出-19\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">f</span>() i = <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"C-自动类型转换-x3D-x3D-检验代码-21-x3D-x3D\"><a href=\"#C-自动类型转换-x3D-x3D-检验代码-21-x3D-x3D\" class=\"headerlink\" title=\"C++ 自动类型转换\t\t\t\t&#x3D;&#x3D;检验代码_21&#x3D;&#x3D;\"></a>C++ 自动类型转换\t\t\t\t&#x3D;&#x3D;检验代码_21&#x3D;&#x3D;</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>;\t<span class=\"comment\">//B类的前项声明，免得因为B类写在A类后面导致编译器找不到B类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:\t<span class=\"comment\">//在这个构造函数前加上关键字explicit后，将使该函数不能用于自动类型转换，然后报错</span></span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">const</span> B &amp;b) &#123; cout &lt;&lt; <span class=\"string\">&quot;A::A(const b &amp;b)&quot;</span> &lt;&lt; endl; &#125; <span class=\"comment\">// A类有一个可以通过B类对象构造自身对象的构造函数</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">B</span>() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(A a)</span> <span class=\"comment\">// f函数需要一个A类的对象</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;f()&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    B b;</span><br><span class=\"line\">    <span class=\"built_in\">f</span>(b); <span class=\"comment\">//给f函数传一个B类的对象b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-20\"><a href=\"#输出-20\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A::<span class=\"built_in\">A</span>(<span class=\"type\">const</span> b &amp;b)\t<span class=\"comment\">//默认调用的了A那个构造函数先通过B类的对象构造处一个匿名的A类的对象再传给f函数</span></span><br><span class=\"line\"><span class=\"built_in\">f</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Git笔记","date":"2022-05-24T15:12:10.000Z","_content":"\n\n\n## 创建repository\n\n### 本地\n\n```markdown\n在文件夹中使用 git init .使当前文件夹变成 repository 即创建仓库\ngit status\t查看当前git状态\necho \"文件名\" >> .gitignore\t将文件添加到.gitignore中使git不再追踪该文件变化\ngit rm -r --cached 文件名\t删除文件\ngit add 文件名\t添加文件到git跟踪中\ngit commit -a -m \"注释\"\t完成一次本地提交\ngit log\t查看之前的提交\ngit reset --hard 之前的提交id\t回到之前提交的状态，还原所有没提交的改动，且无法撤销\n```\n\n#### 提交流程图\n\n```mermaid\ngraph TB\n\tstart(完成代码) --> a[git status]\n\ta --> b[git add .]\n\tb --> c[git commit -a -m 注释]\n\tc --> d(提交完成)\n```\n\n\n\n### 同步到云端\n\n```markdown\ngit push origin\t将本地提交同步到云端\ngit pull\t从云端拉取提交\n```\n\n### 使用分支\n\n```markdown\ngit branch\t显示所有分支\ngit branch 分支名称\t\t创建一个分支\ngit checkout 分支名称\t切换分支\ngit merge a\t合并分支 即将分支a合并到当前分支\ngit branch -D\t删除分支\n```\n\n","source":"_posts/Git基础笔记.md","raw":"---\ntitle: Git笔记\ndate: 2022-05-24 23:12:10\ntag: 其他\n---\n\n\n\n## 创建repository\n\n### 本地\n\n```markdown\n在文件夹中使用 git init .使当前文件夹变成 repository 即创建仓库\ngit status\t查看当前git状态\necho \"文件名\" >> .gitignore\t将文件添加到.gitignore中使git不再追踪该文件变化\ngit rm -r --cached 文件名\t删除文件\ngit add 文件名\t添加文件到git跟踪中\ngit commit -a -m \"注释\"\t完成一次本地提交\ngit log\t查看之前的提交\ngit reset --hard 之前的提交id\t回到之前提交的状态，还原所有没提交的改动，且无法撤销\n```\n\n#### 提交流程图\n\n```mermaid\ngraph TB\n\tstart(完成代码) --> a[git status]\n\ta --> b[git add .]\n\tb --> c[git commit -a -m 注释]\n\tc --> d(提交完成)\n```\n\n\n\n### 同步到云端\n\n```markdown\ngit push origin\t将本地提交同步到云端\ngit pull\t从云端拉取提交\n```\n\n### 使用分支\n\n```markdown\ngit branch\t显示所有分支\ngit branch 分支名称\t\t创建一个分支\ngit checkout 分支名称\t切换分支\ngit merge a\t合并分支 即将分支a合并到当前分支\ngit branch -D\t删除分支\n```\n\n","slug":"Git基础笔记","published":1,"updated":"2023-02-23T16:27:04.420Z","_id":"clehaba8x0005tcvcdjhp6b65","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"创建repository\"><a href=\"#创建repository\" class=\"headerlink\" title=\"创建repository\"></a>创建repository</h2><h3 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在文件夹中使用 git init .使当前文件夹变成 repository 即创建仓库</span><br><span class=\"line\">git status\t查看当前git状态</span><br><span class=\"line\">echo &quot;文件名&quot; &gt;&gt; .gitignore\t将文件添加到.gitignore中使git不再追踪该文件变化</span><br><span class=\"line\">git rm -r --cached 文件名\t删除文件</span><br><span class=\"line\">git add 文件名\t添加文件到git跟踪中</span><br><span class=\"line\">git commit -a -m &quot;注释&quot;\t完成一次本地提交</span><br><span class=\"line\">git log\t查看之前的提交</span><br><span class=\"line\">git reset --hard 之前的提交id\t回到之前提交的状态，还原所有没提交的改动，且无法撤销</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提交流程图\"><a href=\"#提交流程图\" class=\"headerlink\" title=\"提交流程图\"></a>提交流程图</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">\tstart(完成代码) --&gt; a[git status]</span><br><span class=\"line\">\ta --&gt; b[git add .]</span><br><span class=\"line\">\tb --&gt; c[git commit -a -m 注释]</span><br><span class=\"line\">\tc --&gt; d(提交完成)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"同步到云端\"><a href=\"#同步到云端\" class=\"headerlink\" title=\"同步到云端\"></a>同步到云端</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin\t将本地提交同步到云端</span><br><span class=\"line\">git pull\t从云端拉取提交</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用分支\"><a href=\"#使用分支\" class=\"headerlink\" title=\"使用分支\"></a>使用分支</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch\t显示所有分支</span><br><span class=\"line\">git branch 分支名称\t\t创建一个分支</span><br><span class=\"line\">git checkout 分支名称\t切换分支</span><br><span class=\"line\">git merge a\t合并分支 即将分支a合并到当前分支</span><br><span class=\"line\">git branch -D\t删除分支</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"widget":{"top":[{"class_name":{"id_name":null,"name":null,"icon":null,"html":null}}],"bottom":[{"class_name":"user-map","id_name":"user-map","name":"访客地图","icon":"fas fa-heartbeat","order":null,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}}},"cover":false,"excerpt":"","more":"<h2 id=\"创建repository\"><a href=\"#创建repository\" class=\"headerlink\" title=\"创建repository\"></a>创建repository</h2><h3 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在文件夹中使用 git init .使当前文件夹变成 repository 即创建仓库</span><br><span class=\"line\">git status\t查看当前git状态</span><br><span class=\"line\">echo &quot;文件名&quot; &gt;&gt; .gitignore\t将文件添加到.gitignore中使git不再追踪该文件变化</span><br><span class=\"line\">git rm -r --cached 文件名\t删除文件</span><br><span class=\"line\">git add 文件名\t添加文件到git跟踪中</span><br><span class=\"line\">git commit -a -m &quot;注释&quot;\t完成一次本地提交</span><br><span class=\"line\">git log\t查看之前的提交</span><br><span class=\"line\">git reset --hard 之前的提交id\t回到之前提交的状态，还原所有没提交的改动，且无法撤销</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提交流程图\"><a href=\"#提交流程图\" class=\"headerlink\" title=\"提交流程图\"></a>提交流程图</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">\tstart(完成代码) --&gt; a[git status]</span><br><span class=\"line\">\ta --&gt; b[git add .]</span><br><span class=\"line\">\tb --&gt; c[git commit -a -m 注释]</span><br><span class=\"line\">\tc --&gt; d(提交完成)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"同步到云端\"><a href=\"#同步到云端\" class=\"headerlink\" title=\"同步到云端\"></a>同步到云端</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin\t将本地提交同步到云端</span><br><span class=\"line\">git pull\t从云端拉取提交</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用分支\"><a href=\"#使用分支\" class=\"headerlink\" title=\"使用分支\"></a>使用分支</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch\t显示所有分支</span><br><span class=\"line\">git branch 分支名称\t\t创建一个分支</span><br><span class=\"line\">git checkout 分支名称\t切换分支</span><br><span class=\"line\">git merge a\t合并分支 即将分支a合并到当前分支</span><br><span class=\"line\">git branch -D\t删除分支</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Markdown","date":"2022-03-10T02:21:12.000Z","_content":"\n## ==基础部分==\n\n### 关于标题\n\n```一级标题使用一个 `# ` ```\n\n```二级标题使用两个 `#` 以此类推最多支持六级标题```\n\n### 关于文字\n\n``` 删除线 使用 ~~ ~~ 如\t``` \t~~这是删除线~~\n\n```斜体 使用 * * 如\t```\t*这是斜体*\n\n```加粗 使用 ** ** 如\t ```\t**这是加粗**\n\n``` 斜体+加粗 使用 *** *** 如``` \t***这是斜体+加粗*** \n\n```下划线是HTML语法 按ctrl + u``` 如 <u>这是下划线</u>\n\n```高亮（需要勾选扩展语法）使用 == ==``` 如 ==这是高亮==\n\n```下标（需要勾选扩展语法） 使用 ~ ~ ``` 如 这是~下标~\n\n```上标（需要勾选扩展语法）使用^``` 如 这是^上标^\n\n```表情 使用: 后输入单词匹配对应的表情``` 如 这是100分 :100:\n\n### 表格\n\n```表格使用 |来分割单元格 使用-来分割表头和其他行 使用:来控制左右中对齐 ``` 如 \n\n| name  | age  |\n| -----: | :----: |\n| Alice | 18   |\n| Bob | 19 |\n\n### 引用\n\n```使用 > 类似标题也可以使用>>二级引用 以此类推```  如 \n\n> 这是一条一级引用\n\n> > 这是一条二级引用\n\n### 列表\n\n#### 无序列表\n\n``` 使用 * 作为标记或者 + 或者 - 都可```如\n\n* 这是无序列表的第一项\n\n+ 这是无序列表的第二项\n\n#### 有序列表\n\n``` 使用 数字+. 的形式 ``` 如 \n\n1. 这是有序列表的第一项\n2. 这是有序列表的第二项\n\n### 代码\n\n#### 代码块\n\n```使用 ``` ``` + 语言名称 如\n\n``` python\nprint(\"Hello Python!\")\n```\n\n#### 行内代码\n\n```使用 ` ` ``` 如 `这是行内代码`\n\n### 分割线\n\n``` 使用 *** 或者 --- 或者 ___ ``` 如 以下是分割线\n\n***\n\n### 跳转\n\n#### 外部跳转 -- 超链接\n\n```使用格式为 [提示文字](链接) 按住ctrl + 鼠标左键点击 即可跳转``` 如 [这是百度](https://www.baidu.com)\n\n#### 内部跳转 --  本文件内跳转到指定部分\n\n```使用格式 [提示文字](# 本文中的某个标题) 按住ctrl + 鼠标左键点击 即可跳转 ``` 如 [关于文字](# 关于文字)\n\n#### 自动链接\n\n``` 使用 < > 中间可填 URL 或者邮箱地址将会自动转换为超链接 ``` 如 \n\n<https://www.baidu.com>\n\n<12344@qq.com>\n\n### 图片\n\n```使用格式 ![图片描述](图片链接地址) 注地址不能加 \"\"``` 如 这是一张网络图片 ![avatar](https://avatarfiles.alphacoders.com/312/312802.png)\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t这是一张本地图片 ![test](C:\\Users\\Administrator\\Pictures\\Camera Roll\\IMG_1736.JPG)\n\n***\n\n\n\n## ==进阶部分==（画图需勾选扩展语法功能）\n\n### 流程图\n\n#### 使用方法\n\n``` graph 方向描述 ```\n\n​\t\t``` 其他语句```\n\n关键字`graph`表示流程图的开始，同时需要指定该图的方向\n\n方向描述为：T为top，B为bottom，R为right，L为left，D为down\n\n| 用词 | 含义     |\n| ---- | -------- |\n| TB   | 从上到下 |\n| BT   | 从下到上 |\n| RL   | 从右到左 |\n| LR   | 从左到右 |\n\n如\n\n```mermaid\ngraph TB;\n\tA-->B\n\tB-->C\n\tC-->A\n```\n\n如\n\n```mermaid\ngraph LR;\nB(程序开始)-->程序执行\n程序执行-->C(程序结束)\n```\n\n#### 流程图常用符号及含义\n\n##### 节点形状\n\n| 表述           | 说明         | 含义                                               |\n| -------------- | ------------ | -------------------------------------------------- |\n| id[文字内容]   | 矩形节点     | 表示过程，也即是整个流程中的一个环节               |\n| id(文字内容)   | 圆角矩形节点 | 表示开始和结束                                     |\n| id((文字内容)) | 圆形节点     | 表示连接。为避免流程过长或有交叉，可流程切开，成对 |\n| id{文字内容}   | 菱形节点     | 表示判断，决策                                     |\n| id>文字内容]   | 右向旗帜节点 | 暂不名确                                           |\n| id             | 矩形节点     | 默认id即为节点中的文字内容                         |\n\n```markdown\ngraph TB;\t分号可加可不加，graph表示是流程图\n\tA\t这是一个名称，A默认为矩形节点的内容\n\tB(这是一个圆角矩形节点)\n\tC[这是一个矩形节点]\n\tD((这是一个圆形节点))\n\tE{这是一个菱形节点}\n\tF>这是一个右向旗帜节点]\n注：定义后可直接使用id来控制节点\n```\n\n```mermaid\ngraph TB\n\tA\t\n\tB(这是一个圆角矩形节点)\n\tC[这是一个矩形节点]\n\tD((这是一个圆形节点))\n\tE{这是一个菱形节点}\n\tF>这是一个右向旗帜节点]\n```\n\n##### 连线\n\n````markdown\ngraph TB;\n\tA1-->B1\n\tA2---B2\n\tA3--text---B3\n\tA4--text-->B4\n\tA5-.-B5\n\tA6-.->B6\n\tA7-.text.-B7\n\tA8-.text.->B8\n\tA9===B9\n\tA10==>B10\n\tA11==text===B11\n\tA12==text==>B12\n````\n\n```mermaid\ngraph TB;\n\tA1-->B1\n\tA2---B2\n\tA3--text---B3\n\tA4--text-->B4\n\tA5-.-B5\n\tA6-.->B6\n\tA7-.text.-B7\n\tA8-.text.->B8\n\tA9===B9\n\tA10==>B10\n\tA11==text===B11\n\tA12==text==>B12\n```\n\n##### 子图表\n\n```markdown\nsubgraph 子图表名称\n\t其他语句，与graph一致\nend 子图表结束，将此段代码放入graph中即可生成子图表\n```\n\n```mermaid\ngraph TB;\n\tsubgraph sg\n\t\tA(开始)-->B{判断}\n\t\tB--正确-->C(结束)\n\t\tB--错误-->A\n\tend\n\tC-->D[下一次开始]\n\tD--新开始-->A\n\t\t\n```\n\n### 序列图\n\n#### 概述\n\n```markdown\n太麻烦了，放弃\n```\n\n### 饼图（pie）\n\n#### 使用方法\n\n```markdown\npie\t代表是饼图\n\ttitle 饼图的标题名\n\t该部分名称 : 占比 (输入数量会自动求和后显示占比)\n\t  ...\n```\n\n```mermaid\npie\n\ttitle politics\n\t\"gained\" : 66\n\t\"loss\" : 34\n```\n\n```mermaid\npie\n\ttitle English\n\t\"gained\" : 76\n\t\"loss\" : 24\n```\n\n```mermaid\npie\n\ttitle Mathematica\n\t\"gained\" : 72\n\t\"loss\" : 78\n```\n\n```mermaid\npie\n\ttitle Profession\n\t\"gained\" : 88\n\t\"loss\" : 62\n```\n\n```mermaid\npie\n\ttitle Time\n\t\"politics\" : 100\n\t\"english\" : 183\n\t\"mathematica\" : 560\n\t\"profession\" : 311\n```\n\n### 甘特图\n\n#### 使用方法\n\n```markdown\ngantt\t代表是甘特图\n\ttitle 甘特图的标题\n\tdateFormat YYYY-MM-DD\t日期格式 YYYY-MM-DD表示 年-月-日\n\t\n\tsection A section 部分名，这里名称为A section\n\t这里写任务名: 参数一，参数二，参数三，参数四，参数五\n如：\n\tCompleted task\t:done, des1, 2023-03-01, 2023-12-25\n\t任务名\t\t\t  :已完成 ，小名为des1，开始时间2023-03-01，结束时间2023-12-25\t(参数一未填)\n\t\n注：\n\t参数一：crit （红色框） 可不填\n\t参数二：done （已完成），active（正在进行），可不填\n\t参数三：取小名 可不填 用于实现在某活动之后开始，如：在其他的任务的参数四中使用 after A 则该任务会在A任务结束后开始\n\t参数四：任务开始时间 必填\n\t参数五：任务结束时间 必填 可使用 数字+d 表示任务持续多少天 如：3d表示任务持续3天\n\t当参数只有一个时，表示使用前一个任务的结束时间作为该任务的开始时间，仅留的一个参数为持续时间如 15d 15天\n\t\n```\n\n```mermaid\ngantt\n\ttitle postgraduate\n\tdateFormat YYYY-MM-DD\n\tsection LOOP_1\n\tMathematica_loop1 : crit, active, math_1, 2023-03-01, 30d\n    English_loop1 : crit, active, en_1, 2023-02-27,35d\n    section LOOP_2\n    Mathematica_loop2 : crit, active, math_2, after math_1, 30d \n    English_loop1 : crit, active, en_2, after en_1, 35d\n```\n\n\n\n#### 更多教程查看\t[typora官方教程](https://support.typora.io/Draw-Diagrams-With-Markdown/)\t[mermaid官方教程](https://mermaid-js.github.io/mermaid/#/)\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Markdown基础笔记.md","raw":"---\ntitle: Markdown\ndate: 2022-03-10 10:21:12\ntag: 其他\n---\n\n## ==基础部分==\n\n### 关于标题\n\n```一级标题使用一个 `# ` ```\n\n```二级标题使用两个 `#` 以此类推最多支持六级标题```\n\n### 关于文字\n\n``` 删除线 使用 ~~ ~~ 如\t``` \t~~这是删除线~~\n\n```斜体 使用 * * 如\t```\t*这是斜体*\n\n```加粗 使用 ** ** 如\t ```\t**这是加粗**\n\n``` 斜体+加粗 使用 *** *** 如``` \t***这是斜体+加粗*** \n\n```下划线是HTML语法 按ctrl + u``` 如 <u>这是下划线</u>\n\n```高亮（需要勾选扩展语法）使用 == ==``` 如 ==这是高亮==\n\n```下标（需要勾选扩展语法） 使用 ~ ~ ``` 如 这是~下标~\n\n```上标（需要勾选扩展语法）使用^``` 如 这是^上标^\n\n```表情 使用: 后输入单词匹配对应的表情``` 如 这是100分 :100:\n\n### 表格\n\n```表格使用 |来分割单元格 使用-来分割表头和其他行 使用:来控制左右中对齐 ``` 如 \n\n| name  | age  |\n| -----: | :----: |\n| Alice | 18   |\n| Bob | 19 |\n\n### 引用\n\n```使用 > 类似标题也可以使用>>二级引用 以此类推```  如 \n\n> 这是一条一级引用\n\n> > 这是一条二级引用\n\n### 列表\n\n#### 无序列表\n\n``` 使用 * 作为标记或者 + 或者 - 都可```如\n\n* 这是无序列表的第一项\n\n+ 这是无序列表的第二项\n\n#### 有序列表\n\n``` 使用 数字+. 的形式 ``` 如 \n\n1. 这是有序列表的第一项\n2. 这是有序列表的第二项\n\n### 代码\n\n#### 代码块\n\n```使用 ``` ``` + 语言名称 如\n\n``` python\nprint(\"Hello Python!\")\n```\n\n#### 行内代码\n\n```使用 ` ` ``` 如 `这是行内代码`\n\n### 分割线\n\n``` 使用 *** 或者 --- 或者 ___ ``` 如 以下是分割线\n\n***\n\n### 跳转\n\n#### 外部跳转 -- 超链接\n\n```使用格式为 [提示文字](链接) 按住ctrl + 鼠标左键点击 即可跳转``` 如 [这是百度](https://www.baidu.com)\n\n#### 内部跳转 --  本文件内跳转到指定部分\n\n```使用格式 [提示文字](# 本文中的某个标题) 按住ctrl + 鼠标左键点击 即可跳转 ``` 如 [关于文字](# 关于文字)\n\n#### 自动链接\n\n``` 使用 < > 中间可填 URL 或者邮箱地址将会自动转换为超链接 ``` 如 \n\n<https://www.baidu.com>\n\n<12344@qq.com>\n\n### 图片\n\n```使用格式 ![图片描述](图片链接地址) 注地址不能加 \"\"``` 如 这是一张网络图片 ![avatar](https://avatarfiles.alphacoders.com/312/312802.png)\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t这是一张本地图片 ![test](C:\\Users\\Administrator\\Pictures\\Camera Roll\\IMG_1736.JPG)\n\n***\n\n\n\n## ==进阶部分==（画图需勾选扩展语法功能）\n\n### 流程图\n\n#### 使用方法\n\n``` graph 方向描述 ```\n\n​\t\t``` 其他语句```\n\n关键字`graph`表示流程图的开始，同时需要指定该图的方向\n\n方向描述为：T为top，B为bottom，R为right，L为left，D为down\n\n| 用词 | 含义     |\n| ---- | -------- |\n| TB   | 从上到下 |\n| BT   | 从下到上 |\n| RL   | 从右到左 |\n| LR   | 从左到右 |\n\n如\n\n```mermaid\ngraph TB;\n\tA-->B\n\tB-->C\n\tC-->A\n```\n\n如\n\n```mermaid\ngraph LR;\nB(程序开始)-->程序执行\n程序执行-->C(程序结束)\n```\n\n#### 流程图常用符号及含义\n\n##### 节点形状\n\n| 表述           | 说明         | 含义                                               |\n| -------------- | ------------ | -------------------------------------------------- |\n| id[文字内容]   | 矩形节点     | 表示过程，也即是整个流程中的一个环节               |\n| id(文字内容)   | 圆角矩形节点 | 表示开始和结束                                     |\n| id((文字内容)) | 圆形节点     | 表示连接。为避免流程过长或有交叉，可流程切开，成对 |\n| id{文字内容}   | 菱形节点     | 表示判断，决策                                     |\n| id>文字内容]   | 右向旗帜节点 | 暂不名确                                           |\n| id             | 矩形节点     | 默认id即为节点中的文字内容                         |\n\n```markdown\ngraph TB;\t分号可加可不加，graph表示是流程图\n\tA\t这是一个名称，A默认为矩形节点的内容\n\tB(这是一个圆角矩形节点)\n\tC[这是一个矩形节点]\n\tD((这是一个圆形节点))\n\tE{这是一个菱形节点}\n\tF>这是一个右向旗帜节点]\n注：定义后可直接使用id来控制节点\n```\n\n```mermaid\ngraph TB\n\tA\t\n\tB(这是一个圆角矩形节点)\n\tC[这是一个矩形节点]\n\tD((这是一个圆形节点))\n\tE{这是一个菱形节点}\n\tF>这是一个右向旗帜节点]\n```\n\n##### 连线\n\n````markdown\ngraph TB;\n\tA1-->B1\n\tA2---B2\n\tA3--text---B3\n\tA4--text-->B4\n\tA5-.-B5\n\tA6-.->B6\n\tA7-.text.-B7\n\tA8-.text.->B8\n\tA9===B9\n\tA10==>B10\n\tA11==text===B11\n\tA12==text==>B12\n````\n\n```mermaid\ngraph TB;\n\tA1-->B1\n\tA2---B2\n\tA3--text---B3\n\tA4--text-->B4\n\tA5-.-B5\n\tA6-.->B6\n\tA7-.text.-B7\n\tA8-.text.->B8\n\tA9===B9\n\tA10==>B10\n\tA11==text===B11\n\tA12==text==>B12\n```\n\n##### 子图表\n\n```markdown\nsubgraph 子图表名称\n\t其他语句，与graph一致\nend 子图表结束，将此段代码放入graph中即可生成子图表\n```\n\n```mermaid\ngraph TB;\n\tsubgraph sg\n\t\tA(开始)-->B{判断}\n\t\tB--正确-->C(结束)\n\t\tB--错误-->A\n\tend\n\tC-->D[下一次开始]\n\tD--新开始-->A\n\t\t\n```\n\n### 序列图\n\n#### 概述\n\n```markdown\n太麻烦了，放弃\n```\n\n### 饼图（pie）\n\n#### 使用方法\n\n```markdown\npie\t代表是饼图\n\ttitle 饼图的标题名\n\t该部分名称 : 占比 (输入数量会自动求和后显示占比)\n\t  ...\n```\n\n```mermaid\npie\n\ttitle politics\n\t\"gained\" : 66\n\t\"loss\" : 34\n```\n\n```mermaid\npie\n\ttitle English\n\t\"gained\" : 76\n\t\"loss\" : 24\n```\n\n```mermaid\npie\n\ttitle Mathematica\n\t\"gained\" : 72\n\t\"loss\" : 78\n```\n\n```mermaid\npie\n\ttitle Profession\n\t\"gained\" : 88\n\t\"loss\" : 62\n```\n\n```mermaid\npie\n\ttitle Time\n\t\"politics\" : 100\n\t\"english\" : 183\n\t\"mathematica\" : 560\n\t\"profession\" : 311\n```\n\n### 甘特图\n\n#### 使用方法\n\n```markdown\ngantt\t代表是甘特图\n\ttitle 甘特图的标题\n\tdateFormat YYYY-MM-DD\t日期格式 YYYY-MM-DD表示 年-月-日\n\t\n\tsection A section 部分名，这里名称为A section\n\t这里写任务名: 参数一，参数二，参数三，参数四，参数五\n如：\n\tCompleted task\t:done, des1, 2023-03-01, 2023-12-25\n\t任务名\t\t\t  :已完成 ，小名为des1，开始时间2023-03-01，结束时间2023-12-25\t(参数一未填)\n\t\n注：\n\t参数一：crit （红色框） 可不填\n\t参数二：done （已完成），active（正在进行），可不填\n\t参数三：取小名 可不填 用于实现在某活动之后开始，如：在其他的任务的参数四中使用 after A 则该任务会在A任务结束后开始\n\t参数四：任务开始时间 必填\n\t参数五：任务结束时间 必填 可使用 数字+d 表示任务持续多少天 如：3d表示任务持续3天\n\t当参数只有一个时，表示使用前一个任务的结束时间作为该任务的开始时间，仅留的一个参数为持续时间如 15d 15天\n\t\n```\n\n```mermaid\ngantt\n\ttitle postgraduate\n\tdateFormat YYYY-MM-DD\n\tsection LOOP_1\n\tMathematica_loop1 : crit, active, math_1, 2023-03-01, 30d\n    English_loop1 : crit, active, en_1, 2023-02-27,35d\n    section LOOP_2\n    Mathematica_loop2 : crit, active, math_2, after math_1, 30d \n    English_loop1 : crit, active, en_2, after en_1, 35d\n```\n\n\n\n#### 更多教程查看\t[typora官方教程](https://support.typora.io/Draw-Diagrams-With-Markdown/)\t[mermaid官方教程](https://mermaid-js.github.io/mermaid/#/)\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Markdown基础笔记","published":1,"updated":"2023-02-23T14:53:55.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clehaba8y0006tcvc8ale66ea","content":"<h2 id=\"x3D-x3D-基础部分-x3D-x3D\"><a href=\"#x3D-x3D-基础部分-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;基础部分&#x3D;&#x3D;\"></a>&#x3D;&#x3D;基础部分&#x3D;&#x3D;</h2><h3 id=\"关于标题\"><a href=\"#关于标题\" class=\"headerlink\" title=\"关于标题\"></a>关于标题</h3><p><code>一级标题使用一个 `# ` </code></p>\n<p><code>二级标题使用两个 `#` 以此类推最多支持六级标题</code></p>\n<h3 id=\"关于文字\"><a href=\"#关于文字\" class=\"headerlink\" title=\"关于文字\"></a>关于文字</h3><figure class=\"highlight plaintext\"><figcaption><span>使用 ~~ ~~ 如\t``` \t~~这是删除线~~</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```斜体 使用 * * 如\t```\t*这是斜体*</span><br><span class=\"line\"></span><br><span class=\"line\">```加粗 使用 ** ** 如\t ```\t**这是加粗**</span><br><span class=\"line\"></span><br><span class=\"line\">``` 斜体+加粗 使用 *** *** 如``` \t***这是斜体+加粗*** </span><br><span class=\"line\"></span><br><span class=\"line\">```下划线是HTML语法 按ctrl + u``` 如 &lt;u&gt;这是下划线&lt;/u&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">```高亮（需要勾选扩展语法）使用 == ==``` 如 ==这是高亮==</span><br><span class=\"line\"></span><br><span class=\"line\">```下标（需要勾选扩展语法） 使用 ~ ~ ``` 如 这是~下标~</span><br><span class=\"line\"></span><br><span class=\"line\">```上标（需要勾选扩展语法）使用^``` 如 这是^上标^</span><br><span class=\"line\"></span><br><span class=\"line\">```表情 使用: 后输入单词匹配对应的表情``` 如 这是100分 :100:</span><br><span class=\"line\"></span><br><span class=\"line\">### 表格</span><br><span class=\"line\"></span><br><span class=\"line\">```表格使用 |来分割单元格 使用-来分割表头和其他行 使用:来控制左右中对齐 ``` 如 </span><br><span class=\"line\"></span><br><span class=\"line\">| name  | age  |</span><br><span class=\"line\">| -----: | :----: |</span><br><span class=\"line\">| Alice | 18   |</span><br><span class=\"line\">| Bob | 19 |</span><br><span class=\"line\"></span><br><span class=\"line\">### 引用</span><br><span class=\"line\"></span><br><span class=\"line\">```使用 &gt; 类似标题也可以使用&gt;&gt;二级引用 以此类推```  如 </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 这是一条一级引用</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; &gt; 这是一条二级引用</span><br><span class=\"line\"></span><br><span class=\"line\">### 列表</span><br><span class=\"line\"></span><br><span class=\"line\">#### 无序列表</span><br><span class=\"line\"></span><br><span class=\"line\">``` 使用 * 作为标记或者 + 或者 - 都可```如</span><br><span class=\"line\"></span><br><span class=\"line\">* 这是无序列表的第一项</span><br><span class=\"line\"></span><br><span class=\"line\">+ 这是无序列表的第二项</span><br><span class=\"line\"></span><br><span class=\"line\">#### 有序列表</span><br><span class=\"line\"></span><br><span class=\"line\">``` 使用 数字+. 的形式 ``` 如 </span><br><span class=\"line\"></span><br><span class=\"line\">1. 这是有序列表的第一项</span><br><span class=\"line\">2. 这是有序列表的第二项</span><br><span class=\"line\"></span><br><span class=\"line\">### 代码</span><br><span class=\"line\"></span><br><span class=\"line\">#### 代码块</span><br><span class=\"line\"></span><br><span class=\"line\">```使用 ``` ``` + 语言名称 如</span><br><span class=\"line\"></span><br><span class=\"line\">``` python</span><br><span class=\"line\">print(&quot;Hello Python!&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"行内代码\"><a href=\"#行内代码\" class=\"headerlink\" title=\"行内代码\"></a>行内代码</h4><p><code>使用 ` ` </code> 如 <code>这是行内代码</code></p>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><figure class=\"highlight plaintext\"><figcaption><span>*** 或者 --- 或者 ___ ``` 如 以下是分割线</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\">### 跳转</span><br><span class=\"line\"></span><br><span class=\"line\">#### 外部跳转 -- 超链接</span><br><span class=\"line\"></span><br><span class=\"line\">```使用格式为 [提示文字](链接) 按住ctrl + 鼠标左键点击 即可跳转``` 如 [这是百度](https://www.baidu.com)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 内部跳转 --  本文件内跳转到指定部分</span><br><span class=\"line\"></span><br><span class=\"line\">```使用格式 [提示文字](# 本文中的某个标题) 按住ctrl + 鼠标左键点击 即可跳转 ``` 如 [关于文字](# 关于文字)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 自动链接</span><br><span class=\"line\"></span><br><span class=\"line\">``` 使用 &lt; &gt; 中间可填 URL 或者邮箱地址将会自动转换为超链接 ``` 如 </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;https://www.baidu.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;12344@qq.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">### 图片</span><br><span class=\"line\"></span><br><span class=\"line\">```使用格式 ![图片描述](图片链接地址) 注地址不能加 &quot;&quot;``` 如 这是一张网络图片 ![avatar](https://avatarfiles.alphacoders.com/312/312802.png)</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t这是一张本地图片 ![test](C:\\Users\\Administrator\\Pictures\\Camera Roll\\IMG_1736.JPG)</span><br><span class=\"line\"></span><br><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## ==进阶部分==（画图需勾选扩展语法功能）</span><br><span class=\"line\"></span><br><span class=\"line\">### 流程图</span><br><span class=\"line\"></span><br><span class=\"line\">#### 使用方法</span><br><span class=\"line\"></span><br><span class=\"line\">``` graph 方向描述 ```</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\t``` 其他语句```</span><br><span class=\"line\"></span><br><span class=\"line\">关键字`graph`表示流程图的开始，同时需要指定该图的方向</span><br><span class=\"line\"></span><br><span class=\"line\">方向描述为：T为top，B为bottom，R为right，L为left，D为down</span><br><span class=\"line\"></span><br><span class=\"line\">| 用词 | 含义     |</span><br><span class=\"line\">| ---- | -------- |</span><br><span class=\"line\">| TB   | 从上到下 |</span><br><span class=\"line\">| BT   | 从下到上 |</span><br><span class=\"line\">| RL   | 从右到左 |</span><br><span class=\"line\">| LR   | 从左到右 |</span><br><span class=\"line\"></span><br><span class=\"line\">如</span><br><span class=\"line\"></span><br><span class=\"line\">```mermaid</span><br><span class=\"line\">graph TB;</span><br><span class=\"line\">\tA--&gt;B</span><br><span class=\"line\">\tB--&gt;C</span><br><span class=\"line\">\tC--&gt;A</span><br></pre></td></tr></table></figure>\n\n<p>如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">B(程序开始)--&gt;程序执行</span><br><span class=\"line\">程序执行--&gt;C(程序结束)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流程图常用符号及含义\"><a href=\"#流程图常用符号及含义\" class=\"headerlink\" title=\"流程图常用符号及含义\"></a>流程图常用符号及含义</h4><h5 id=\"节点形状\"><a href=\"#节点形状\" class=\"headerlink\" title=\"节点形状\"></a>节点形状</h5><table>\n<thead>\n<tr>\n<th>表述</th>\n<th>说明</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id[文字内容]</td>\n<td>矩形节点</td>\n<td>表示过程，也即是整个流程中的一个环节</td>\n</tr>\n<tr>\n<td>id(文字内容)</td>\n<td>圆角矩形节点</td>\n<td>表示开始和结束</td>\n</tr>\n<tr>\n<td>id((文字内容))</td>\n<td>圆形节点</td>\n<td>表示连接。为避免流程过长或有交叉，可流程切开，成对</td>\n</tr>\n<tr>\n<td>id{文字内容}</td>\n<td>菱形节点</td>\n<td>表示判断，决策</td>\n</tr>\n<tr>\n<td>id&gt;文字内容]</td>\n<td>右向旗帜节点</td>\n<td>暂不名确</td>\n</tr>\n<tr>\n<td>id</td>\n<td>矩形节点</td>\n<td>默认id即为节点中的文字内容</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;\t分号可加可不加，graph表示是流程图</span><br><span class=\"line\"><span class=\"code\">\tA\t这是一个名称，A默认为矩形节点的内容</span></span><br><span class=\"line\"><span class=\"code\">\tB(这是一个圆角矩形节点)</span></span><br><span class=\"line\"><span class=\"code\">\tC[这是一个矩形节点]</span></span><br><span class=\"line\"><span class=\"code\">\tD((这是一个圆形节点))</span></span><br><span class=\"line\"><span class=\"code\">\tE&#123;这是一个菱形节点&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tF&gt;这是一个右向旗帜节点]</span></span><br><span class=\"line\"><span class=\"code\">注：定义后可直接使用id来控制节点</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">\tA\t</span><br><span class=\"line\">\tB(这是一个圆角矩形节点)</span><br><span class=\"line\">\tC[这是一个矩形节点]</span><br><span class=\"line\">\tD((这是一个圆形节点))</span><br><span class=\"line\">\tE&#123;这是一个菱形节点&#125;</span><br><span class=\"line\">\tF&gt;这是一个右向旗帜节点]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"连线\"><a href=\"#连线\" class=\"headerlink\" title=\"连线\"></a>连线</h5><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\"><span class=\"code\">\tA1--&gt;B1</span></span><br><span class=\"line\"><span class=\"code\">\tA2---B2</span></span><br><span class=\"line\"><span class=\"code\">\tA3--text---B3</span></span><br><span class=\"line\"><span class=\"code\">\tA4--text--&gt;B4</span></span><br><span class=\"line\"><span class=\"code\">\tA5-.-B5</span></span><br><span class=\"line\"><span class=\"code\">\tA6-.-&gt;B6</span></span><br><span class=\"line\"><span class=\"code\">\tA7-.text.-B7</span></span><br><span class=\"line\"><span class=\"code\">\tA8-.text.-&gt;B8</span></span><br><span class=\"line\"><span class=\"code\">\tA9===B9</span></span><br><span class=\"line\"><span class=\"code\">\tA10==&gt;B10</span></span><br><span class=\"line\"><span class=\"code\">\tA11==text===B11</span></span><br><span class=\"line\"><span class=\"code\">\tA12==text==&gt;B12</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\">\tA1--&gt;B1</span><br><span class=\"line\">\tA2---B2</span><br><span class=\"line\">\tA3--text---B3</span><br><span class=\"line\">\tA4--text--&gt;B4</span><br><span class=\"line\">\tA5-.-B5</span><br><span class=\"line\">\tA6-.-&gt;B6</span><br><span class=\"line\">\tA7-.text.-B7</span><br><span class=\"line\">\tA8-.text.-&gt;B8</span><br><span class=\"line\">\tA9===B9</span><br><span class=\"line\">\tA10==&gt;B10</span><br><span class=\"line\">\tA11==text===B11</span><br><span class=\"line\">\tA12==text==&gt;B12</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"子图表\"><a href=\"#子图表\" class=\"headerlink\" title=\"子图表\"></a>子图表</h5><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subgraph 子图表名称</span><br><span class=\"line\"><span class=\"code\">\t其他语句，与graph一致</span></span><br><span class=\"line\"><span class=\"code\">end 子图表结束，将此段代码放入graph中即可生成子图表</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\">\tsubgraph sg</span><br><span class=\"line\">\t\tA(开始)--&gt;B&#123;判断&#125;</span><br><span class=\"line\">\t\tB--正确--&gt;C(结束)</span><br><span class=\"line\">\t\tB--错误--&gt;A</span><br><span class=\"line\">\tend</span><br><span class=\"line\">\tC--&gt;D[下一次开始]</span><br><span class=\"line\">\tD--新开始--&gt;A</span><br><span class=\"line\">\t\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"序列图\"><a href=\"#序列图\" class=\"headerlink\" title=\"序列图\"></a>序列图</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">太麻烦了，放弃</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"饼图（pie）\"><a href=\"#饼图（pie）\" class=\"headerlink\" title=\"饼图（pie）\"></a>饼图（pie）</h3><h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie\t代表是饼图</span><br><span class=\"line\"><span class=\"code\">\ttitle 饼图的标题名</span></span><br><span class=\"line\"><span class=\"code\">\t该部分名称 : 占比 (输入数量会自动求和后显示占比)</span></span><br><span class=\"line\"><span class=\"code\">\t  ...</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">\ttitle politics</span><br><span class=\"line\">\t&quot;gained&quot; : 66</span><br><span class=\"line\">\t&quot;loss&quot; : 34</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">\ttitle English</span><br><span class=\"line\">\t&quot;gained&quot; : 76</span><br><span class=\"line\">\t&quot;loss&quot; : 24</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">\ttitle Mathematica</span><br><span class=\"line\">\t&quot;gained&quot; : 72</span><br><span class=\"line\">\t&quot;loss&quot; : 78</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">\ttitle Profession</span><br><span class=\"line\">\t&quot;gained&quot; : 88</span><br><span class=\"line\">\t&quot;loss&quot; : 62</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">\ttitle Time</span><br><span class=\"line\">\t&quot;politics&quot; : 100</span><br><span class=\"line\">\t&quot;english&quot; : 183</span><br><span class=\"line\">\t&quot;mathematica&quot; : 560</span><br><span class=\"line\">\t&quot;profession&quot; : 311</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h3><h4 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt\t代表是甘特图</span><br><span class=\"line\"><span class=\"code\">\ttitle 甘特图的标题</span></span><br><span class=\"line\"><span class=\"code\">\tdateFormat YYYY-MM-DD\t日期格式 YYYY-MM-DD表示 年-月-日</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">\tsection A section 部分名，这里名称为A section</span></span><br><span class=\"line\"><span class=\"code\">\t这里写任务名: 参数一，参数二，参数三，参数四，参数五</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tCompleted task\t:done, des1, 2023-03-01, 2023-12-25</span></span><br><span class=\"line\"><span class=\"code\">\t任务名\t\t\t  :已完成 ，小名为des1，开始时间2023-03-01，结束时间2023-12-25\t(参数一未填)</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">注：</span></span><br><span class=\"line\"><span class=\"code\">\t参数一：crit （红色框） 可不填</span></span><br><span class=\"line\"><span class=\"code\">\t参数二：done （已完成），active（正在进行），可不填</span></span><br><span class=\"line\"><span class=\"code\">\t参数三：取小名 可不填 用于实现在某活动之后开始，如：在其他的任务的参数四中使用 after A 则该任务会在A任务结束后开始</span></span><br><span class=\"line\"><span class=\"code\">\t参数四：任务开始时间 必填</span></span><br><span class=\"line\"><span class=\"code\">\t参数五：任务结束时间 必填 可使用 数字+d 表示任务持续多少天 如：3d表示任务持续3天</span></span><br><span class=\"line\"><span class=\"code\">\t当参数只有一个时，表示使用前一个任务的结束时间作为该任务的开始时间，仅留的一个参数为持续时间如 15d 15天</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt</span><br><span class=\"line\">\ttitle postgraduate</span><br><span class=\"line\">\tdateFormat YYYY-MM-DD</span><br><span class=\"line\">\tsection LOOP_1</span><br><span class=\"line\">\tMathematica_loop1 : crit, active, math_1, 2023-03-01, 30d</span><br><span class=\"line\">    English_loop1 : crit, active, en_1, 2023-02-27,35d</span><br><span class=\"line\">    section LOOP_2</span><br><span class=\"line\">    Mathematica_loop2 : crit, active, math_2, after math_1, 30d </span><br><span class=\"line\">    English_loop1 : crit, active, en_2, after en_1, 35d</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"更多教程查看typora官方教程mermaid官方教程\"><a href=\"#更多教程查看typora官方教程mermaid官方教程\" class=\"headerlink\" title=\"更多教程查看\ttypora官方教程\tmermaid官方教程\"></a>更多教程查看\t<a href=\"https://support.typora.io/Draw-Diagrams-With-Markdown/\">typora官方教程</a>\t<a href=\"https://mermaid-js.github.io/mermaid/#/\">mermaid官方教程</a></h4>","site":{"data":{"widget":{"top":[{"class_name":{"id_name":null,"name":null,"icon":null,"html":null}}],"bottom":[{"class_name":"user-map","id_name":"user-map","name":"访客地图","icon":"fas fa-heartbeat","order":null,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}}},"cover":false,"excerpt":"","more":"<h2 id=\"x3D-x3D-基础部分-x3D-x3D\"><a href=\"#x3D-x3D-基础部分-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;基础部分&#x3D;&#x3D;\"></a>&#x3D;&#x3D;基础部分&#x3D;&#x3D;</h2><h3 id=\"关于标题\"><a href=\"#关于标题\" class=\"headerlink\" title=\"关于标题\"></a>关于标题</h3><p><code>一级标题使用一个 `# ` </code></p>\n<p><code>二级标题使用两个 `#` 以此类推最多支持六级标题</code></p>\n<h3 id=\"关于文字\"><a href=\"#关于文字\" class=\"headerlink\" title=\"关于文字\"></a>关于文字</h3><figure class=\"highlight plaintext\"><figcaption><span>使用 ~~ ~~ 如\t``` \t~~这是删除线~~</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```斜体 使用 * * 如\t```\t*这是斜体*</span><br><span class=\"line\"></span><br><span class=\"line\">```加粗 使用 ** ** 如\t ```\t**这是加粗**</span><br><span class=\"line\"></span><br><span class=\"line\">``` 斜体+加粗 使用 *** *** 如``` \t***这是斜体+加粗*** </span><br><span class=\"line\"></span><br><span class=\"line\">```下划线是HTML语法 按ctrl + u``` 如 &lt;u&gt;这是下划线&lt;/u&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">```高亮（需要勾选扩展语法）使用 == ==``` 如 ==这是高亮==</span><br><span class=\"line\"></span><br><span class=\"line\">```下标（需要勾选扩展语法） 使用 ~ ~ ``` 如 这是~下标~</span><br><span class=\"line\"></span><br><span class=\"line\">```上标（需要勾选扩展语法）使用^``` 如 这是^上标^</span><br><span class=\"line\"></span><br><span class=\"line\">```表情 使用: 后输入单词匹配对应的表情``` 如 这是100分 :100:</span><br><span class=\"line\"></span><br><span class=\"line\">### 表格</span><br><span class=\"line\"></span><br><span class=\"line\">```表格使用 |来分割单元格 使用-来分割表头和其他行 使用:来控制左右中对齐 ``` 如 </span><br><span class=\"line\"></span><br><span class=\"line\">| name  | age  |</span><br><span class=\"line\">| -----: | :----: |</span><br><span class=\"line\">| Alice | 18   |</span><br><span class=\"line\">| Bob | 19 |</span><br><span class=\"line\"></span><br><span class=\"line\">### 引用</span><br><span class=\"line\"></span><br><span class=\"line\">```使用 &gt; 类似标题也可以使用&gt;&gt;二级引用 以此类推```  如 </span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 这是一条一级引用</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; &gt; 这是一条二级引用</span><br><span class=\"line\"></span><br><span class=\"line\">### 列表</span><br><span class=\"line\"></span><br><span class=\"line\">#### 无序列表</span><br><span class=\"line\"></span><br><span class=\"line\">``` 使用 * 作为标记或者 + 或者 - 都可```如</span><br><span class=\"line\"></span><br><span class=\"line\">* 这是无序列表的第一项</span><br><span class=\"line\"></span><br><span class=\"line\">+ 这是无序列表的第二项</span><br><span class=\"line\"></span><br><span class=\"line\">#### 有序列表</span><br><span class=\"line\"></span><br><span class=\"line\">``` 使用 数字+. 的形式 ``` 如 </span><br><span class=\"line\"></span><br><span class=\"line\">1. 这是有序列表的第一项</span><br><span class=\"line\">2. 这是有序列表的第二项</span><br><span class=\"line\"></span><br><span class=\"line\">### 代码</span><br><span class=\"line\"></span><br><span class=\"line\">#### 代码块</span><br><span class=\"line\"></span><br><span class=\"line\">```使用 ``` ``` + 语言名称 如</span><br><span class=\"line\"></span><br><span class=\"line\">``` python</span><br><span class=\"line\">print(&quot;Hello Python!&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"行内代码\"><a href=\"#行内代码\" class=\"headerlink\" title=\"行内代码\"></a>行内代码</h4><p><code>使用 ` ` </code> 如 <code>这是行内代码</code></p>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><figure class=\"highlight plaintext\"><figcaption><span>*** 或者 --- 或者 ___ ``` 如 以下是分割线</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\">### 跳转</span><br><span class=\"line\"></span><br><span class=\"line\">#### 外部跳转 -- 超链接</span><br><span class=\"line\"></span><br><span class=\"line\">```使用格式为 [提示文字](链接) 按住ctrl + 鼠标左键点击 即可跳转``` 如 [这是百度](https://www.baidu.com)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 内部跳转 --  本文件内跳转到指定部分</span><br><span class=\"line\"></span><br><span class=\"line\">```使用格式 [提示文字](# 本文中的某个标题) 按住ctrl + 鼠标左键点击 即可跳转 ``` 如 [关于文字](# 关于文字)</span><br><span class=\"line\"></span><br><span class=\"line\">#### 自动链接</span><br><span class=\"line\"></span><br><span class=\"line\">``` 使用 &lt; &gt; 中间可填 URL 或者邮箱地址将会自动转换为超链接 ``` 如 </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;https://www.baidu.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;12344@qq.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">### 图片</span><br><span class=\"line\"></span><br><span class=\"line\">```使用格式 ![图片描述](图片链接地址) 注地址不能加 &quot;&quot;``` 如 这是一张网络图片 ![avatar](https://avatarfiles.alphacoders.com/312/312802.png)</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t这是一张本地图片 ![test](C:\\Users\\Administrator\\Pictures\\Camera Roll\\IMG_1736.JPG)</span><br><span class=\"line\"></span><br><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## ==进阶部分==（画图需勾选扩展语法功能）</span><br><span class=\"line\"></span><br><span class=\"line\">### 流程图</span><br><span class=\"line\"></span><br><span class=\"line\">#### 使用方法</span><br><span class=\"line\"></span><br><span class=\"line\">``` graph 方向描述 ```</span><br><span class=\"line\"></span><br><span class=\"line\">​\t\t``` 其他语句```</span><br><span class=\"line\"></span><br><span class=\"line\">关键字`graph`表示流程图的开始，同时需要指定该图的方向</span><br><span class=\"line\"></span><br><span class=\"line\">方向描述为：T为top，B为bottom，R为right，L为left，D为down</span><br><span class=\"line\"></span><br><span class=\"line\">| 用词 | 含义     |</span><br><span class=\"line\">| ---- | -------- |</span><br><span class=\"line\">| TB   | 从上到下 |</span><br><span class=\"line\">| BT   | 从下到上 |</span><br><span class=\"line\">| RL   | 从右到左 |</span><br><span class=\"line\">| LR   | 从左到右 |</span><br><span class=\"line\"></span><br><span class=\"line\">如</span><br><span class=\"line\"></span><br><span class=\"line\">```mermaid</span><br><span class=\"line\">graph TB;</span><br><span class=\"line\">\tA--&gt;B</span><br><span class=\"line\">\tB--&gt;C</span><br><span class=\"line\">\tC--&gt;A</span><br></pre></td></tr></table></figure>\n\n<p>如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph LR;</span><br><span class=\"line\">B(程序开始)--&gt;程序执行</span><br><span class=\"line\">程序执行--&gt;C(程序结束)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"流程图常用符号及含义\"><a href=\"#流程图常用符号及含义\" class=\"headerlink\" title=\"流程图常用符号及含义\"></a>流程图常用符号及含义</h4><h5 id=\"节点形状\"><a href=\"#节点形状\" class=\"headerlink\" title=\"节点形状\"></a>节点形状</h5><table>\n<thead>\n<tr>\n<th>表述</th>\n<th>说明</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id[文字内容]</td>\n<td>矩形节点</td>\n<td>表示过程，也即是整个流程中的一个环节</td>\n</tr>\n<tr>\n<td>id(文字内容)</td>\n<td>圆角矩形节点</td>\n<td>表示开始和结束</td>\n</tr>\n<tr>\n<td>id((文字内容))</td>\n<td>圆形节点</td>\n<td>表示连接。为避免流程过长或有交叉，可流程切开，成对</td>\n</tr>\n<tr>\n<td>id{文字内容}</td>\n<td>菱形节点</td>\n<td>表示判断，决策</td>\n</tr>\n<tr>\n<td>id&gt;文字内容]</td>\n<td>右向旗帜节点</td>\n<td>暂不名确</td>\n</tr>\n<tr>\n<td>id</td>\n<td>矩形节点</td>\n<td>默认id即为节点中的文字内容</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;\t分号可加可不加，graph表示是流程图</span><br><span class=\"line\"><span class=\"code\">\tA\t这是一个名称，A默认为矩形节点的内容</span></span><br><span class=\"line\"><span class=\"code\">\tB(这是一个圆角矩形节点)</span></span><br><span class=\"line\"><span class=\"code\">\tC[这是一个矩形节点]</span></span><br><span class=\"line\"><span class=\"code\">\tD((这是一个圆形节点))</span></span><br><span class=\"line\"><span class=\"code\">\tE&#123;这是一个菱形节点&#125;</span></span><br><span class=\"line\"><span class=\"code\">\tF&gt;这是一个右向旗帜节点]</span></span><br><span class=\"line\"><span class=\"code\">注：定义后可直接使用id来控制节点</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">\tA\t</span><br><span class=\"line\">\tB(这是一个圆角矩形节点)</span><br><span class=\"line\">\tC[这是一个矩形节点]</span><br><span class=\"line\">\tD((这是一个圆形节点))</span><br><span class=\"line\">\tE&#123;这是一个菱形节点&#125;</span><br><span class=\"line\">\tF&gt;这是一个右向旗帜节点]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"连线\"><a href=\"#连线\" class=\"headerlink\" title=\"连线\"></a>连线</h5><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\"><span class=\"code\">\tA1--&gt;B1</span></span><br><span class=\"line\"><span class=\"code\">\tA2---B2</span></span><br><span class=\"line\"><span class=\"code\">\tA3--text---B3</span></span><br><span class=\"line\"><span class=\"code\">\tA4--text--&gt;B4</span></span><br><span class=\"line\"><span class=\"code\">\tA5-.-B5</span></span><br><span class=\"line\"><span class=\"code\">\tA6-.-&gt;B6</span></span><br><span class=\"line\"><span class=\"code\">\tA7-.text.-B7</span></span><br><span class=\"line\"><span class=\"code\">\tA8-.text.-&gt;B8</span></span><br><span class=\"line\"><span class=\"code\">\tA9===B9</span></span><br><span class=\"line\"><span class=\"code\">\tA10==&gt;B10</span></span><br><span class=\"line\"><span class=\"code\">\tA11==text===B11</span></span><br><span class=\"line\"><span class=\"code\">\tA12==text==&gt;B12</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\">\tA1--&gt;B1</span><br><span class=\"line\">\tA2---B2</span><br><span class=\"line\">\tA3--text---B3</span><br><span class=\"line\">\tA4--text--&gt;B4</span><br><span class=\"line\">\tA5-.-B5</span><br><span class=\"line\">\tA6-.-&gt;B6</span><br><span class=\"line\">\tA7-.text.-B7</span><br><span class=\"line\">\tA8-.text.-&gt;B8</span><br><span class=\"line\">\tA9===B9</span><br><span class=\"line\">\tA10==&gt;B10</span><br><span class=\"line\">\tA11==text===B11</span><br><span class=\"line\">\tA12==text==&gt;B12</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"子图表\"><a href=\"#子图表\" class=\"headerlink\" title=\"子图表\"></a>子图表</h5><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subgraph 子图表名称</span><br><span class=\"line\"><span class=\"code\">\t其他语句，与graph一致</span></span><br><span class=\"line\"><span class=\"code\">end 子图表结束，将此段代码放入graph中即可生成子图表</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB;</span><br><span class=\"line\">\tsubgraph sg</span><br><span class=\"line\">\t\tA(开始)--&gt;B&#123;判断&#125;</span><br><span class=\"line\">\t\tB--正确--&gt;C(结束)</span><br><span class=\"line\">\t\tB--错误--&gt;A</span><br><span class=\"line\">\tend</span><br><span class=\"line\">\tC--&gt;D[下一次开始]</span><br><span class=\"line\">\tD--新开始--&gt;A</span><br><span class=\"line\">\t\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"序列图\"><a href=\"#序列图\" class=\"headerlink\" title=\"序列图\"></a>序列图</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">太麻烦了，放弃</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"饼图（pie）\"><a href=\"#饼图（pie）\" class=\"headerlink\" title=\"饼图（pie）\"></a>饼图（pie）</h3><h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie\t代表是饼图</span><br><span class=\"line\"><span class=\"code\">\ttitle 饼图的标题名</span></span><br><span class=\"line\"><span class=\"code\">\t该部分名称 : 占比 (输入数量会自动求和后显示占比)</span></span><br><span class=\"line\"><span class=\"code\">\t  ...</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">\ttitle politics</span><br><span class=\"line\">\t&quot;gained&quot; : 66</span><br><span class=\"line\">\t&quot;loss&quot; : 34</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">\ttitle English</span><br><span class=\"line\">\t&quot;gained&quot; : 76</span><br><span class=\"line\">\t&quot;loss&quot; : 24</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">\ttitle Mathematica</span><br><span class=\"line\">\t&quot;gained&quot; : 72</span><br><span class=\"line\">\t&quot;loss&quot; : 78</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">\ttitle Profession</span><br><span class=\"line\">\t&quot;gained&quot; : 88</span><br><span class=\"line\">\t&quot;loss&quot; : 62</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pie</span><br><span class=\"line\">\ttitle Time</span><br><span class=\"line\">\t&quot;politics&quot; : 100</span><br><span class=\"line\">\t&quot;english&quot; : 183</span><br><span class=\"line\">\t&quot;mathematica&quot; : 560</span><br><span class=\"line\">\t&quot;profession&quot; : 311</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h3><h4 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt\t代表是甘特图</span><br><span class=\"line\"><span class=\"code\">\ttitle 甘特图的标题</span></span><br><span class=\"line\"><span class=\"code\">\tdateFormat YYYY-MM-DD\t日期格式 YYYY-MM-DD表示 年-月-日</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">\tsection A section 部分名，这里名称为A section</span></span><br><span class=\"line\"><span class=\"code\">\t这里写任务名: 参数一，参数二，参数三，参数四，参数五</span></span><br><span class=\"line\"><span class=\"code\">如：</span></span><br><span class=\"line\"><span class=\"code\">\tCompleted task\t:done, des1, 2023-03-01, 2023-12-25</span></span><br><span class=\"line\"><span class=\"code\">\t任务名\t\t\t  :已完成 ，小名为des1，开始时间2023-03-01，结束时间2023-12-25\t(参数一未填)</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br><span class=\"line\"><span class=\"code\">注：</span></span><br><span class=\"line\"><span class=\"code\">\t参数一：crit （红色框） 可不填</span></span><br><span class=\"line\"><span class=\"code\">\t参数二：done （已完成），active（正在进行），可不填</span></span><br><span class=\"line\"><span class=\"code\">\t参数三：取小名 可不填 用于实现在某活动之后开始，如：在其他的任务的参数四中使用 after A 则该任务会在A任务结束后开始</span></span><br><span class=\"line\"><span class=\"code\">\t参数四：任务开始时间 必填</span></span><br><span class=\"line\"><span class=\"code\">\t参数五：任务结束时间 必填 可使用 数字+d 表示任务持续多少天 如：3d表示任务持续3天</span></span><br><span class=\"line\"><span class=\"code\">\t当参数只有一个时，表示使用前一个任务的结束时间作为该任务的开始时间，仅留的一个参数为持续时间如 15d 15天</span></span><br><span class=\"line\"><span class=\"code\">\t</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gantt</span><br><span class=\"line\">\ttitle postgraduate</span><br><span class=\"line\">\tdateFormat YYYY-MM-DD</span><br><span class=\"line\">\tsection LOOP_1</span><br><span class=\"line\">\tMathematica_loop1 : crit, active, math_1, 2023-03-01, 30d</span><br><span class=\"line\">    English_loop1 : crit, active, en_1, 2023-02-27,35d</span><br><span class=\"line\">    section LOOP_2</span><br><span class=\"line\">    Mathematica_loop2 : crit, active, math_2, after math_1, 30d </span><br><span class=\"line\">    English_loop1 : crit, active, en_2, after en_1, 35d</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"更多教程查看typora官方教程mermaid官方教程\"><a href=\"#更多教程查看typora官方教程mermaid官方教程\" class=\"headerlink\" title=\"更多教程查看\ttypora官方教程\tmermaid官方教程\"></a>更多教程查看\t<a href=\"https://support.typora.io/Draw-Diagrams-With-Markdown/\">typora官方教程</a>\t<a href=\"https://mermaid-js.github.io/mermaid/#/\">mermaid官方教程</a></h4>"},{"title":"PowerShell基础","date":"2022-05-22T11:53:26.000Z","_content":"\n## 常见命令 &&  常识\n\n```powershell\nupdate-help\t\t\t\t#更新帮助文档\nupdata-help -UICulture en-US -ErrorAction SilentlyContinue\t#选择英语且忽略错误\nHelp\t*name*\t\t\t#查询与name相关的命令\nHelp -full\t\t\t\t#显示所有文档\nHelp -ShowWindow\t\t#以图形化显示文档\nHelp -online\t\t\t#用默认浏览器打开对应命令的在线文档\n[]\t\t\t\t\t\t#表示可选参数\n<>\t\t\t\t\t\t#表示必选参数\n[[-parameter] <string>]\t\t#意思是该参数可选，当如果选上则必须要给出值\n#位置参数\t\t\t\t即不用输入参数的名称，按位置输入顺序来对应参数\tposition标出该参数是哪个位置，named表示要带参数名给值\n\n#开关参数\t\t\t\t不需要给值的参数，如：ls -force\n\n```\n\n## 配置相关\n\n### PSProvider\n\n```powershell\nget-psprovider\t\t#查看当前powershell适配器\n\nName                 Capabilities                Drives\n----                 ------------                ------\nRegistry             ShouldProcess               {HKLM, HKCU}\nAlias                ShouldProcess               {Alias}\nEnvironment          ShouldProcess               {Env}\nFileSystem           Filter, ShouldProcess, Cre… {C, D, E, F…}\nFunction             ShouldProcess               {Function}\nVariable             ShouldProcess               {Variable}\n\n\nShouldProcess\t支持-whatif，-confirm参数\nFilter\t\t支持-filter参数\nCredentials\t\t支持凭据参数（-Credentials）连接数据存储\nTransactions\t支持事务，提交操作，回滚等\n```\n\n### Get-PSDrive\n\n```powershell\nget-psdrive\t\t\t#查看当前已连接的驱动器\n\nName           Used (GB)     Free (GB) Provider      Root\n----           ---------     --------- --------      ----\nAlias                                  Alias\nC                  68.84        130.49 FileSystem    C:\\\nCert                                   Certificate   \\\nD                 180.71        450.17 FileSystem    D:\\\nE                  25.86         74.15 FileSystem    E:\\\nEnv                                    Environment\nF                  19.49         99.52 FileSystem    F:\\\nFunction                               Function\nG                 115.35        815.94 FileSystem    G:\\\nH                   0.00          0.10 FileSystem    H:\\\nHKCU                                   Registry      HKEY_CURRENT_USER\nHKLM                                   Registry      HKEY_LOCAL_MACHINE\nTemp               68.84        130.49 FileSystem    C:\\Users\\Administrato…\nVariable                               Variable\nWSMan                                  WSMan\n```\n\n\n\n## 常用命令\n\n### Get-ChildItem\n\n```markdown\n1.\taliases: ls, dir, gci\n2.\t文件属性\n    l (link)\n    d (directory)\n    a (archive)\n    r (read-only)\n    h (hidden)\n    s (system)\n3.\t参数\n\t-path\t\t指定查看路径（可以指定驱动器，磁盘，注册表）\n\t-force\t\t显示隐藏文件\n\t-filter\t\t过滤出指定文件\n\t-Recurse\t递归子文件夹\n```\n\n### Get-ItemProperty\n\n```powershell\n查看文件对象属性\n```\n\n### Set-Location\n\n```powershell\n1.\taliases: cd\n\n2.\t切换当前目录\n```\n\n### Set-ItemProperty\n\n```powershell\n设置文件对象的属性\nset-itemproperty -name isreadonly -value $true\n\n```\n\n### Get-Member\n\n```powershell\n1.\t用途\n\t\t查看当前命令输出类型，查看当前命令的属性，方法等\n2.\t缩写\n\t\tgm\n```\n\n### Get-Content\n\n```powershell\n1.\t用途\n\t\t读取文件内容\n2.\t使用方法\n\t\tGet-Content file_name\n3.\t参数\n\t\t-Path\t指定文件\n\t\t-TotalCount\tn\t指定读取多少行\n```\n\n### Select-Object\n\n```powershell\n1.\t用途\n\t挑选对象，或者对象的属性\n2.\t使用方法\n\t通常搭配管道符使用，A | select-object -property p1,p2选择某些特定的属性显示，p1,p2指选择的属性，\n3.\t参数\n\t-property\t指定显示对象的属性\n\t-last num\t选择显示后num个对象\n\t-first\tnum\t选择显示前num个对象\n\t-unique\t\t去掉重复的对象（大小写不敏感）\n```\n\n### Sort-Object\n\n```powershell\n1.\t用途\n\t按一定规则排序\n2.\t使用方法\n\t类似select-object，一般搭配pipeline使用\n3.\t参数\n\t-property\t按指定的属性排序，不指定时默认按属性Name排序\n\t-last num\t选择后num个对象\n\t-first num\t选择前num个对象\n\t-unique\t\t去掉重复内容（大小写不敏感）\n```\n\n### ==Where-Object==\n\n```powershell\n1.\t用途\n\t查找对象，常与操作符搭配使用\n2.\t使用方法\n\t类似select-object，一般搭配pipeline使用。使用时会用到 $_ 占位符号用来代表对象（其实可以理解成函数的形参，当变量传递过来时，用$_来表示当前搜索的这一行的这个对象，$_.property，访问当前对象的某个属性（相当于类的对象的成员变量的使用）），{} 脚本区域（需要使用-FilterScript参数）\n3.\t参数\n\t-FilterScript {code}\t使用脚本{}内为脚本的代码\n\t-property\t指定用于判断的属性\n```\n\n### ==操作符==\n\n```powershell\n1.\t比较操作符（多个值（用逗号隔开）比较时，返回结果为true的对象，单个值比较时，返回true或者false）\n\t-GE\t\t\t大于等于\tgrater than or equal \n\t-CGE\t\t大于等于\tC代表case-sensitive大小写敏感（以下参数都有带C格式的）\n\t-GT\t\t\t大于\t\tgrater than\n\t-EQ\t\t\t等于\t\tequal\t-CEQ代表相等（相同）且是大小写敏感的\n\t-LE \t\t小于等于\tless than or equal\n\t-LT\t\t\t小于\t\t\n\t-NE\t\t\t不等于\n2.\t模糊比较\n\t-like\t\t模糊匹配\tlike和notlike使用通配符时，用此参数。同样也有-CLIKE\n\t-notlike\tlike和notlike使用时用于判定的值要加 \"\"或'' ，如：1 -like \"1\"\n\t-Contains\t包含\t如果对象的属性值中的任何项与指定值完全匹配，则此 cmdlet 获取对象，（包含一个完全相同的值（而不是值的一部分）。始终返回布尔值）\n\t-Notcontains\t不包含一个完全相同值。始终返回布尔值。\n\t\n```\n\n\n\n## 管道——pipeline\n\n```powershell\n1.\t|\t管道符\n2.\t使用方法：\n\t\tA | B\t\t将A命令的执行结果作为B命令的输入\n3.\t效果：\t\t\n\t\t减少重复输入\n4.\t结合Get_Member查看当前命令输出类型，查看当前命令的属性，方法等\n\t如：ls | Get_Member\t\t\t\n```\n\n### 管道参数输入\n```powershell\n需要用help（在PARAMETERS）查看后续命令是否支持pipeline传的值（两种类型：ByPropertyName和ByValue）\n1.\tByValue\t\t单传值方式\t只允许使用一个参数接收管道返回的对象类型（即只能有一个地方接收上一条命令的结果）\n\t\t#上一个命令A的结果是下一条命令B的结果，如：get-content test.txt，需要查看B的输入（B的输入使用help B查看）是否有可以接收A的输出类型的参数（A的输出使用 | gm 查看）\n\n2.\tByPropertyName\t最佳匹配方式\t一次传入多个参数类型，并且命令会自动匹配\n```\n\n### ByPropertyName例子\n\n```powershell\naliases.csv文件:\t\t\t#文件中的数据是按照下一个命令的输入要求编的，new-alias命令有一个Name参数和Value参数可以接收ByPropertyName类型的pipeline input\nName, Value\nsel, Select-Object\ngs, Get-Serveice\n\n1.\t导入csv文件\nImport-Csv .\\aliases.csv | gm\n\n   TypeName: System.Management.Automation.PSCustomObject\t#显示用户自定义对象\n\nName        MemberType   Definition\n----        ----------   ----------\nEquals      Method       bool Equals(System.Object obj)\nGetHashCode Method       int GetHashCode()\nGetType     Method       type GetType()\nToString    Method       string ToString()\nName        NoteProperty string Name=sel\t\t\t#有一个Name的信息\nValue       NoteProperty string Value=Select-Object\t #有一个Value的信息，他俩用来给下一条命令传递参数值，实际上Name和Value就是下一个\n\n2.\t查看B命令的帮助文档\nhelp new-alias\t\t\t#Creates a new alias.为命令创建新的别名\n\t...\n    -Name <System.String>\t\t\t\t\t#参数（传值标记）Name\n    Specifies the new alias. You can use any alphanumeric characte\n    rs in an alias, but the first character cannot be a number.\n    Required?                    true\n    Position?                    0\n    Default value                None\n    Accept pipeline input?       True (ByPropertyName)\t\t#支持使用pipeline的ByPropertyName方式传值\n    Accept wildcard characters?  false\n    ...\n    -Value <System.String>\t\t\t\t\t#参数（传值标记）Value表\n        Specifies the name of the cmdlet or command element that is be\n        ing aliased.\n\n        Required?                    true\n        Position?                    1\n        Default value                None\n        Accept pipeline input?       True (ByPropertyName)\t#支持使用pipeline的ByPropertyName方式传值\n        Accept wildcard characters?  false\n        \n3.\t执行代码\n\tImport-Csv .\\aliases.csv | new-alias\n\n4.\t成功\n\n#注：若AB命令为同类的命令，则一般都能成功传递参数如：（各种service）get-service, stop-service, start-service\n```\n\n\n\n## PowerShell的对象\n\n```powershell\n1.\tpowershell命令输出的一行就是一个对象，列就是对象的属性（状态，名称...）\n所有对象在一起叫集合，就是输出的那张表\n如：\nls\n        Directory: C:\\Users\\Administrator\\Desktop\\test\n\n#一列就是对象的一个属性\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a---         2022/3/19     20:35          16532   1.txt\t\t#一行就是一个对象\n-a---         2022/3/19     20:26             50   aliases.csv\n-a---         2022/3/19     19:47              8   asdfas.asdfasdf\n\n#整个输出叫集合\n\n2.\t查看命令的属性（property）和方法（method）\n\tcommand | get-member\t\t#command的是代指命令\n```\n\n### 显示对象指定的属性\n\n```powershell\ncommand | select -property p_name_1, p_name_2....\t\t#select是select-object的缩写，-property指需要显示什么属性，多个属性用逗号隔开\n如：\n\tget-service | select -property ServiceName,ServiceType,UserName\n\t\n\tServiceName                                                        ServiceType UserName\n-----------                                                        ----------- --------\nAarSvc_820a0                                                               224\nAJRouter                                                     Win32ShareProcess NT AUTHORITY\\LocalService\nALG                                                            Win32OwnProcess NT AUTHORITY\\LocalService\nAppIDSvc                                                     Win32ShareProcess NT Authority\\LocalService\nAppinfo                                     Win32OwnProcess, Win32ShareProcess LocalSystem\nAppMgmt                                                      Win32ShareProcess LocalSystem\nAppReadiness                                Win32OwnProcess, Win32ShareProcess LocalSystem\nAppVClient                                                     Win32OwnProcess LocalSystem\nAppXSvc                                     Win32OwnProcess, Win32ShareProcess LocalSystem\n...\n```\n\n\n\n## 脚本块\n\n### 分类\n\n```powershell\n1.\t.NET框架命令下使用\n2.\t变量使用法\n3.\t与比较符联合使用\n```\n\n### .NET框架命令下使用\n\n```powershell\n使用：\n\tInvoke-Command -ScriptBlock { code }\n如：\n\tInvoke-command -ScriptBlock { Get-Process }\n```\n\n### 变量使用法\n\n```powershell\n使用：\n\t$var = { code }\t\t\t#其实就是把脚本块赋值给了一个变量（相当于用这个变量来代表那个脚本块）\n\t&$var\t\t\t\t\t# &代表调用变量 $var代表的脚本块，$var代表脚本块本身\n```\n\n### 与比较符联合使用\n\n```powershell\n1.\twhere-object -FilterScript { code }\t\t#where-object命令的FilterScript参数可以使用脚本块\n如：\n\t Get-Process | where -FilterScript { $_.name -like '*system*'}\n\n NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName\n ------    -----      -----     ------      --  -- -----------\n      0     0.18      40.59       0.00     136   0 Secure System\n      0     0.09      21.68       0.00       4   0 System\n     56    48.61       2.91       2.03   11708   1 SystemSettings\n\n2.\tforeach-object -process { code }\t#ForEach-Object命令的process参数可以使用脚本块\n如：\n\tGet-Process | ForEach -Process { if($_ -like '*vm*'){$_} }\n# 先判断条件语句，如果成立则执行内部{}中的代码，$_表示显示（默认显示，也可以用 . 来指定要显示对象的什么属性）当前控制的对象\n NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName\n ------    -----      -----     ------      --  -- -----------\n     10     2.38      11.70       0.00    3848   0 vmcompute\n     26   179.80     160.73       0.00    2832   0 vmms\n     12     2.37       7.41       0.00    4788   0 vmnat\n      8     7.64       5.87       0.00    4856   0 vmnetdhcp\n     27    22.10      30.55       0.00    4812   0 vmware-authd\n     34    34.30      53.90       0.00    6496   0 vmware-hostd\n     17     3.67      12.12       0.03    4584   1 vmware-tray\n     13     2.91      12.24       0.00    4840   0 vmware-usbarbitrator64\n \n 3.\tselect-object -property property_name, { code }\t\t#select-object命令的property参数可以是脚本块\n 如：\n \tGet-Process | Select-Object -Property {$_.name}, {$_.StartTime.DayOfWeek}\n \t# $_代表当前操作的对象，对象通过 . 来调用方法或属性。注：{} 不能少\n    $_.name                 $_.StartTime.DayOfWeek\n    -------                 ----------------------\n    AggregatorHost\n    ApplicationFrameHost    Tuesday\n    backgroundTaskHost      Tuesday\n    chrome                  Tuesday\n    chrome                  Tuesday\n    chrome                  Tuesday\n    chrome                  Tuesday\t\n \t\n```\n\n\n\n\n\n\n\n","source":"_posts/PowerShell基础.md","raw":"---\ntitle: PowerShell基础\ndate: 2022-05-22 19:53:26\ntag: 计算机语言\n---\n\n## 常见命令 &&  常识\n\n```powershell\nupdate-help\t\t\t\t#更新帮助文档\nupdata-help -UICulture en-US -ErrorAction SilentlyContinue\t#选择英语且忽略错误\nHelp\t*name*\t\t\t#查询与name相关的命令\nHelp -full\t\t\t\t#显示所有文档\nHelp -ShowWindow\t\t#以图形化显示文档\nHelp -online\t\t\t#用默认浏览器打开对应命令的在线文档\n[]\t\t\t\t\t\t#表示可选参数\n<>\t\t\t\t\t\t#表示必选参数\n[[-parameter] <string>]\t\t#意思是该参数可选，当如果选上则必须要给出值\n#位置参数\t\t\t\t即不用输入参数的名称，按位置输入顺序来对应参数\tposition标出该参数是哪个位置，named表示要带参数名给值\n\n#开关参数\t\t\t\t不需要给值的参数，如：ls -force\n\n```\n\n## 配置相关\n\n### PSProvider\n\n```powershell\nget-psprovider\t\t#查看当前powershell适配器\n\nName                 Capabilities                Drives\n----                 ------------                ------\nRegistry             ShouldProcess               {HKLM, HKCU}\nAlias                ShouldProcess               {Alias}\nEnvironment          ShouldProcess               {Env}\nFileSystem           Filter, ShouldProcess, Cre… {C, D, E, F…}\nFunction             ShouldProcess               {Function}\nVariable             ShouldProcess               {Variable}\n\n\nShouldProcess\t支持-whatif，-confirm参数\nFilter\t\t支持-filter参数\nCredentials\t\t支持凭据参数（-Credentials）连接数据存储\nTransactions\t支持事务，提交操作，回滚等\n```\n\n### Get-PSDrive\n\n```powershell\nget-psdrive\t\t\t#查看当前已连接的驱动器\n\nName           Used (GB)     Free (GB) Provider      Root\n----           ---------     --------- --------      ----\nAlias                                  Alias\nC                  68.84        130.49 FileSystem    C:\\\nCert                                   Certificate   \\\nD                 180.71        450.17 FileSystem    D:\\\nE                  25.86         74.15 FileSystem    E:\\\nEnv                                    Environment\nF                  19.49         99.52 FileSystem    F:\\\nFunction                               Function\nG                 115.35        815.94 FileSystem    G:\\\nH                   0.00          0.10 FileSystem    H:\\\nHKCU                                   Registry      HKEY_CURRENT_USER\nHKLM                                   Registry      HKEY_LOCAL_MACHINE\nTemp               68.84        130.49 FileSystem    C:\\Users\\Administrato…\nVariable                               Variable\nWSMan                                  WSMan\n```\n\n\n\n## 常用命令\n\n### Get-ChildItem\n\n```markdown\n1.\taliases: ls, dir, gci\n2.\t文件属性\n    l (link)\n    d (directory)\n    a (archive)\n    r (read-only)\n    h (hidden)\n    s (system)\n3.\t参数\n\t-path\t\t指定查看路径（可以指定驱动器，磁盘，注册表）\n\t-force\t\t显示隐藏文件\n\t-filter\t\t过滤出指定文件\n\t-Recurse\t递归子文件夹\n```\n\n### Get-ItemProperty\n\n```powershell\n查看文件对象属性\n```\n\n### Set-Location\n\n```powershell\n1.\taliases: cd\n\n2.\t切换当前目录\n```\n\n### Set-ItemProperty\n\n```powershell\n设置文件对象的属性\nset-itemproperty -name isreadonly -value $true\n\n```\n\n### Get-Member\n\n```powershell\n1.\t用途\n\t\t查看当前命令输出类型，查看当前命令的属性，方法等\n2.\t缩写\n\t\tgm\n```\n\n### Get-Content\n\n```powershell\n1.\t用途\n\t\t读取文件内容\n2.\t使用方法\n\t\tGet-Content file_name\n3.\t参数\n\t\t-Path\t指定文件\n\t\t-TotalCount\tn\t指定读取多少行\n```\n\n### Select-Object\n\n```powershell\n1.\t用途\n\t挑选对象，或者对象的属性\n2.\t使用方法\n\t通常搭配管道符使用，A | select-object -property p1,p2选择某些特定的属性显示，p1,p2指选择的属性，\n3.\t参数\n\t-property\t指定显示对象的属性\n\t-last num\t选择显示后num个对象\n\t-first\tnum\t选择显示前num个对象\n\t-unique\t\t去掉重复的对象（大小写不敏感）\n```\n\n### Sort-Object\n\n```powershell\n1.\t用途\n\t按一定规则排序\n2.\t使用方法\n\t类似select-object，一般搭配pipeline使用\n3.\t参数\n\t-property\t按指定的属性排序，不指定时默认按属性Name排序\n\t-last num\t选择后num个对象\n\t-first num\t选择前num个对象\n\t-unique\t\t去掉重复内容（大小写不敏感）\n```\n\n### ==Where-Object==\n\n```powershell\n1.\t用途\n\t查找对象，常与操作符搭配使用\n2.\t使用方法\n\t类似select-object，一般搭配pipeline使用。使用时会用到 $_ 占位符号用来代表对象（其实可以理解成函数的形参，当变量传递过来时，用$_来表示当前搜索的这一行的这个对象，$_.property，访问当前对象的某个属性（相当于类的对象的成员变量的使用）），{} 脚本区域（需要使用-FilterScript参数）\n3.\t参数\n\t-FilterScript {code}\t使用脚本{}内为脚本的代码\n\t-property\t指定用于判断的属性\n```\n\n### ==操作符==\n\n```powershell\n1.\t比较操作符（多个值（用逗号隔开）比较时，返回结果为true的对象，单个值比较时，返回true或者false）\n\t-GE\t\t\t大于等于\tgrater than or equal \n\t-CGE\t\t大于等于\tC代表case-sensitive大小写敏感（以下参数都有带C格式的）\n\t-GT\t\t\t大于\t\tgrater than\n\t-EQ\t\t\t等于\t\tequal\t-CEQ代表相等（相同）且是大小写敏感的\n\t-LE \t\t小于等于\tless than or equal\n\t-LT\t\t\t小于\t\t\n\t-NE\t\t\t不等于\n2.\t模糊比较\n\t-like\t\t模糊匹配\tlike和notlike使用通配符时，用此参数。同样也有-CLIKE\n\t-notlike\tlike和notlike使用时用于判定的值要加 \"\"或'' ，如：1 -like \"1\"\n\t-Contains\t包含\t如果对象的属性值中的任何项与指定值完全匹配，则此 cmdlet 获取对象，（包含一个完全相同的值（而不是值的一部分）。始终返回布尔值）\n\t-Notcontains\t不包含一个完全相同值。始终返回布尔值。\n\t\n```\n\n\n\n## 管道——pipeline\n\n```powershell\n1.\t|\t管道符\n2.\t使用方法：\n\t\tA | B\t\t将A命令的执行结果作为B命令的输入\n3.\t效果：\t\t\n\t\t减少重复输入\n4.\t结合Get_Member查看当前命令输出类型，查看当前命令的属性，方法等\n\t如：ls | Get_Member\t\t\t\n```\n\n### 管道参数输入\n```powershell\n需要用help（在PARAMETERS）查看后续命令是否支持pipeline传的值（两种类型：ByPropertyName和ByValue）\n1.\tByValue\t\t单传值方式\t只允许使用一个参数接收管道返回的对象类型（即只能有一个地方接收上一条命令的结果）\n\t\t#上一个命令A的结果是下一条命令B的结果，如：get-content test.txt，需要查看B的输入（B的输入使用help B查看）是否有可以接收A的输出类型的参数（A的输出使用 | gm 查看）\n\n2.\tByPropertyName\t最佳匹配方式\t一次传入多个参数类型，并且命令会自动匹配\n```\n\n### ByPropertyName例子\n\n```powershell\naliases.csv文件:\t\t\t#文件中的数据是按照下一个命令的输入要求编的，new-alias命令有一个Name参数和Value参数可以接收ByPropertyName类型的pipeline input\nName, Value\nsel, Select-Object\ngs, Get-Serveice\n\n1.\t导入csv文件\nImport-Csv .\\aliases.csv | gm\n\n   TypeName: System.Management.Automation.PSCustomObject\t#显示用户自定义对象\n\nName        MemberType   Definition\n----        ----------   ----------\nEquals      Method       bool Equals(System.Object obj)\nGetHashCode Method       int GetHashCode()\nGetType     Method       type GetType()\nToString    Method       string ToString()\nName        NoteProperty string Name=sel\t\t\t#有一个Name的信息\nValue       NoteProperty string Value=Select-Object\t #有一个Value的信息，他俩用来给下一条命令传递参数值，实际上Name和Value就是下一个\n\n2.\t查看B命令的帮助文档\nhelp new-alias\t\t\t#Creates a new alias.为命令创建新的别名\n\t...\n    -Name <System.String>\t\t\t\t\t#参数（传值标记）Name\n    Specifies the new alias. You can use any alphanumeric characte\n    rs in an alias, but the first character cannot be a number.\n    Required?                    true\n    Position?                    0\n    Default value                None\n    Accept pipeline input?       True (ByPropertyName)\t\t#支持使用pipeline的ByPropertyName方式传值\n    Accept wildcard characters?  false\n    ...\n    -Value <System.String>\t\t\t\t\t#参数（传值标记）Value表\n        Specifies the name of the cmdlet or command element that is be\n        ing aliased.\n\n        Required?                    true\n        Position?                    1\n        Default value                None\n        Accept pipeline input?       True (ByPropertyName)\t#支持使用pipeline的ByPropertyName方式传值\n        Accept wildcard characters?  false\n        \n3.\t执行代码\n\tImport-Csv .\\aliases.csv | new-alias\n\n4.\t成功\n\n#注：若AB命令为同类的命令，则一般都能成功传递参数如：（各种service）get-service, stop-service, start-service\n```\n\n\n\n## PowerShell的对象\n\n```powershell\n1.\tpowershell命令输出的一行就是一个对象，列就是对象的属性（状态，名称...）\n所有对象在一起叫集合，就是输出的那张表\n如：\nls\n        Directory: C:\\Users\\Administrator\\Desktop\\test\n\n#一列就是对象的一个属性\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a---         2022/3/19     20:35          16532   1.txt\t\t#一行就是一个对象\n-a---         2022/3/19     20:26             50   aliases.csv\n-a---         2022/3/19     19:47              8   asdfas.asdfasdf\n\n#整个输出叫集合\n\n2.\t查看命令的属性（property）和方法（method）\n\tcommand | get-member\t\t#command的是代指命令\n```\n\n### 显示对象指定的属性\n\n```powershell\ncommand | select -property p_name_1, p_name_2....\t\t#select是select-object的缩写，-property指需要显示什么属性，多个属性用逗号隔开\n如：\n\tget-service | select -property ServiceName,ServiceType,UserName\n\t\n\tServiceName                                                        ServiceType UserName\n-----------                                                        ----------- --------\nAarSvc_820a0                                                               224\nAJRouter                                                     Win32ShareProcess NT AUTHORITY\\LocalService\nALG                                                            Win32OwnProcess NT AUTHORITY\\LocalService\nAppIDSvc                                                     Win32ShareProcess NT Authority\\LocalService\nAppinfo                                     Win32OwnProcess, Win32ShareProcess LocalSystem\nAppMgmt                                                      Win32ShareProcess LocalSystem\nAppReadiness                                Win32OwnProcess, Win32ShareProcess LocalSystem\nAppVClient                                                     Win32OwnProcess LocalSystem\nAppXSvc                                     Win32OwnProcess, Win32ShareProcess LocalSystem\n...\n```\n\n\n\n## 脚本块\n\n### 分类\n\n```powershell\n1.\t.NET框架命令下使用\n2.\t变量使用法\n3.\t与比较符联合使用\n```\n\n### .NET框架命令下使用\n\n```powershell\n使用：\n\tInvoke-Command -ScriptBlock { code }\n如：\n\tInvoke-command -ScriptBlock { Get-Process }\n```\n\n### 变量使用法\n\n```powershell\n使用：\n\t$var = { code }\t\t\t#其实就是把脚本块赋值给了一个变量（相当于用这个变量来代表那个脚本块）\n\t&$var\t\t\t\t\t# &代表调用变量 $var代表的脚本块，$var代表脚本块本身\n```\n\n### 与比较符联合使用\n\n```powershell\n1.\twhere-object -FilterScript { code }\t\t#where-object命令的FilterScript参数可以使用脚本块\n如：\n\t Get-Process | where -FilterScript { $_.name -like '*system*'}\n\n NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName\n ------    -----      -----     ------      --  -- -----------\n      0     0.18      40.59       0.00     136   0 Secure System\n      0     0.09      21.68       0.00       4   0 System\n     56    48.61       2.91       2.03   11708   1 SystemSettings\n\n2.\tforeach-object -process { code }\t#ForEach-Object命令的process参数可以使用脚本块\n如：\n\tGet-Process | ForEach -Process { if($_ -like '*vm*'){$_} }\n# 先判断条件语句，如果成立则执行内部{}中的代码，$_表示显示（默认显示，也可以用 . 来指定要显示对象的什么属性）当前控制的对象\n NPM(K)    PM(M)      WS(M)     CPU(s)      Id  SI ProcessName\n ------    -----      -----     ------      --  -- -----------\n     10     2.38      11.70       0.00    3848   0 vmcompute\n     26   179.80     160.73       0.00    2832   0 vmms\n     12     2.37       7.41       0.00    4788   0 vmnat\n      8     7.64       5.87       0.00    4856   0 vmnetdhcp\n     27    22.10      30.55       0.00    4812   0 vmware-authd\n     34    34.30      53.90       0.00    6496   0 vmware-hostd\n     17     3.67      12.12       0.03    4584   1 vmware-tray\n     13     2.91      12.24       0.00    4840   0 vmware-usbarbitrator64\n \n 3.\tselect-object -property property_name, { code }\t\t#select-object命令的property参数可以是脚本块\n 如：\n \tGet-Process | Select-Object -Property {$_.name}, {$_.StartTime.DayOfWeek}\n \t# $_代表当前操作的对象，对象通过 . 来调用方法或属性。注：{} 不能少\n    $_.name                 $_.StartTime.DayOfWeek\n    -------                 ----------------------\n    AggregatorHost\n    ApplicationFrameHost    Tuesday\n    backgroundTaskHost      Tuesday\n    chrome                  Tuesday\n    chrome                  Tuesday\n    chrome                  Tuesday\n    chrome                  Tuesday\t\n \t\n```\n\n\n\n\n\n\n\n","slug":"PowerShell基础","published":1,"updated":"2023-02-23T16:27:52.068Z","_id":"clehaba8z0007tcvcgvja22ks","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"常见命令-amp-amp-常识\"><a href=\"#常见命令-amp-amp-常识\" class=\"headerlink\" title=\"常见命令 &amp;&amp;  常识\"></a>常见命令 &amp;&amp;  常识</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">update-help</span>\t\t\t\t<span class=\"comment\">#更新帮助文档</span></span><br><span class=\"line\">updata<span class=\"literal\">-help</span> <span class=\"literal\">-UICulture</span> en<span class=\"literal\">-US</span> <span class=\"literal\">-ErrorAction</span> SilentlyContinue\t<span class=\"comment\">#选择英语且忽略错误</span></span><br><span class=\"line\">Help\t*name*\t\t\t<span class=\"comment\">#查询与name相关的命令</span></span><br><span class=\"line\">Help <span class=\"literal\">-full</span>\t\t\t\t<span class=\"comment\">#显示所有文档</span></span><br><span class=\"line\">Help <span class=\"literal\">-ShowWindow</span>\t\t<span class=\"comment\">#以图形化显示文档</span></span><br><span class=\"line\">Help <span class=\"literal\">-online</span>\t\t\t<span class=\"comment\">#用默认浏览器打开对应命令的在线文档</span></span><br><span class=\"line\">[]\t\t\t\t\t\t<span class=\"comment\">#表示可选参数</span></span><br><span class=\"line\">&lt;&gt;\t\t\t\t\t\t<span class=\"comment\">#表示必选参数</span></span><br><span class=\"line\">[[-<span class=\"type\">parameter</span>] &lt;<span class=\"built_in\">string</span>&gt;]\t\t<span class=\"comment\">#意思是该参数可选，当如果选上则必须要给出值</span></span><br><span class=\"line\"><span class=\"comment\">#位置参数\t\t\t\t即不用输入参数的名称，按位置输入顺序来对应参数\tposition标出该参数是哪个位置，named表示要带参数名给值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开关参数\t\t\t\t不需要给值的参数，如：ls -force</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置相关\"><a href=\"#配置相关\" class=\"headerlink\" title=\"配置相关\"></a>配置相关</h2><h3 id=\"PSProvider\"><a href=\"#PSProvider\" class=\"headerlink\" title=\"PSProvider\"></a>PSProvider</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">get-psprovider</span>\t\t<span class=\"comment\">#查看当前powershell适配器</span></span><br><span class=\"line\"></span><br><span class=\"line\">Name                 Capabilities                Drives</span><br><span class=\"line\"><span class=\"literal\">----</span>                 <span class=\"literal\">------------</span>                <span class=\"literal\">------</span></span><br><span class=\"line\">Registry             ShouldProcess               &#123;HKLM, HKCU&#125;</span><br><span class=\"line\">Alias                ShouldProcess               &#123;Alias&#125;</span><br><span class=\"line\">Environment          ShouldProcess               &#123;Env&#125;</span><br><span class=\"line\">FileSystem           <span class=\"keyword\">Filter</span>, ShouldProcess, Cre… &#123;C, D, E, F…&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">Function</span>             <span class=\"title\">ShouldProcess</span></span>               &#123;Function&#125;</span><br><span class=\"line\">Variable             ShouldProcess               &#123;Variable&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ShouldProcess\t支持<span class=\"literal\">-whatif</span>，<span class=\"literal\">-confirm</span>参数</span><br><span class=\"line\"><span class=\"keyword\">Filter</span>\t\t支持<span class=\"literal\">-filter</span>参数</span><br><span class=\"line\">Credentials\t\t支持凭据参数（<span class=\"literal\">-Credentials</span>）连接数据存储</span><br><span class=\"line\">Transactions\t支持事务，提交操作，回滚等</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Get-PSDrive\"><a href=\"#Get-PSDrive\" class=\"headerlink\" title=\"Get-PSDrive\"></a>Get-PSDrive</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">get-psdrive</span>\t\t\t<span class=\"comment\">#查看当前已连接的驱动器</span></span><br><span class=\"line\"></span><br><span class=\"line\">Name           Used (GB)     Free (GB) Provider      Root</span><br><span class=\"line\"><span class=\"literal\">----</span>           <span class=\"literal\">---------</span>     <span class=\"literal\">---------</span> <span class=\"literal\">--------</span>      <span class=\"literal\">----</span></span><br><span class=\"line\">Alias                                  Alias</span><br><span class=\"line\">C                  <span class=\"number\">68.84</span>        <span class=\"number\">130.49</span> FileSystem    C:\\</span><br><span class=\"line\">Cert                                   Certificate   \\</span><br><span class=\"line\">D                 <span class=\"number\">180.71</span>        <span class=\"number\">450.17</span> FileSystem    D:\\</span><br><span class=\"line\">E                  <span class=\"number\">25.86</span>         <span class=\"number\">74.15</span> FileSystem    E:\\</span><br><span class=\"line\">Env                                    Environment</span><br><span class=\"line\">F                  <span class=\"number\">19.49</span>         <span class=\"number\">99.52</span> FileSystem    F:\\</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">Function</span>                               <span class=\"keyword\">Function</span></span></span><br><span class=\"line\">G                 <span class=\"number\">115.35</span>        <span class=\"number\">815.94</span> FileSystem    G:\\</span><br><span class=\"line\"><span class=\"built_in\">H</span>                   <span class=\"number\">0.00</span>          <span class=\"number\">0.10</span> FileSystem    <span class=\"built_in\">H</span>:\\</span><br><span class=\"line\">HKCU                                   Registry      HKEY_CURRENT_USER</span><br><span class=\"line\">HKLM                                   Registry      HKEY_LOCAL_MACHINE</span><br><span class=\"line\">Temp               <span class=\"number\">68.84</span>        <span class=\"number\">130.49</span> FileSystem    C:\\Users\\Administrato…</span><br><span class=\"line\">Variable                               Variable</span><br><span class=\"line\">WSMan                                  WSMan</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"Get-ChildItem\"><a href=\"#Get-ChildItem\" class=\"headerlink\" title=\"Get-ChildItem\"></a>Get-ChildItem</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\taliases: ls, dir, gci</span><br><span class=\"line\"><span class=\"bullet\">2.</span>\t文件属性</span><br><span class=\"line\"><span class=\"code\">    l (link)</span></span><br><span class=\"line\"><span class=\"code\">    d (directory)</span></span><br><span class=\"line\"><span class=\"code\">    a (archive)</span></span><br><span class=\"line\"><span class=\"code\">    r (read-only)</span></span><br><span class=\"line\"><span class=\"code\">    h (hidden)</span></span><br><span class=\"line\"><span class=\"code\">    s (system)</span></span><br><span class=\"line\"><span class=\"code\">3.\t参数</span></span><br><span class=\"line\"><span class=\"code\">\t-path\t\t指定查看路径（可以指定驱动器，磁盘，注册表）</span></span><br><span class=\"line\"><span class=\"code\">\t-force\t\t显示隐藏文件</span></span><br><span class=\"line\"><span class=\"code\">\t-filter\t\t过滤出指定文件</span></span><br><span class=\"line\"><span class=\"code\">\t-Recurse\t递归子文件夹</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Get-ItemProperty\"><a href=\"#Get-ItemProperty\" class=\"headerlink\" title=\"Get-ItemProperty\"></a>Get-ItemProperty</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看文件对象属性</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Set-Location\"><a href=\"#Set-Location\" class=\"headerlink\" title=\"Set-Location\"></a>Set-Location</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\taliases: <span class=\"built_in\">cd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.\t切换当前目录</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Set-ItemProperty\"><a href=\"#Set-ItemProperty\" class=\"headerlink\" title=\"Set-ItemProperty\"></a>Set-ItemProperty</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置文件对象的属性</span><br><span class=\"line\"><span class=\"built_in\">set-itemproperty</span> <span class=\"literal\">-name</span> isreadonly <span class=\"literal\">-value</span> <span class=\"variable\">$true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Get-Member\"><a href=\"#Get-Member\" class=\"headerlink\" title=\"Get-Member\"></a>Get-Member</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t用途</span><br><span class=\"line\">\t\t查看当前命令输出类型，查看当前命令的属性，方法等</span><br><span class=\"line\"><span class=\"number\">2</span>.\t缩写</span><br><span class=\"line\">\t\t<span class=\"built_in\">gm</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Get-Content\"><a href=\"#Get-Content\" class=\"headerlink\" title=\"Get-Content\"></a>Get-Content</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t用途</span><br><span class=\"line\">\t\t读取文件内容</span><br><span class=\"line\"><span class=\"number\">2</span>.\t使用方法</span><br><span class=\"line\">\t\t<span class=\"built_in\">Get-Content</span> file_name</span><br><span class=\"line\"><span class=\"number\">3</span>.\t参数</span><br><span class=\"line\">\t\t<span class=\"literal\">-Path</span>\t指定文件</span><br><span class=\"line\">\t\t<span class=\"literal\">-TotalCount</span>\tn\t指定读取多少行</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Select-Object\"><a href=\"#Select-Object\" class=\"headerlink\" title=\"Select-Object\"></a>Select-Object</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t用途</span><br><span class=\"line\">\t挑选对象，或者对象的属性</span><br><span class=\"line\"><span class=\"number\">2</span>.\t使用方法</span><br><span class=\"line\">\t通常搭配管道符使用，A | <span class=\"built_in\">select-object</span> <span class=\"literal\">-property</span> p1,p2选择某些特定的属性显示，p1,p2指选择的属性，</span><br><span class=\"line\"><span class=\"number\">3</span>.\t参数</span><br><span class=\"line\">\t<span class=\"literal\">-property</span>\t指定显示对象的属性</span><br><span class=\"line\">\t<span class=\"literal\">-last</span> num\t选择显示后num个对象</span><br><span class=\"line\">\t<span class=\"literal\">-first</span>\tnum\t选择显示前num个对象</span><br><span class=\"line\">\t<span class=\"literal\">-unique</span>\t\t去掉重复的对象（大小写不敏感）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sort-Object\"><a href=\"#Sort-Object\" class=\"headerlink\" title=\"Sort-Object\"></a>Sort-Object</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t用途</span><br><span class=\"line\">\t按一定规则排序</span><br><span class=\"line\"><span class=\"number\">2</span>.\t使用方法</span><br><span class=\"line\">\t类似<span class=\"built_in\">select-object</span>，一般搭配pipeline使用</span><br><span class=\"line\"><span class=\"number\">3</span>.\t参数</span><br><span class=\"line\">\t<span class=\"literal\">-property</span>\t按指定的属性排序，不指定时默认按属性Name排序</span><br><span class=\"line\">\t<span class=\"literal\">-last</span> num\t选择后num个对象</span><br><span class=\"line\">\t<span class=\"literal\">-first</span> num\t选择前num个对象</span><br><span class=\"line\">\t<span class=\"literal\">-unique</span>\t\t去掉重复内容（大小写不敏感）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-Where-Object-x3D-x3D\"><a href=\"#x3D-x3D-Where-Object-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;Where-Object&#x3D;&#x3D;\"></a>&#x3D;&#x3D;Where-Object&#x3D;&#x3D;</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t用途</span><br><span class=\"line\">\t查找对象，常与操作符搭配使用</span><br><span class=\"line\"><span class=\"number\">2</span>.\t使用方法</span><br><span class=\"line\">\t类似<span class=\"built_in\">select-object</span>，一般搭配pipeline使用。使用时会用到 <span class=\"variable\">$_</span> 占位符号用来代表对象（其实可以理解成函数的形参，当变量传递过来时，用<span class=\"variable\">$_</span>来表示当前搜索的这一行的这个对象，<span class=\"variable\">$_</span>.property，访问当前对象的某个属性（相当于类的对象的成员变量的使用）），&#123;&#125; 脚本区域（需要使用<span class=\"literal\">-FilterScript</span>参数）</span><br><span class=\"line\"><span class=\"number\">3</span>.\t参数</span><br><span class=\"line\">\t<span class=\"literal\">-FilterScript</span> &#123;code&#125;\t使用脚本&#123;&#125;内为脚本的代码</span><br><span class=\"line\">\t<span class=\"literal\">-property</span>\t指定用于判断的属性</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-操作符-x3D-x3D\"><a href=\"#x3D-x3D-操作符-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;操作符&#x3D;&#x3D;\"></a>&#x3D;&#x3D;操作符&#x3D;&#x3D;</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t比较操作符（多个值（用逗号隔开）比较时，返回结果为true的对象，单个值比较时，返回true或者false）</span><br><span class=\"line\">\t<span class=\"operator\">-GE</span>\t\t\t大于等于\tgrater than or equal </span><br><span class=\"line\">\t<span class=\"operator\">-CGE</span>\t\t大于等于\tC代表case<span class=\"literal\">-sensitive</span>大小写敏感（以下参数都有带C格式的）</span><br><span class=\"line\">\t<span class=\"operator\">-GT</span>\t\t\t大于\t\tgrater than</span><br><span class=\"line\">\t<span class=\"operator\">-EQ</span>\t\t\t等于\t\tequal\t<span class=\"operator\">-CEQ</span>代表相等（相同）且是大小写敏感的</span><br><span class=\"line\">\t<span class=\"operator\">-LE</span> \t\t小于等于\tless than or equal</span><br><span class=\"line\">\t<span class=\"operator\">-LT</span>\t\t\t小于\t\t</span><br><span class=\"line\">\t<span class=\"operator\">-NE</span>\t\t\t不等于</span><br><span class=\"line\"><span class=\"number\">2</span>.\t模糊比较</span><br><span class=\"line\">\t<span class=\"operator\">-like</span>\t\t模糊匹配\tlike和notlike使用通配符时，用此参数。同样也有<span class=\"operator\">-CLIKE</span></span><br><span class=\"line\">\t<span class=\"operator\">-notlike</span>\tlike和notlike使用时用于判定的值要加 <span class=\"string\">&quot;&quot;</span>或<span class=\"string\">&#x27;&#x27;</span> ，如：<span class=\"number\">1</span> <span class=\"operator\">-like</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">\t<span class=\"operator\">-Contains</span>\t包含\t如果对象的属性值中的任何项与指定值完全匹配，则此 cmdlet 获取对象，（包含一个完全相同的值（而不是值的一部分）。始终返回布尔值）</span><br><span class=\"line\">\t<span class=\"operator\">-Notcontains</span>\t不包含一个完全相同值。始终返回布尔值。</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"管道——pipeline\"><a href=\"#管道——pipeline\" class=\"headerlink\" title=\"管道——pipeline\"></a>管道——pipeline</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t|\t管道符</span><br><span class=\"line\"><span class=\"number\">2</span>.\t使用方法：</span><br><span class=\"line\">\t\tA | B\t\t将A命令的执行结果作为B命令的输入</span><br><span class=\"line\"><span class=\"number\">3</span>.\t效果：\t\t</span><br><span class=\"line\">\t\t减少重复输入</span><br><span class=\"line\"><span class=\"number\">4</span>.\t结合Get_Member查看当前命令输出类型，查看当前命令的属性，方法等</span><br><span class=\"line\">\t如：<span class=\"built_in\">ls</span> | Get_Member\t\t\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"管道参数输入\"><a href=\"#管道参数输入\" class=\"headerlink\" title=\"管道参数输入\"></a>管道参数输入</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需要用help（在PARAMETERS）查看后续命令是否支持pipeline传的值（两种类型：ByPropertyName和ByValue）</span><br><span class=\"line\"><span class=\"number\">1</span>.\tByValue\t\t单传值方式\t只允许使用一个参数接收管道返回的对象类型（即只能有一个地方接收上一条命令的结果）</span><br><span class=\"line\">\t\t<span class=\"comment\">#上一个命令A的结果是下一条命令B的结果，如：get-content test.txt，需要查看B的输入（B的输入使用help B查看）是否有可以接收A的输出类型的参数（A的输出使用 | gm 查看）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.\tByPropertyName\t最佳匹配方式\t一次传入多个参数类型，并且命令会自动匹配</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ByPropertyName例子\"><a href=\"#ByPropertyName例子\" class=\"headerlink\" title=\"ByPropertyName例子\"></a>ByPropertyName例子</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aliases.csv文件:\t\t\t<span class=\"comment\">#文件中的数据是按照下一个命令的输入要求编的，new-alias命令有一个Name参数和Value参数可以接收ByPropertyName类型的pipeline input</span></span><br><span class=\"line\">Name, Value</span><br><span class=\"line\">sel, <span class=\"built_in\">Select-Object</span></span><br><span class=\"line\">gs, <span class=\"built_in\">Get-Serveice</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.\t导入csv文件</span><br><span class=\"line\"><span class=\"built_in\">Import-Csv</span> .\\aliases.csv | <span class=\"built_in\">gm</span></span><br><span class=\"line\"></span><br><span class=\"line\">   TypeName: System.Management.Automation.PSCustomObject\t<span class=\"comment\">#显示用户自定义对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">Name        MemberType   Definition</span><br><span class=\"line\"><span class=\"literal\">----</span>        <span class=\"literal\">----------</span>   <span class=\"literal\">----------</span></span><br><span class=\"line\">Equals      Method       bool Equals(System.Object obj)</span><br><span class=\"line\">GetHashCode Method       int GetHashCode()</span><br><span class=\"line\">GetType     Method       <span class=\"built_in\">type</span> GetType()</span><br><span class=\"line\">ToString    Method       string ToString()</span><br><span class=\"line\">Name        NoteProperty string Name=sel\t\t\t<span class=\"comment\">#有一个Name的信息</span></span><br><span class=\"line\">Value       NoteProperty string Value=<span class=\"built_in\">Select-Object</span>\t <span class=\"comment\">#有一个Value的信息，他俩用来给下一条命令传递参数值，实际上Name和Value就是下一个</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.\t查看B命令的帮助文档</span><br><span class=\"line\">help <span class=\"built_in\">new-alias</span>\t\t\t<span class=\"comment\">#Creates a new alias.为命令创建新的别名</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">    <span class=\"literal\">-Name</span> &lt;System.String&gt;\t\t\t\t\t<span class=\"comment\">#参数（传值标记）Name</span></span><br><span class=\"line\">    Specifies the new alias. You can use any alphanumeric characte</span><br><span class=\"line\">    rs <span class=\"keyword\">in</span> an alias, but the first character cannot be a number.</span><br><span class=\"line\">    Required?                    true</span><br><span class=\"line\">    Position?                    <span class=\"number\">0</span></span><br><span class=\"line\">    Default value                None</span><br><span class=\"line\">    Accept pipeline input?       True (ByPropertyName)\t\t<span class=\"comment\">#支持使用pipeline的ByPropertyName方式传值</span></span><br><span class=\"line\">    Accept wildcard characters?  false</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"literal\">-Value</span> &lt;System.String&gt;\t\t\t\t\t<span class=\"comment\">#参数（传值标记）Value表</span></span><br><span class=\"line\">        Specifies the name of the cmdlet or command element that is be</span><br><span class=\"line\">        ing aliased.</span><br><span class=\"line\"></span><br><span class=\"line\">        Required?                    true</span><br><span class=\"line\">        Position?                    <span class=\"number\">1</span></span><br><span class=\"line\">        Default value                None</span><br><span class=\"line\">        Accept pipeline input?       True (ByPropertyName)\t<span class=\"comment\">#支持使用pipeline的ByPropertyName方式传值</span></span><br><span class=\"line\">        Accept wildcard characters?  false</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"number\">3</span>.\t执行代码</span><br><span class=\"line\">\t<span class=\"built_in\">Import-Csv</span> .\\aliases.csv | <span class=\"built_in\">new-alias</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>.\t成功</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注：若AB命令为同类的命令，则一般都能成功传递参数如：（各种service）get-service, stop-service, start-service</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"PowerShell的对象\"><a href=\"#PowerShell的对象\" class=\"headerlink\" title=\"PowerShell的对象\"></a>PowerShell的对象</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\tpowershell命令输出的一行就是一个对象，列就是对象的属性（状态，名称...）</span><br><span class=\"line\">所有对象在一起叫集合，就是输出的那张表</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\">        Directory: C:\\Users\\Administrator\\Desktop\\test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#一列就是对象的一个属性</span></span><br><span class=\"line\">Mode                LastWriteTime         Length Name</span><br><span class=\"line\"><span class=\"literal\">----</span>                <span class=\"literal\">-------------</span>         <span class=\"literal\">------</span> <span class=\"literal\">----</span></span><br><span class=\"line\"><span class=\"literal\">-a---</span>         <span class=\"number\">2022</span>/<span class=\"number\">3</span>/<span class=\"number\">19</span>     <span class=\"number\">20</span>:<span class=\"number\">35</span>          <span class=\"number\">16532</span>   <span class=\"number\">1</span>.txt\t\t<span class=\"comment\">#一行就是一个对象</span></span><br><span class=\"line\"><span class=\"literal\">-a---</span>         <span class=\"number\">2022</span>/<span class=\"number\">3</span>/<span class=\"number\">19</span>     <span class=\"number\">20</span>:<span class=\"number\">26</span>             <span class=\"number\">50</span>   aliases.csv</span><br><span class=\"line\"><span class=\"literal\">-a---</span>         <span class=\"number\">2022</span>/<span class=\"number\">3</span>/<span class=\"number\">19</span>     <span class=\"number\">19</span>:<span class=\"number\">47</span>              <span class=\"number\">8</span>   asdfas.asdfasdf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#整个输出叫集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.\t查看命令的属性（property）和方法（method）</span><br><span class=\"line\">\tcommand | <span class=\"built_in\">get-member</span>\t\t<span class=\"comment\">#command的是代指命令</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"显示对象指定的属性\"><a href=\"#显示对象指定的属性\" class=\"headerlink\" title=\"显示对象指定的属性\"></a>显示对象指定的属性</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command | <span class=\"built_in\">select</span> <span class=\"literal\">-property</span> p_name_1, p_name_2....\t\t<span class=\"comment\">#select是select-object的缩写，-property指需要显示什么属性，多个属性用逗号隔开</span></span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"built_in\">get-service</span> | <span class=\"built_in\">select</span> <span class=\"literal\">-property</span> ServiceName,ServiceType,UserName</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tServiceName                                                        ServiceType UserName</span><br><span class=\"line\"><span class=\"literal\">-----------</span>                                                        <span class=\"literal\">-----------</span> <span class=\"literal\">--------</span></span><br><span class=\"line\">AarSvc_820a0                                                               <span class=\"number\">224</span></span><br><span class=\"line\">AJRouter                                                     Win32ShareProcess NT AUTHORITY\\LocalService</span><br><span class=\"line\">ALG                                                            Win32OwnProcess NT AUTHORITY\\LocalService</span><br><span class=\"line\">AppIDSvc                                                     Win32ShareProcess NT Authority\\LocalService</span><br><span class=\"line\">Appinfo                                     Win32OwnProcess, Win32ShareProcess LocalSystem</span><br><span class=\"line\">AppMgmt                                                      Win32ShareProcess LocalSystem</span><br><span class=\"line\">AppReadiness                                Win32OwnProcess, Win32ShareProcess LocalSystem</span><br><span class=\"line\">AppVClient                                                     Win32OwnProcess LocalSystem</span><br><span class=\"line\">AppXSvc                                     Win32OwnProcess, Win32ShareProcess LocalSystem</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"脚本块\"><a href=\"#脚本块\" class=\"headerlink\" title=\"脚本块\"></a>脚本块</h2><h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t.NET框架命令下使用</span><br><span class=\"line\"><span class=\"number\">2</span>.\t变量使用法</span><br><span class=\"line\"><span class=\"number\">3</span>.\t与比较符联合使用</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NET框架命令下使用\"><a href=\"#NET框架命令下使用\" class=\"headerlink\" title=\".NET框架命令下使用\"></a>.NET框架命令下使用</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用：</span><br><span class=\"line\">\t<span class=\"built_in\">Invoke-Command</span> <span class=\"literal\">-ScriptBlock</span> &#123; code &#125;</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"built_in\">Invoke-command</span> <span class=\"literal\">-ScriptBlock</span> &#123; <span class=\"built_in\">Get-Process</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量使用法\"><a href=\"#变量使用法\" class=\"headerlink\" title=\"变量使用法\"></a>变量使用法</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用：</span><br><span class=\"line\">\t<span class=\"variable\">$var</span> = &#123; code &#125;\t\t\t<span class=\"comment\">#其实就是把脚本块赋值给了一个变量（相当于用这个变量来代表那个脚本块）</span></span><br><span class=\"line\">\t&amp;<span class=\"variable\">$var</span>\t\t\t\t\t<span class=\"comment\"># &amp;代表调用变量 $var代表的脚本块，$var代表脚本块本身</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"与比较符联合使用\"><a href=\"#与比较符联合使用\" class=\"headerlink\" title=\"与比较符联合使用\"></a>与比较符联合使用</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t<span class=\"built_in\">where-object</span> <span class=\"literal\">-FilterScript</span> &#123; code &#125;\t\t<span class=\"comment\">#where-object命令的FilterScript参数可以使用脚本块</span></span><br><span class=\"line\">如：</span><br><span class=\"line\">\t <span class=\"built_in\">Get-Process</span> | <span class=\"built_in\">where</span> <span class=\"literal\">-FilterScript</span> &#123; <span class=\"variable\">$_</span>.name <span class=\"operator\">-like</span> <span class=\"string\">&#x27;*system*&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> NPM(K)    PM(M)      WS(M)     CPU(s)      Id  <span class=\"built_in\">SI</span> ProcessName</span><br><span class=\"line\"> <span class=\"literal\">------</span>    <span class=\"literal\">-----</span>      <span class=\"literal\">-----</span>     <span class=\"literal\">------</span>      <span class=\"literal\">--</span>  <span class=\"literal\">--</span> <span class=\"literal\">-----------</span></span><br><span class=\"line\">      <span class=\"number\">0</span>     <span class=\"number\">0.18</span>      <span class=\"number\">40.59</span>       <span class=\"number\">0.00</span>     <span class=\"number\">136</span>   <span class=\"number\">0</span> Secure System</span><br><span class=\"line\">      <span class=\"number\">0</span>     <span class=\"number\">0.09</span>      <span class=\"number\">21.68</span>       <span class=\"number\">0.00</span>       <span class=\"number\">4</span>   <span class=\"number\">0</span> System</span><br><span class=\"line\">     <span class=\"number\">56</span>    <span class=\"number\">48.61</span>       <span class=\"number\">2.91</span>       <span class=\"number\">2.03</span>   <span class=\"number\">11708</span>   <span class=\"number\">1</span> SystemSettings</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.\t<span class=\"built_in\">foreach-object</span> <span class=\"literal\">-process</span> &#123; code &#125;\t<span class=\"comment\">#ForEach-Object命令的process参数可以使用脚本块</span></span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"built_in\">Get-Process</span> | <span class=\"keyword\">ForEach</span> <span class=\"literal\">-Process</span> &#123; <span class=\"keyword\">if</span>(<span class=\"variable\">$_</span> <span class=\"operator\">-like</span> <span class=\"string\">&#x27;*vm*&#x27;</span>)&#123;<span class=\"variable\">$_</span>&#125; &#125;</span><br><span class=\"line\"><span class=\"comment\"># 先判断条件语句，如果成立则执行内部&#123;&#125;中的代码，$_表示显示（默认显示，也可以用 . 来指定要显示对象的什么属性）当前控制的对象</span></span><br><span class=\"line\"> NPM(K)    PM(M)      WS(M)     CPU(s)      Id  <span class=\"built_in\">SI</span> ProcessName</span><br><span class=\"line\"> <span class=\"literal\">------</span>    <span class=\"literal\">-----</span>      <span class=\"literal\">-----</span>     <span class=\"literal\">------</span>      <span class=\"literal\">--</span>  <span class=\"literal\">--</span> <span class=\"literal\">-----------</span></span><br><span class=\"line\">     <span class=\"number\">10</span>     <span class=\"number\">2.38</span>      <span class=\"number\">11.70</span>       <span class=\"number\">0.00</span>    <span class=\"number\">3848</span>   <span class=\"number\">0</span> vmcompute</span><br><span class=\"line\">     <span class=\"number\">26</span>   <span class=\"number\">179.80</span>     <span class=\"number\">160.73</span>       <span class=\"number\">0.00</span>    <span class=\"number\">2832</span>   <span class=\"number\">0</span> vmms</span><br><span class=\"line\">     <span class=\"number\">12</span>     <span class=\"number\">2.37</span>       <span class=\"number\">7.41</span>       <span class=\"number\">0.00</span>    <span class=\"number\">4788</span>   <span class=\"number\">0</span> vmnat</span><br><span class=\"line\">      <span class=\"number\">8</span>     <span class=\"number\">7.64</span>       <span class=\"number\">5.87</span>       <span class=\"number\">0.00</span>    <span class=\"number\">4856</span>   <span class=\"number\">0</span> vmnetdhcp</span><br><span class=\"line\">     <span class=\"number\">27</span>    <span class=\"number\">22.10</span>      <span class=\"number\">30.55</span>       <span class=\"number\">0.00</span>    <span class=\"number\">4812</span>   <span class=\"number\">0</span> vmware<span class=\"literal\">-authd</span></span><br><span class=\"line\">     <span class=\"number\">34</span>    <span class=\"number\">34.30</span>      <span class=\"number\">53.90</span>       <span class=\"number\">0.00</span>    <span class=\"number\">6496</span>   <span class=\"number\">0</span> vmware<span class=\"literal\">-hostd</span></span><br><span class=\"line\">     <span class=\"number\">17</span>     <span class=\"number\">3.67</span>      <span class=\"number\">12.12</span>       <span class=\"number\">0.03</span>    <span class=\"number\">4584</span>   <span class=\"number\">1</span> vmware<span class=\"literal\">-tray</span></span><br><span class=\"line\">     <span class=\"number\">13</span>     <span class=\"number\">2.91</span>      <span class=\"number\">12.24</span>       <span class=\"number\">0.00</span>    <span class=\"number\">4840</span>   <span class=\"number\">0</span> vmware<span class=\"literal\">-usbarbitrator64</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"number\">3</span>.\t<span class=\"built_in\">select-object</span> <span class=\"literal\">-property</span> property_name, &#123; code &#125;\t\t<span class=\"comment\">#select-object命令的property参数可以是脚本块</span></span><br><span class=\"line\"> 如：</span><br><span class=\"line\"> \t<span class=\"built_in\">Get-Process</span> | <span class=\"built_in\">Select-Object</span> <span class=\"literal\">-Property</span> &#123;<span class=\"variable\">$_</span>.name&#125;, &#123;<span class=\"variable\">$_</span>.StartTime.DayOfWeek&#125;</span><br><span class=\"line\"> \t<span class=\"comment\"># $_代表当前操作的对象，对象通过 . 来调用方法或属性。注：&#123;&#125; 不能少</span></span><br><span class=\"line\">    <span class=\"variable\">$_</span>.name                 <span class=\"variable\">$_</span>.StartTime.DayOfWeek</span><br><span class=\"line\">    <span class=\"literal\">-------</span>                 <span class=\"literal\">----------------------</span></span><br><span class=\"line\">    AggregatorHost</span><br><span class=\"line\">    ApplicationFrameHost    Tuesday</span><br><span class=\"line\">    backgroundTaskHost      Tuesday</span><br><span class=\"line\">    chrome                  Tuesday</span><br><span class=\"line\">    chrome                  Tuesday</span><br><span class=\"line\">    chrome                  Tuesday</span><br><span class=\"line\">    chrome                  Tuesday\t</span><br><span class=\"line\"> \t</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{"widget":{"top":[{"class_name":{"id_name":null,"name":null,"icon":null,"html":null}}],"bottom":[{"class_name":"user-map","id_name":"user-map","name":"访客地图","icon":"fas fa-heartbeat","order":null,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}}},"cover":false,"excerpt":"","more":"<h2 id=\"常见命令-amp-amp-常识\"><a href=\"#常见命令-amp-amp-常识\" class=\"headerlink\" title=\"常见命令 &amp;&amp;  常识\"></a>常见命令 &amp;&amp;  常识</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">update-help</span>\t\t\t\t<span class=\"comment\">#更新帮助文档</span></span><br><span class=\"line\">updata<span class=\"literal\">-help</span> <span class=\"literal\">-UICulture</span> en<span class=\"literal\">-US</span> <span class=\"literal\">-ErrorAction</span> SilentlyContinue\t<span class=\"comment\">#选择英语且忽略错误</span></span><br><span class=\"line\">Help\t*name*\t\t\t<span class=\"comment\">#查询与name相关的命令</span></span><br><span class=\"line\">Help <span class=\"literal\">-full</span>\t\t\t\t<span class=\"comment\">#显示所有文档</span></span><br><span class=\"line\">Help <span class=\"literal\">-ShowWindow</span>\t\t<span class=\"comment\">#以图形化显示文档</span></span><br><span class=\"line\">Help <span class=\"literal\">-online</span>\t\t\t<span class=\"comment\">#用默认浏览器打开对应命令的在线文档</span></span><br><span class=\"line\">[]\t\t\t\t\t\t<span class=\"comment\">#表示可选参数</span></span><br><span class=\"line\">&lt;&gt;\t\t\t\t\t\t<span class=\"comment\">#表示必选参数</span></span><br><span class=\"line\">[[-<span class=\"type\">parameter</span>] &lt;<span class=\"built_in\">string</span>&gt;]\t\t<span class=\"comment\">#意思是该参数可选，当如果选上则必须要给出值</span></span><br><span class=\"line\"><span class=\"comment\">#位置参数\t\t\t\t即不用输入参数的名称，按位置输入顺序来对应参数\tposition标出该参数是哪个位置，named表示要带参数名给值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开关参数\t\t\t\t不需要给值的参数，如：ls -force</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置相关\"><a href=\"#配置相关\" class=\"headerlink\" title=\"配置相关\"></a>配置相关</h2><h3 id=\"PSProvider\"><a href=\"#PSProvider\" class=\"headerlink\" title=\"PSProvider\"></a>PSProvider</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">get-psprovider</span>\t\t<span class=\"comment\">#查看当前powershell适配器</span></span><br><span class=\"line\"></span><br><span class=\"line\">Name                 Capabilities                Drives</span><br><span class=\"line\"><span class=\"literal\">----</span>                 <span class=\"literal\">------------</span>                <span class=\"literal\">------</span></span><br><span class=\"line\">Registry             ShouldProcess               &#123;HKLM, HKCU&#125;</span><br><span class=\"line\">Alias                ShouldProcess               &#123;Alias&#125;</span><br><span class=\"line\">Environment          ShouldProcess               &#123;Env&#125;</span><br><span class=\"line\">FileSystem           <span class=\"keyword\">Filter</span>, ShouldProcess, Cre… &#123;C, D, E, F…&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">Function</span>             <span class=\"title\">ShouldProcess</span></span>               &#123;Function&#125;</span><br><span class=\"line\">Variable             ShouldProcess               &#123;Variable&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ShouldProcess\t支持<span class=\"literal\">-whatif</span>，<span class=\"literal\">-confirm</span>参数</span><br><span class=\"line\"><span class=\"keyword\">Filter</span>\t\t支持<span class=\"literal\">-filter</span>参数</span><br><span class=\"line\">Credentials\t\t支持凭据参数（<span class=\"literal\">-Credentials</span>）连接数据存储</span><br><span class=\"line\">Transactions\t支持事务，提交操作，回滚等</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Get-PSDrive\"><a href=\"#Get-PSDrive\" class=\"headerlink\" title=\"Get-PSDrive\"></a>Get-PSDrive</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">get-psdrive</span>\t\t\t<span class=\"comment\">#查看当前已连接的驱动器</span></span><br><span class=\"line\"></span><br><span class=\"line\">Name           Used (GB)     Free (GB) Provider      Root</span><br><span class=\"line\"><span class=\"literal\">----</span>           <span class=\"literal\">---------</span>     <span class=\"literal\">---------</span> <span class=\"literal\">--------</span>      <span class=\"literal\">----</span></span><br><span class=\"line\">Alias                                  Alias</span><br><span class=\"line\">C                  <span class=\"number\">68.84</span>        <span class=\"number\">130.49</span> FileSystem    C:\\</span><br><span class=\"line\">Cert                                   Certificate   \\</span><br><span class=\"line\">D                 <span class=\"number\">180.71</span>        <span class=\"number\">450.17</span> FileSystem    D:\\</span><br><span class=\"line\">E                  <span class=\"number\">25.86</span>         <span class=\"number\">74.15</span> FileSystem    E:\\</span><br><span class=\"line\">Env                                    Environment</span><br><span class=\"line\">F                  <span class=\"number\">19.49</span>         <span class=\"number\">99.52</span> FileSystem    F:\\</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">Function</span>                               <span class=\"keyword\">Function</span></span></span><br><span class=\"line\">G                 <span class=\"number\">115.35</span>        <span class=\"number\">815.94</span> FileSystem    G:\\</span><br><span class=\"line\"><span class=\"built_in\">H</span>                   <span class=\"number\">0.00</span>          <span class=\"number\">0.10</span> FileSystem    <span class=\"built_in\">H</span>:\\</span><br><span class=\"line\">HKCU                                   Registry      HKEY_CURRENT_USER</span><br><span class=\"line\">HKLM                                   Registry      HKEY_LOCAL_MACHINE</span><br><span class=\"line\">Temp               <span class=\"number\">68.84</span>        <span class=\"number\">130.49</span> FileSystem    C:\\Users\\Administrato…</span><br><span class=\"line\">Variable                               Variable</span><br><span class=\"line\">WSMan                                  WSMan</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"Get-ChildItem\"><a href=\"#Get-ChildItem\" class=\"headerlink\" title=\"Get-ChildItem\"></a>Get-ChildItem</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\taliases: ls, dir, gci</span><br><span class=\"line\"><span class=\"bullet\">2.</span>\t文件属性</span><br><span class=\"line\"><span class=\"code\">    l (link)</span></span><br><span class=\"line\"><span class=\"code\">    d (directory)</span></span><br><span class=\"line\"><span class=\"code\">    a (archive)</span></span><br><span class=\"line\"><span class=\"code\">    r (read-only)</span></span><br><span class=\"line\"><span class=\"code\">    h (hidden)</span></span><br><span class=\"line\"><span class=\"code\">    s (system)</span></span><br><span class=\"line\"><span class=\"code\">3.\t参数</span></span><br><span class=\"line\"><span class=\"code\">\t-path\t\t指定查看路径（可以指定驱动器，磁盘，注册表）</span></span><br><span class=\"line\"><span class=\"code\">\t-force\t\t显示隐藏文件</span></span><br><span class=\"line\"><span class=\"code\">\t-filter\t\t过滤出指定文件</span></span><br><span class=\"line\"><span class=\"code\">\t-Recurse\t递归子文件夹</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Get-ItemProperty\"><a href=\"#Get-ItemProperty\" class=\"headerlink\" title=\"Get-ItemProperty\"></a>Get-ItemProperty</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看文件对象属性</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Set-Location\"><a href=\"#Set-Location\" class=\"headerlink\" title=\"Set-Location\"></a>Set-Location</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\taliases: <span class=\"built_in\">cd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.\t切换当前目录</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Set-ItemProperty\"><a href=\"#Set-ItemProperty\" class=\"headerlink\" title=\"Set-ItemProperty\"></a>Set-ItemProperty</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置文件对象的属性</span><br><span class=\"line\"><span class=\"built_in\">set-itemproperty</span> <span class=\"literal\">-name</span> isreadonly <span class=\"literal\">-value</span> <span class=\"variable\">$true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Get-Member\"><a href=\"#Get-Member\" class=\"headerlink\" title=\"Get-Member\"></a>Get-Member</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t用途</span><br><span class=\"line\">\t\t查看当前命令输出类型，查看当前命令的属性，方法等</span><br><span class=\"line\"><span class=\"number\">2</span>.\t缩写</span><br><span class=\"line\">\t\t<span class=\"built_in\">gm</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Get-Content\"><a href=\"#Get-Content\" class=\"headerlink\" title=\"Get-Content\"></a>Get-Content</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t用途</span><br><span class=\"line\">\t\t读取文件内容</span><br><span class=\"line\"><span class=\"number\">2</span>.\t使用方法</span><br><span class=\"line\">\t\t<span class=\"built_in\">Get-Content</span> file_name</span><br><span class=\"line\"><span class=\"number\">3</span>.\t参数</span><br><span class=\"line\">\t\t<span class=\"literal\">-Path</span>\t指定文件</span><br><span class=\"line\">\t\t<span class=\"literal\">-TotalCount</span>\tn\t指定读取多少行</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Select-Object\"><a href=\"#Select-Object\" class=\"headerlink\" title=\"Select-Object\"></a>Select-Object</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t用途</span><br><span class=\"line\">\t挑选对象，或者对象的属性</span><br><span class=\"line\"><span class=\"number\">2</span>.\t使用方法</span><br><span class=\"line\">\t通常搭配管道符使用，A | <span class=\"built_in\">select-object</span> <span class=\"literal\">-property</span> p1,p2选择某些特定的属性显示，p1,p2指选择的属性，</span><br><span class=\"line\"><span class=\"number\">3</span>.\t参数</span><br><span class=\"line\">\t<span class=\"literal\">-property</span>\t指定显示对象的属性</span><br><span class=\"line\">\t<span class=\"literal\">-last</span> num\t选择显示后num个对象</span><br><span class=\"line\">\t<span class=\"literal\">-first</span>\tnum\t选择显示前num个对象</span><br><span class=\"line\">\t<span class=\"literal\">-unique</span>\t\t去掉重复的对象（大小写不敏感）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sort-Object\"><a href=\"#Sort-Object\" class=\"headerlink\" title=\"Sort-Object\"></a>Sort-Object</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t用途</span><br><span class=\"line\">\t按一定规则排序</span><br><span class=\"line\"><span class=\"number\">2</span>.\t使用方法</span><br><span class=\"line\">\t类似<span class=\"built_in\">select-object</span>，一般搭配pipeline使用</span><br><span class=\"line\"><span class=\"number\">3</span>.\t参数</span><br><span class=\"line\">\t<span class=\"literal\">-property</span>\t按指定的属性排序，不指定时默认按属性Name排序</span><br><span class=\"line\">\t<span class=\"literal\">-last</span> num\t选择后num个对象</span><br><span class=\"line\">\t<span class=\"literal\">-first</span> num\t选择前num个对象</span><br><span class=\"line\">\t<span class=\"literal\">-unique</span>\t\t去掉重复内容（大小写不敏感）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-Where-Object-x3D-x3D\"><a href=\"#x3D-x3D-Where-Object-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;Where-Object&#x3D;&#x3D;\"></a>&#x3D;&#x3D;Where-Object&#x3D;&#x3D;</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t用途</span><br><span class=\"line\">\t查找对象，常与操作符搭配使用</span><br><span class=\"line\"><span class=\"number\">2</span>.\t使用方法</span><br><span class=\"line\">\t类似<span class=\"built_in\">select-object</span>，一般搭配pipeline使用。使用时会用到 <span class=\"variable\">$_</span> 占位符号用来代表对象（其实可以理解成函数的形参，当变量传递过来时，用<span class=\"variable\">$_</span>来表示当前搜索的这一行的这个对象，<span class=\"variable\">$_</span>.property，访问当前对象的某个属性（相当于类的对象的成员变量的使用）），&#123;&#125; 脚本区域（需要使用<span class=\"literal\">-FilterScript</span>参数）</span><br><span class=\"line\"><span class=\"number\">3</span>.\t参数</span><br><span class=\"line\">\t<span class=\"literal\">-FilterScript</span> &#123;code&#125;\t使用脚本&#123;&#125;内为脚本的代码</span><br><span class=\"line\">\t<span class=\"literal\">-property</span>\t指定用于判断的属性</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"x3D-x3D-操作符-x3D-x3D\"><a href=\"#x3D-x3D-操作符-x3D-x3D\" class=\"headerlink\" title=\"&#x3D;&#x3D;操作符&#x3D;&#x3D;\"></a>&#x3D;&#x3D;操作符&#x3D;&#x3D;</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t比较操作符（多个值（用逗号隔开）比较时，返回结果为true的对象，单个值比较时，返回true或者false）</span><br><span class=\"line\">\t<span class=\"operator\">-GE</span>\t\t\t大于等于\tgrater than or equal </span><br><span class=\"line\">\t<span class=\"operator\">-CGE</span>\t\t大于等于\tC代表case<span class=\"literal\">-sensitive</span>大小写敏感（以下参数都有带C格式的）</span><br><span class=\"line\">\t<span class=\"operator\">-GT</span>\t\t\t大于\t\tgrater than</span><br><span class=\"line\">\t<span class=\"operator\">-EQ</span>\t\t\t等于\t\tequal\t<span class=\"operator\">-CEQ</span>代表相等（相同）且是大小写敏感的</span><br><span class=\"line\">\t<span class=\"operator\">-LE</span> \t\t小于等于\tless than or equal</span><br><span class=\"line\">\t<span class=\"operator\">-LT</span>\t\t\t小于\t\t</span><br><span class=\"line\">\t<span class=\"operator\">-NE</span>\t\t\t不等于</span><br><span class=\"line\"><span class=\"number\">2</span>.\t模糊比较</span><br><span class=\"line\">\t<span class=\"operator\">-like</span>\t\t模糊匹配\tlike和notlike使用通配符时，用此参数。同样也有<span class=\"operator\">-CLIKE</span></span><br><span class=\"line\">\t<span class=\"operator\">-notlike</span>\tlike和notlike使用时用于判定的值要加 <span class=\"string\">&quot;&quot;</span>或<span class=\"string\">&#x27;&#x27;</span> ，如：<span class=\"number\">1</span> <span class=\"operator\">-like</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">\t<span class=\"operator\">-Contains</span>\t包含\t如果对象的属性值中的任何项与指定值完全匹配，则此 cmdlet 获取对象，（包含一个完全相同的值（而不是值的一部分）。始终返回布尔值）</span><br><span class=\"line\">\t<span class=\"operator\">-Notcontains</span>\t不包含一个完全相同值。始终返回布尔值。</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"管道——pipeline\"><a href=\"#管道——pipeline\" class=\"headerlink\" title=\"管道——pipeline\"></a>管道——pipeline</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t|\t管道符</span><br><span class=\"line\"><span class=\"number\">2</span>.\t使用方法：</span><br><span class=\"line\">\t\tA | B\t\t将A命令的执行结果作为B命令的输入</span><br><span class=\"line\"><span class=\"number\">3</span>.\t效果：\t\t</span><br><span class=\"line\">\t\t减少重复输入</span><br><span class=\"line\"><span class=\"number\">4</span>.\t结合Get_Member查看当前命令输出类型，查看当前命令的属性，方法等</span><br><span class=\"line\">\t如：<span class=\"built_in\">ls</span> | Get_Member\t\t\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"管道参数输入\"><a href=\"#管道参数输入\" class=\"headerlink\" title=\"管道参数输入\"></a>管道参数输入</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需要用help（在PARAMETERS）查看后续命令是否支持pipeline传的值（两种类型：ByPropertyName和ByValue）</span><br><span class=\"line\"><span class=\"number\">1</span>.\tByValue\t\t单传值方式\t只允许使用一个参数接收管道返回的对象类型（即只能有一个地方接收上一条命令的结果）</span><br><span class=\"line\">\t\t<span class=\"comment\">#上一个命令A的结果是下一条命令B的结果，如：get-content test.txt，需要查看B的输入（B的输入使用help B查看）是否有可以接收A的输出类型的参数（A的输出使用 | gm 查看）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.\tByPropertyName\t最佳匹配方式\t一次传入多个参数类型，并且命令会自动匹配</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ByPropertyName例子\"><a href=\"#ByPropertyName例子\" class=\"headerlink\" title=\"ByPropertyName例子\"></a>ByPropertyName例子</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aliases.csv文件:\t\t\t<span class=\"comment\">#文件中的数据是按照下一个命令的输入要求编的，new-alias命令有一个Name参数和Value参数可以接收ByPropertyName类型的pipeline input</span></span><br><span class=\"line\">Name, Value</span><br><span class=\"line\">sel, <span class=\"built_in\">Select-Object</span></span><br><span class=\"line\">gs, <span class=\"built_in\">Get-Serveice</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>.\t导入csv文件</span><br><span class=\"line\"><span class=\"built_in\">Import-Csv</span> .\\aliases.csv | <span class=\"built_in\">gm</span></span><br><span class=\"line\"></span><br><span class=\"line\">   TypeName: System.Management.Automation.PSCustomObject\t<span class=\"comment\">#显示用户自定义对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">Name        MemberType   Definition</span><br><span class=\"line\"><span class=\"literal\">----</span>        <span class=\"literal\">----------</span>   <span class=\"literal\">----------</span></span><br><span class=\"line\">Equals      Method       bool Equals(System.Object obj)</span><br><span class=\"line\">GetHashCode Method       int GetHashCode()</span><br><span class=\"line\">GetType     Method       <span class=\"built_in\">type</span> GetType()</span><br><span class=\"line\">ToString    Method       string ToString()</span><br><span class=\"line\">Name        NoteProperty string Name=sel\t\t\t<span class=\"comment\">#有一个Name的信息</span></span><br><span class=\"line\">Value       NoteProperty string Value=<span class=\"built_in\">Select-Object</span>\t <span class=\"comment\">#有一个Value的信息，他俩用来给下一条命令传递参数值，实际上Name和Value就是下一个</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.\t查看B命令的帮助文档</span><br><span class=\"line\">help <span class=\"built_in\">new-alias</span>\t\t\t<span class=\"comment\">#Creates a new alias.为命令创建新的别名</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">    <span class=\"literal\">-Name</span> &lt;System.String&gt;\t\t\t\t\t<span class=\"comment\">#参数（传值标记）Name</span></span><br><span class=\"line\">    Specifies the new alias. You can use any alphanumeric characte</span><br><span class=\"line\">    rs <span class=\"keyword\">in</span> an alias, but the first character cannot be a number.</span><br><span class=\"line\">    Required?                    true</span><br><span class=\"line\">    Position?                    <span class=\"number\">0</span></span><br><span class=\"line\">    Default value                None</span><br><span class=\"line\">    Accept pipeline input?       True (ByPropertyName)\t\t<span class=\"comment\">#支持使用pipeline的ByPropertyName方式传值</span></span><br><span class=\"line\">    Accept wildcard characters?  false</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"literal\">-Value</span> &lt;System.String&gt;\t\t\t\t\t<span class=\"comment\">#参数（传值标记）Value表</span></span><br><span class=\"line\">        Specifies the name of the cmdlet or command element that is be</span><br><span class=\"line\">        ing aliased.</span><br><span class=\"line\"></span><br><span class=\"line\">        Required?                    true</span><br><span class=\"line\">        Position?                    <span class=\"number\">1</span></span><br><span class=\"line\">        Default value                None</span><br><span class=\"line\">        Accept pipeline input?       True (ByPropertyName)\t<span class=\"comment\">#支持使用pipeline的ByPropertyName方式传值</span></span><br><span class=\"line\">        Accept wildcard characters?  false</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"number\">3</span>.\t执行代码</span><br><span class=\"line\">\t<span class=\"built_in\">Import-Csv</span> .\\aliases.csv | <span class=\"built_in\">new-alias</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>.\t成功</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注：若AB命令为同类的命令，则一般都能成功传递参数如：（各种service）get-service, stop-service, start-service</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"PowerShell的对象\"><a href=\"#PowerShell的对象\" class=\"headerlink\" title=\"PowerShell的对象\"></a>PowerShell的对象</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\tpowershell命令输出的一行就是一个对象，列就是对象的属性（状态，名称...）</span><br><span class=\"line\">所有对象在一起叫集合，就是输出的那张表</span><br><span class=\"line\">如：</span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\">        Directory: C:\\Users\\Administrator\\Desktop\\test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#一列就是对象的一个属性</span></span><br><span class=\"line\">Mode                LastWriteTime         Length Name</span><br><span class=\"line\"><span class=\"literal\">----</span>                <span class=\"literal\">-------------</span>         <span class=\"literal\">------</span> <span class=\"literal\">----</span></span><br><span class=\"line\"><span class=\"literal\">-a---</span>         <span class=\"number\">2022</span>/<span class=\"number\">3</span>/<span class=\"number\">19</span>     <span class=\"number\">20</span>:<span class=\"number\">35</span>          <span class=\"number\">16532</span>   <span class=\"number\">1</span>.txt\t\t<span class=\"comment\">#一行就是一个对象</span></span><br><span class=\"line\"><span class=\"literal\">-a---</span>         <span class=\"number\">2022</span>/<span class=\"number\">3</span>/<span class=\"number\">19</span>     <span class=\"number\">20</span>:<span class=\"number\">26</span>             <span class=\"number\">50</span>   aliases.csv</span><br><span class=\"line\"><span class=\"literal\">-a---</span>         <span class=\"number\">2022</span>/<span class=\"number\">3</span>/<span class=\"number\">19</span>     <span class=\"number\">19</span>:<span class=\"number\">47</span>              <span class=\"number\">8</span>   asdfas.asdfasdf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#整个输出叫集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.\t查看命令的属性（property）和方法（method）</span><br><span class=\"line\">\tcommand | <span class=\"built_in\">get-member</span>\t\t<span class=\"comment\">#command的是代指命令</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"显示对象指定的属性\"><a href=\"#显示对象指定的属性\" class=\"headerlink\" title=\"显示对象指定的属性\"></a>显示对象指定的属性</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">command | <span class=\"built_in\">select</span> <span class=\"literal\">-property</span> p_name_1, p_name_2....\t\t<span class=\"comment\">#select是select-object的缩写，-property指需要显示什么属性，多个属性用逗号隔开</span></span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"built_in\">get-service</span> | <span class=\"built_in\">select</span> <span class=\"literal\">-property</span> ServiceName,ServiceType,UserName</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tServiceName                                                        ServiceType UserName</span><br><span class=\"line\"><span class=\"literal\">-----------</span>                                                        <span class=\"literal\">-----------</span> <span class=\"literal\">--------</span></span><br><span class=\"line\">AarSvc_820a0                                                               <span class=\"number\">224</span></span><br><span class=\"line\">AJRouter                                                     Win32ShareProcess NT AUTHORITY\\LocalService</span><br><span class=\"line\">ALG                                                            Win32OwnProcess NT AUTHORITY\\LocalService</span><br><span class=\"line\">AppIDSvc                                                     Win32ShareProcess NT Authority\\LocalService</span><br><span class=\"line\">Appinfo                                     Win32OwnProcess, Win32ShareProcess LocalSystem</span><br><span class=\"line\">AppMgmt                                                      Win32ShareProcess LocalSystem</span><br><span class=\"line\">AppReadiness                                Win32OwnProcess, Win32ShareProcess LocalSystem</span><br><span class=\"line\">AppVClient                                                     Win32OwnProcess LocalSystem</span><br><span class=\"line\">AppXSvc                                     Win32OwnProcess, Win32ShareProcess LocalSystem</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"脚本块\"><a href=\"#脚本块\" class=\"headerlink\" title=\"脚本块\"></a>脚本块</h2><h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t.NET框架命令下使用</span><br><span class=\"line\"><span class=\"number\">2</span>.\t变量使用法</span><br><span class=\"line\"><span class=\"number\">3</span>.\t与比较符联合使用</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NET框架命令下使用\"><a href=\"#NET框架命令下使用\" class=\"headerlink\" title=\".NET框架命令下使用\"></a>.NET框架命令下使用</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用：</span><br><span class=\"line\">\t<span class=\"built_in\">Invoke-Command</span> <span class=\"literal\">-ScriptBlock</span> &#123; code &#125;</span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"built_in\">Invoke-command</span> <span class=\"literal\">-ScriptBlock</span> &#123; <span class=\"built_in\">Get-Process</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量使用法\"><a href=\"#变量使用法\" class=\"headerlink\" title=\"变量使用法\"></a>变量使用法</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用：</span><br><span class=\"line\">\t<span class=\"variable\">$var</span> = &#123; code &#125;\t\t\t<span class=\"comment\">#其实就是把脚本块赋值给了一个变量（相当于用这个变量来代表那个脚本块）</span></span><br><span class=\"line\">\t&amp;<span class=\"variable\">$var</span>\t\t\t\t\t<span class=\"comment\"># &amp;代表调用变量 $var代表的脚本块，$var代表脚本块本身</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"与比较符联合使用\"><a href=\"#与比较符联合使用\" class=\"headerlink\" title=\"与比较符联合使用\"></a>与比较符联合使用</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.\t<span class=\"built_in\">where-object</span> <span class=\"literal\">-FilterScript</span> &#123; code &#125;\t\t<span class=\"comment\">#where-object命令的FilterScript参数可以使用脚本块</span></span><br><span class=\"line\">如：</span><br><span class=\"line\">\t <span class=\"built_in\">Get-Process</span> | <span class=\"built_in\">where</span> <span class=\"literal\">-FilterScript</span> &#123; <span class=\"variable\">$_</span>.name <span class=\"operator\">-like</span> <span class=\"string\">&#x27;*system*&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> NPM(K)    PM(M)      WS(M)     CPU(s)      Id  <span class=\"built_in\">SI</span> ProcessName</span><br><span class=\"line\"> <span class=\"literal\">------</span>    <span class=\"literal\">-----</span>      <span class=\"literal\">-----</span>     <span class=\"literal\">------</span>      <span class=\"literal\">--</span>  <span class=\"literal\">--</span> <span class=\"literal\">-----------</span></span><br><span class=\"line\">      <span class=\"number\">0</span>     <span class=\"number\">0.18</span>      <span class=\"number\">40.59</span>       <span class=\"number\">0.00</span>     <span class=\"number\">136</span>   <span class=\"number\">0</span> Secure System</span><br><span class=\"line\">      <span class=\"number\">0</span>     <span class=\"number\">0.09</span>      <span class=\"number\">21.68</span>       <span class=\"number\">0.00</span>       <span class=\"number\">4</span>   <span class=\"number\">0</span> System</span><br><span class=\"line\">     <span class=\"number\">56</span>    <span class=\"number\">48.61</span>       <span class=\"number\">2.91</span>       <span class=\"number\">2.03</span>   <span class=\"number\">11708</span>   <span class=\"number\">1</span> SystemSettings</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>.\t<span class=\"built_in\">foreach-object</span> <span class=\"literal\">-process</span> &#123; code &#125;\t<span class=\"comment\">#ForEach-Object命令的process参数可以使用脚本块</span></span><br><span class=\"line\">如：</span><br><span class=\"line\">\t<span class=\"built_in\">Get-Process</span> | <span class=\"keyword\">ForEach</span> <span class=\"literal\">-Process</span> &#123; <span class=\"keyword\">if</span>(<span class=\"variable\">$_</span> <span class=\"operator\">-like</span> <span class=\"string\">&#x27;*vm*&#x27;</span>)&#123;<span class=\"variable\">$_</span>&#125; &#125;</span><br><span class=\"line\"><span class=\"comment\"># 先判断条件语句，如果成立则执行内部&#123;&#125;中的代码，$_表示显示（默认显示，也可以用 . 来指定要显示对象的什么属性）当前控制的对象</span></span><br><span class=\"line\"> NPM(K)    PM(M)      WS(M)     CPU(s)      Id  <span class=\"built_in\">SI</span> ProcessName</span><br><span class=\"line\"> <span class=\"literal\">------</span>    <span class=\"literal\">-----</span>      <span class=\"literal\">-----</span>     <span class=\"literal\">------</span>      <span class=\"literal\">--</span>  <span class=\"literal\">--</span> <span class=\"literal\">-----------</span></span><br><span class=\"line\">     <span class=\"number\">10</span>     <span class=\"number\">2.38</span>      <span class=\"number\">11.70</span>       <span class=\"number\">0.00</span>    <span class=\"number\">3848</span>   <span class=\"number\">0</span> vmcompute</span><br><span class=\"line\">     <span class=\"number\">26</span>   <span class=\"number\">179.80</span>     <span class=\"number\">160.73</span>       <span class=\"number\">0.00</span>    <span class=\"number\">2832</span>   <span class=\"number\">0</span> vmms</span><br><span class=\"line\">     <span class=\"number\">12</span>     <span class=\"number\">2.37</span>       <span class=\"number\">7.41</span>       <span class=\"number\">0.00</span>    <span class=\"number\">4788</span>   <span class=\"number\">0</span> vmnat</span><br><span class=\"line\">      <span class=\"number\">8</span>     <span class=\"number\">7.64</span>       <span class=\"number\">5.87</span>       <span class=\"number\">0.00</span>    <span class=\"number\">4856</span>   <span class=\"number\">0</span> vmnetdhcp</span><br><span class=\"line\">     <span class=\"number\">27</span>    <span class=\"number\">22.10</span>      <span class=\"number\">30.55</span>       <span class=\"number\">0.00</span>    <span class=\"number\">4812</span>   <span class=\"number\">0</span> vmware<span class=\"literal\">-authd</span></span><br><span class=\"line\">     <span class=\"number\">34</span>    <span class=\"number\">34.30</span>      <span class=\"number\">53.90</span>       <span class=\"number\">0.00</span>    <span class=\"number\">6496</span>   <span class=\"number\">0</span> vmware<span class=\"literal\">-hostd</span></span><br><span class=\"line\">     <span class=\"number\">17</span>     <span class=\"number\">3.67</span>      <span class=\"number\">12.12</span>       <span class=\"number\">0.03</span>    <span class=\"number\">4584</span>   <span class=\"number\">1</span> vmware<span class=\"literal\">-tray</span></span><br><span class=\"line\">     <span class=\"number\">13</span>     <span class=\"number\">2.91</span>      <span class=\"number\">12.24</span>       <span class=\"number\">0.00</span>    <span class=\"number\">4840</span>   <span class=\"number\">0</span> vmware<span class=\"literal\">-usbarbitrator64</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"number\">3</span>.\t<span class=\"built_in\">select-object</span> <span class=\"literal\">-property</span> property_name, &#123; code &#125;\t\t<span class=\"comment\">#select-object命令的property参数可以是脚本块</span></span><br><span class=\"line\"> 如：</span><br><span class=\"line\"> \t<span class=\"built_in\">Get-Process</span> | <span class=\"built_in\">Select-Object</span> <span class=\"literal\">-Property</span> &#123;<span class=\"variable\">$_</span>.name&#125;, &#123;<span class=\"variable\">$_</span>.StartTime.DayOfWeek&#125;</span><br><span class=\"line\"> \t<span class=\"comment\"># $_代表当前操作的对象，对象通过 . 来调用方法或属性。注：&#123;&#125; 不能少</span></span><br><span class=\"line\">    <span class=\"variable\">$_</span>.name                 <span class=\"variable\">$_</span>.StartTime.DayOfWeek</span><br><span class=\"line\">    <span class=\"literal\">-------</span>                 <span class=\"literal\">----------------------</span></span><br><span class=\"line\">    AggregatorHost</span><br><span class=\"line\">    ApplicationFrameHost    Tuesday</span><br><span class=\"line\">    backgroundTaskHost      Tuesday</span><br><span class=\"line\">    chrome                  Tuesday</span><br><span class=\"line\">    chrome                  Tuesday</span><br><span class=\"line\">    chrome                  Tuesday</span><br><span class=\"line\">    chrome                  Tuesday\t</span><br><span class=\"line\"> \t</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"},{"title":"TDD","date":"2022-03-24T13:30:25.000Z","_content":"\n## 项目的创建\n\n[Django3官方文档](https://docs.djangoproject.com/zh-hans/3.0/intro/tutorial01/)\n\n##### 创建Django项目：`django-admin startproject proj_name`\n\n```markdown\n \t在当前路径下创建一个名为proj_name的文件，该文件为Django项目的根文件夹，文件夹里面也有一个proj_name，该文件为Django项目的全局配置文件，是一个python包\n```\n\n\n\n##### 运行Django项目：`python manage.py runserver 80`\n\n```markdown\n\t开启一个运行在80端口的http服务，本地运行使用http://localhost即可访问\n```\n\n\n\n#### unittest模块的使用——代码示例\n\n```python\nfrom selenium import webdriver\nimport unittest\nclass NewVisitorTest(unittest.TestCase):\t#继承于unittest.TestCase的类\n    def setUp(self):\t\t\t\t\t#类似于c++的构造函数，在该类实例化时调用\n        self.browser = webdriver.Chrome();\n        self.browser.implicitly_wait(3)\t\t#隐式等待，等待3秒，让selenium有充足时间加载\n    def tearDown(self):\t\t\t\t\t#类似于c++的析构函数，在类的实例结束时调用\n        self.browser.quit()\t\t\t\t#关闭浏览器\n    def test_can_start_a_list_and_retrieve_it_later(self): #自定义的测试函数\n        self.browser.get('http://localhost:8000')\n        self.assertIn('To-Do', self.browser.title)\n        self.fail('Finish th test!')\n\nif __name__ == '__main__':\n    unittest.main(warnings = 'ignore')\t#用unittest.main启动测试，warnings  = 'ignore'指忽略警告\n```\n\n## Django应用创建&&使用\n\n#### 创建Django的应用：`python manage.py startapp app_name`\n\n```markdown\n\t在Django项目的根目录下创建一个名为app_name的文件夹，里面包含一些测试用的占位文件，在 Django 中，每一个应用都是一个 Python 包\n```\n\n#### 启动Django的应用：`python manage.py test`\n\n```markdown\n\t运行app_name下的test.py\n```\n\n### 测试\n\n```powershell\npython manage.py test\t\t运行功能测试和单元测试\npython manage.py test lists\t 指定运行lists应用中的测试\tdjango会自动去找该目录下的tests.py文件执行测试\n```\n\n## ORM——对象关系映射器（模型化数据库，models.py中的一个类就是数据库中的一张表）\n\n```markdown\n1.\t在数据库中创建新记录：\n\t1.1\t创建一个对象\t如：a = A()\t#A是一个类，实际上就是数据库中的一张表，一个对象就是表中的一行\n\t1.2 给对象的属性赋值\t如：a.text = 'hello'\n\t1.3\t调用save()函数保存到数据库中\t如：a.save()则a的值都会被储存到数据库中\n\t1.4\tobjects即类属性，使用A.objects.all()取出这个表中的全部记录，得到一个类似于列表的对象，用[]取值\n\t1.5 count()函数，统计数据库中该类对象的个数\n\t1.6 get()函数，获取特定的对象，如A.objects.get(id=test_id)，获取id为test_id的那个对象\n2.\tORM的类要在models.py中声明和定义，且要使用save(),count()这些函数，该类得继承于models.Model\n\t如：\n\t\tclass test(models.Model):\n\t\t\ttext = models.TextField()\n3.\t创建的类（表）默认有一个id作为主键，其它的属性（列）都需要自定义，（）中加入default=xxx设置缺省值\n\t3.1\tmodels.TextField()\t\t定义文本字段（无需限制长度）\n\t3.2 models.IntegerField()\t定义整型字段\n\t3.3 models.CharField()\t\t定义字符型字段（需要限制长度）\n\t3.4 models.DateField()\t\t定义时间z\n4. 通过外键使俩个类关联起来\n\t即如果要在A类中使用B类作为A类的一个属性则要用models.ForeignKey(B, default=None)来声明\n\t如：\n\t\tclass B(models.Model):\n\t\t\tpass\n\t\tclass A(models.Model):\n\t\t\tb = models.ForeignKey(B, on_delete=models.CASCADE)\n注：定义外键时on_delete必须给值\n\n5.\tmodels中on_delete的值含义\n    \ton_delete=None, # 删除关联表中的数据时,当前表与其关联的field的行为\n    \ton_delete=models.CASCADE, # 删除关联数据,与之关联也删除\n    \ton_delete=models.DO_NOTHING, # 删除关联数据,什么也不做\n    \ton_delete=models.PROTECT, # 删除关联数据,引发错误ProtectedError\n    # ForeignKey('关联表', on_delete=models.SET_NULL, blank=True, null=True)\n    \ton_delete=models.SET_NULL, # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）\n    # ForeignKey('关联表', on_delete=models.SET_DEFAULT, default='默认值')\n    \ton_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）\n    \ton_delete=models.SET, # 删除关联数据,\n    \t\ta.关联的值设置为指定值,设置：models.SET(值)\n    \t\tb.关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象)\n```\n\n## migration——根据models.py创建数据库\n\n```markdown\n1.\tpython manage.py makemigrations #后面可加app_name\n\t为改动创建迁移记录\n2.\tpython manage.py migrate\n\t将操作同步到数据库 \t\t\t\t#建议同步前先把之前的文件删除掉\n2.\t查看迁移文件\n\t迁移文件都保存在migrations文件夹中\n```\n\n\n\n## URL解析与正则表达式：\n\n### 基础概念\n\n```markdown\n1.\t使用resolve函数解析URL，\n注：resolve函数Django2.0后将django.core.urlresolve包更名为了django.urls\n\n2.\tdjango中如果url几乎正确，但最后缺少一个 / 则会永久重定向\n\n3.\t在项目根目录下的项目名目录下中的urls.py中包含整个项目所有URL解析和对应的调用函数\n如：👇\n```\n\n``` python\nfrom django.contrib import admin\nfrom django.conf.urls import url\nfrom lists import views as lists_view\n\nurlpatterns = [\t\t#要解析的URL写在这个urlpatterns列表中\n    url(r'^$', lists_view.home_page, name='home_page'),\t# url第一个参数是对应解析的URL，第二个参数是用于解析的函数，第三个name是这个解析的别名\n    url(r'^lists/(.+)/$', lists_view.view_list, name='view_list'),  # 使用正则表达式去匹配 (.+) 是捕获组可以匹配/后的任意个字符，捕获到的文本会作为参数传给（视图层）解析函数，传参自带一个request\n    url(r'^lists/new$', lists_view.new_list, name='new_list'),\n]\n```\n\n\n\n## 静态文件的放置\n\n```markdown\n可以统一放在应用的static文件夹下，在Django的根目录下的项目名文件夹下的setting文件中的STATIC_URL = '/static/'\n指定了Django会在每一个的应用的目录中寻找static文件\n静态文件使用方法：/static/文件在static文件夹下的路径\n```\n\n","source":"_posts/TDD.md","raw":"---\ntitle: TDD\ndate: 2022-03-24 21:30:25\ntag: 其他\n---\n\n## 项目的创建\n\n[Django3官方文档](https://docs.djangoproject.com/zh-hans/3.0/intro/tutorial01/)\n\n##### 创建Django项目：`django-admin startproject proj_name`\n\n```markdown\n \t在当前路径下创建一个名为proj_name的文件，该文件为Django项目的根文件夹，文件夹里面也有一个proj_name，该文件为Django项目的全局配置文件，是一个python包\n```\n\n\n\n##### 运行Django项目：`python manage.py runserver 80`\n\n```markdown\n\t开启一个运行在80端口的http服务，本地运行使用http://localhost即可访问\n```\n\n\n\n#### unittest模块的使用——代码示例\n\n```python\nfrom selenium import webdriver\nimport unittest\nclass NewVisitorTest(unittest.TestCase):\t#继承于unittest.TestCase的类\n    def setUp(self):\t\t\t\t\t#类似于c++的构造函数，在该类实例化时调用\n        self.browser = webdriver.Chrome();\n        self.browser.implicitly_wait(3)\t\t#隐式等待，等待3秒，让selenium有充足时间加载\n    def tearDown(self):\t\t\t\t\t#类似于c++的析构函数，在类的实例结束时调用\n        self.browser.quit()\t\t\t\t#关闭浏览器\n    def test_can_start_a_list_and_retrieve_it_later(self): #自定义的测试函数\n        self.browser.get('http://localhost:8000')\n        self.assertIn('To-Do', self.browser.title)\n        self.fail('Finish th test!')\n\nif __name__ == '__main__':\n    unittest.main(warnings = 'ignore')\t#用unittest.main启动测试，warnings  = 'ignore'指忽略警告\n```\n\n## Django应用创建&&使用\n\n#### 创建Django的应用：`python manage.py startapp app_name`\n\n```markdown\n\t在Django项目的根目录下创建一个名为app_name的文件夹，里面包含一些测试用的占位文件，在 Django 中，每一个应用都是一个 Python 包\n```\n\n#### 启动Django的应用：`python manage.py test`\n\n```markdown\n\t运行app_name下的test.py\n```\n\n### 测试\n\n```powershell\npython manage.py test\t\t运行功能测试和单元测试\npython manage.py test lists\t 指定运行lists应用中的测试\tdjango会自动去找该目录下的tests.py文件执行测试\n```\n\n## ORM——对象关系映射器（模型化数据库，models.py中的一个类就是数据库中的一张表）\n\n```markdown\n1.\t在数据库中创建新记录：\n\t1.1\t创建一个对象\t如：a = A()\t#A是一个类，实际上就是数据库中的一张表，一个对象就是表中的一行\n\t1.2 给对象的属性赋值\t如：a.text = 'hello'\n\t1.3\t调用save()函数保存到数据库中\t如：a.save()则a的值都会被储存到数据库中\n\t1.4\tobjects即类属性，使用A.objects.all()取出这个表中的全部记录，得到一个类似于列表的对象，用[]取值\n\t1.5 count()函数，统计数据库中该类对象的个数\n\t1.6 get()函数，获取特定的对象，如A.objects.get(id=test_id)，获取id为test_id的那个对象\n2.\tORM的类要在models.py中声明和定义，且要使用save(),count()这些函数，该类得继承于models.Model\n\t如：\n\t\tclass test(models.Model):\n\t\t\ttext = models.TextField()\n3.\t创建的类（表）默认有一个id作为主键，其它的属性（列）都需要自定义，（）中加入default=xxx设置缺省值\n\t3.1\tmodels.TextField()\t\t定义文本字段（无需限制长度）\n\t3.2 models.IntegerField()\t定义整型字段\n\t3.3 models.CharField()\t\t定义字符型字段（需要限制长度）\n\t3.4 models.DateField()\t\t定义时间z\n4. 通过外键使俩个类关联起来\n\t即如果要在A类中使用B类作为A类的一个属性则要用models.ForeignKey(B, default=None)来声明\n\t如：\n\t\tclass B(models.Model):\n\t\t\tpass\n\t\tclass A(models.Model):\n\t\t\tb = models.ForeignKey(B, on_delete=models.CASCADE)\n注：定义外键时on_delete必须给值\n\n5.\tmodels中on_delete的值含义\n    \ton_delete=None, # 删除关联表中的数据时,当前表与其关联的field的行为\n    \ton_delete=models.CASCADE, # 删除关联数据,与之关联也删除\n    \ton_delete=models.DO_NOTHING, # 删除关联数据,什么也不做\n    \ton_delete=models.PROTECT, # 删除关联数据,引发错误ProtectedError\n    # ForeignKey('关联表', on_delete=models.SET_NULL, blank=True, null=True)\n    \ton_delete=models.SET_NULL, # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）\n    # ForeignKey('关联表', on_delete=models.SET_DEFAULT, default='默认值')\n    \ton_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）\n    \ton_delete=models.SET, # 删除关联数据,\n    \t\ta.关联的值设置为指定值,设置：models.SET(值)\n    \t\tb.关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象)\n```\n\n## migration——根据models.py创建数据库\n\n```markdown\n1.\tpython manage.py makemigrations #后面可加app_name\n\t为改动创建迁移记录\n2.\tpython manage.py migrate\n\t将操作同步到数据库 \t\t\t\t#建议同步前先把之前的文件删除掉\n2.\t查看迁移文件\n\t迁移文件都保存在migrations文件夹中\n```\n\n\n\n## URL解析与正则表达式：\n\n### 基础概念\n\n```markdown\n1.\t使用resolve函数解析URL，\n注：resolve函数Django2.0后将django.core.urlresolve包更名为了django.urls\n\n2.\tdjango中如果url几乎正确，但最后缺少一个 / 则会永久重定向\n\n3.\t在项目根目录下的项目名目录下中的urls.py中包含整个项目所有URL解析和对应的调用函数\n如：👇\n```\n\n``` python\nfrom django.contrib import admin\nfrom django.conf.urls import url\nfrom lists import views as lists_view\n\nurlpatterns = [\t\t#要解析的URL写在这个urlpatterns列表中\n    url(r'^$', lists_view.home_page, name='home_page'),\t# url第一个参数是对应解析的URL，第二个参数是用于解析的函数，第三个name是这个解析的别名\n    url(r'^lists/(.+)/$', lists_view.view_list, name='view_list'),  # 使用正则表达式去匹配 (.+) 是捕获组可以匹配/后的任意个字符，捕获到的文本会作为参数传给（视图层）解析函数，传参自带一个request\n    url(r'^lists/new$', lists_view.new_list, name='new_list'),\n]\n```\n\n\n\n## 静态文件的放置\n\n```markdown\n可以统一放在应用的static文件夹下，在Django的根目录下的项目名文件夹下的setting文件中的STATIC_URL = '/static/'\n指定了Django会在每一个的应用的目录中寻找static文件\n静态文件使用方法：/static/文件在static文件夹下的路径\n```\n\n","slug":"TDD","published":1,"updated":"2023-02-23T14:55:18.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clehaba90000atcvceob93n4w","content":"<h2 id=\"项目的创建\"><a href=\"#项目的创建\" class=\"headerlink\" title=\"项目的创建\"></a>项目的创建</h2><p><a href=\"https://docs.djangoproject.com/zh-hans/3.0/intro/tutorial01/\">Django3官方文档</a></p>\n<h5 id=\"创建Django项目：django-admin-startproject-proj-name\"><a href=\"#创建Django项目：django-admin-startproject-proj-name\" class=\"headerlink\" title=\"创建Django项目：django-admin startproject proj_name\"></a>创建Django项目：<code>django-admin startproject proj_name</code></h5><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在当前路径下创建一个名为proj<span class=\"emphasis\">_name的文件，该文件为Django项目的根文件夹，文件夹里面也有一个proj_</span>name，该文件为Django项目的全局配置文件，是一个python包</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"运行Django项目：python-manage-py-runserver-80\"><a href=\"#运行Django项目：python-manage-py-runserver-80\" class=\"headerlink\" title=\"运行Django项目：python manage.py runserver 80\"></a>运行Django项目：<code>python manage.py runserver 80</code></h5><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开启一个运行在80端口的http服务，本地运行使用http://localhost即可访问</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"unittest模块的使用——代码示例\"><a href=\"#unittest模块的使用——代码示例\" class=\"headerlink\" title=\"unittest模块的使用——代码示例\"></a>unittest模块的使用——代码示例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NewVisitorTest</span>(unittest.TestCase):\t<span class=\"comment\">#继承于unittest.TestCase的类</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setUp</span>(<span class=\"params\">self</span>):\t\t\t\t\t<span class=\"comment\">#类似于c++的构造函数，在该类实例化时调用</span></span><br><span class=\"line\">        self.browser = webdriver.Chrome();</span><br><span class=\"line\">        self.browser.implicitly_wait(<span class=\"number\">3</span>)\t\t<span class=\"comment\">#隐式等待，等待3秒，让selenium有充足时间加载</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">tearDown</span>(<span class=\"params\">self</span>):\t\t\t\t\t<span class=\"comment\">#类似于c++的析构函数，在类的实例结束时调用</span></span><br><span class=\"line\">        self.browser.quit()\t\t\t\t<span class=\"comment\">#关闭浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_can_start_a_list_and_retrieve_it_later</span>(<span class=\"params\">self</span>): <span class=\"comment\">#自定义的测试函数</span></span><br><span class=\"line\">        self.browser.get(<span class=\"string\">&#x27;http://localhost:8000&#x27;</span>)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&#x27;To-Do&#x27;</span>, self.browser.title)</span><br><span class=\"line\">        self.fail(<span class=\"string\">&#x27;Finish th test!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    unittest.main(warnings = <span class=\"string\">&#x27;ignore&#x27;</span>)\t<span class=\"comment\">#用unittest.main启动测试，warnings  = &#x27;ignore&#x27;指忽略警告</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Django应用创建-amp-amp-使用\"><a href=\"#Django应用创建-amp-amp-使用\" class=\"headerlink\" title=\"Django应用创建&amp;&amp;使用\"></a>Django应用创建&amp;&amp;使用</h2><h4 id=\"创建Django的应用：python-manage-py-startapp-app-name\"><a href=\"#创建Django的应用：python-manage-py-startapp-app-name\" class=\"headerlink\" title=\"创建Django的应用：python manage.py startapp app_name\"></a>创建Django的应用：<code>python manage.py startapp app_name</code></h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Django项目的根目录下创建一个名为app<span class=\"emphasis\">_name的文件夹，里面包含一些测试用的占位文件，在 Django 中，每一个应用都是一个 Python 包</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动Django的应用：python-manage-py-test\"><a href=\"#启动Django的应用：python-manage-py-test\" class=\"headerlink\" title=\"启动Django的应用：python manage.py test\"></a>启动Django的应用：<code>python manage.py test</code></h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行app<span class=\"emphasis\">_name下的test.py</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py test\t\t运行功能测试和单元测试</span><br><span class=\"line\">python manage.py test lists\t 指定运行lists应用中的测试\tdjango会自动去找该目录下的tests.py文件执行测试</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ORM——对象关系映射器（模型化数据库，models-py中的一个类就是数据库中的一张表）\"><a href=\"#ORM——对象关系映射器（模型化数据库，models-py中的一个类就是数据库中的一张表）\" class=\"headerlink\" title=\"ORM——对象关系映射器（模型化数据库，models.py中的一个类就是数据库中的一张表）\"></a>ORM——对象关系映射器（模型化数据库，models.py中的一个类就是数据库中的一张表）</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\t在数据库中创建新记录：</span><br><span class=\"line\"><span class=\"code\">\t1.1\t创建一个对象\t如：a = A()\t#A是一个类，实际上就是数据库中的一张表，一个对象就是表中的一行</span></span><br><span class=\"line\"><span class=\"code\">\t1.2 给对象的属性赋值\t如：a.text = &#x27;hello&#x27;</span></span><br><span class=\"line\"><span class=\"code\">\t1.3\t调用save()函数保存到数据库中\t如：a.save()则a的值都会被储存到数据库中</span></span><br><span class=\"line\"><span class=\"code\">\t1.4\tobjects即类属性，使用A.objects.all()取出这个表中的全部记录，得到一个类似于列表的对象，用[]取值</span></span><br><span class=\"line\"><span class=\"code\">\t1.5 count()函数，统计数据库中该类对象的个数</span></span><br><span class=\"line\"><span class=\"code\">\t1.6 get()函数，获取特定的对象，如A.objects.get(id=test_id)，获取id为test_id的那个对象</span></span><br><span class=\"line\"><span class=\"code\">2.\tORM的类要在models.py中声明和定义，且要使用save(),count()这些函数，该类得继承于models.Model</span></span><br><span class=\"line\"><span class=\"code\">\t如：</span></span><br><span class=\"line\"><span class=\"code\">\t\tclass test(models.Model):</span></span><br><span class=\"line\"><span class=\"code\">\t\t\ttext = models.TextField()</span></span><br><span class=\"line\"><span class=\"code\">3.\t创建的类（表）默认有一个id作为主键，其它的属性（列）都需要自定义，（）中加入default=xxx设置缺省值</span></span><br><span class=\"line\"><span class=\"code\">\t3.1\tmodels.TextField()\t\t定义文本字段（无需限制长度）</span></span><br><span class=\"line\"><span class=\"code\">\t3.2 models.IntegerField()\t定义整型字段</span></span><br><span class=\"line\"><span class=\"code\">\t3.3 models.CharField()\t\t定义字符型字段（需要限制长度）</span></span><br><span class=\"line\"><span class=\"code\">\t3.4 models.DateField()\t\t定义时间z</span></span><br><span class=\"line\"><span class=\"code\">4. 通过外键使俩个类关联起来</span></span><br><span class=\"line\"><span class=\"code\">\t即如果要在A类中使用B类作为A类的一个属性则要用models.ForeignKey(B, default=None)来声明</span></span><br><span class=\"line\"><span class=\"code\">\t如：</span></span><br><span class=\"line\"><span class=\"code\">\t\tclass B(models.Model):</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tpass</span></span><br><span class=\"line\"><span class=\"code\">\t\tclass A(models.Model):</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tb = models.ForeignKey(B, on_delete=models.CASCADE)</span></span><br><span class=\"line\"><span class=\"code\">注：定义外键时on_delete必须给值</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"bullet\">5.</span>\tmodels中on<span class=\"emphasis\">_delete的值含义</span></span><br><span class=\"line\"><span class=\"emphasis\">    \ton_</span>delete=None, # 删除关联表中的数据时,当前表与其关联的field的行为</span><br><span class=\"line\"><span class=\"code\">    \ton_delete=models.CASCADE, # 删除关联数据,与之关联也删除</span></span><br><span class=\"line\"><span class=\"code\">    \ton_delete=models.DO_NOTHING, # 删除关联数据,什么也不做</span></span><br><span class=\"line\"><span class=\"code\">    \ton_delete=models.PROTECT, # 删除关联数据,引发错误ProtectedError</span></span><br><span class=\"line\"><span class=\"code\">    # ForeignKey(&#x27;关联表&#x27;, on_delete=models.SET_NULL, blank=True, null=True)</span></span><br><span class=\"line\"><span class=\"code\">    \ton_delete=models.SET_NULL, # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）</span></span><br><span class=\"line\"><span class=\"code\">    # ForeignKey(&#x27;关联表&#x27;, on_delete=models.SET_DEFAULT, default=&#x27;默认值&#x27;)</span></span><br><span class=\"line\"><span class=\"code\">    \ton_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）</span></span><br><span class=\"line\"><span class=\"code\">    \ton_delete=models.SET, # 删除关联数据,</span></span><br><span class=\"line\"><span class=\"code\">    \t\ta.关联的值设置为指定值,设置：models.SET(值)</span></span><br><span class=\"line\"><span class=\"code\">    \t\tb.关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"migration——根据models-py创建数据库\"><a href=\"#migration——根据models-py创建数据库\" class=\"headerlink\" title=\"migration——根据models.py创建数据库\"></a>migration——根据models.py创建数据库</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\tpython manage.py makemigrations #后面可加app<span class=\"emphasis\">_name</span></span><br><span class=\"line\"><span class=\"emphasis\">\t为改动创建迁移记录</span></span><br><span class=\"line\"><span class=\"emphasis\">2.\tpython manage.py migrate</span></span><br><span class=\"line\"><span class=\"emphasis\">\t将操作同步到数据库 \t\t\t\t#建议同步前先把之前的文件删除掉</span></span><br><span class=\"line\"><span class=\"emphasis\">2.\t查看迁移文件</span></span><br><span class=\"line\"><span class=\"emphasis\">\t迁移文件都保存在migrations文件夹中</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"URL解析与正则表达式：\"><a href=\"#URL解析与正则表达式：\" class=\"headerlink\" title=\"URL解析与正则表达式：\"></a>URL解析与正则表达式：</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\t使用resolve函数解析URL，</span><br><span class=\"line\">注：resolve函数Django2.0后将django.core.urlresolve包更名为了django.urls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">2.</span>\tdjango中如果url几乎正确，但最后缺少一个 / 则会永久重定向</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">3.</span>\t在项目根目录下的项目名目录下中的urls.py中包含整个项目所有URL解析和对应的调用函数</span><br><span class=\"line\">如：👇</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> lists <span class=\"keyword\">import</span> views <span class=\"keyword\">as</span> lists_view</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [\t\t<span class=\"comment\">#要解析的URL写在这个urlpatterns列表中</span></span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^$&#x27;</span>, lists_view.home_page, name=<span class=\"string\">&#x27;home_page&#x27;</span>),\t<span class=\"comment\"># url第一个参数是对应解析的URL，第二个参数是用于解析的函数，第三个name是这个解析的别名</span></span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^lists/(.+)/$&#x27;</span>, lists_view.view_list, name=<span class=\"string\">&#x27;view_list&#x27;</span>),  <span class=\"comment\"># 使用正则表达式去匹配 (.+) 是捕获组可以匹配/后的任意个字符，捕获到的文本会作为参数传给（视图层）解析函数，传参自带一个request</span></span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^lists/new$&#x27;</span>, lists_view.new_list, name=<span class=\"string\">&#x27;new_list&#x27;</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"静态文件的放置\"><a href=\"#静态文件的放置\" class=\"headerlink\" title=\"静态文件的放置\"></a>静态文件的放置</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以统一放在应用的static文件夹下，在Django的根目录下的项目名文件夹下的setting文件中的STATIC<span class=\"emphasis\">_URL = &#x27;/static/&#x27;</span></span><br><span class=\"line\"><span class=\"emphasis\">指定了Django会在每一个的应用的目录中寻找static文件</span></span><br><span class=\"line\"><span class=\"emphasis\">静态文件使用方法：/static/文件在static文件夹下的路径</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"widget":{"top":[{"class_name":{"id_name":null,"name":null,"icon":null,"html":null}}],"bottom":[{"class_name":"user-map","id_name":"user-map","name":"访客地图","icon":"fas fa-heartbeat","order":null,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}}},"cover":false,"excerpt":"","more":"<h2 id=\"项目的创建\"><a href=\"#项目的创建\" class=\"headerlink\" title=\"项目的创建\"></a>项目的创建</h2><p><a href=\"https://docs.djangoproject.com/zh-hans/3.0/intro/tutorial01/\">Django3官方文档</a></p>\n<h5 id=\"创建Django项目：django-admin-startproject-proj-name\"><a href=\"#创建Django项目：django-admin-startproject-proj-name\" class=\"headerlink\" title=\"创建Django项目：django-admin startproject proj_name\"></a>创建Django项目：<code>django-admin startproject proj_name</code></h5><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在当前路径下创建一个名为proj<span class=\"emphasis\">_name的文件，该文件为Django项目的根文件夹，文件夹里面也有一个proj_</span>name，该文件为Django项目的全局配置文件，是一个python包</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"运行Django项目：python-manage-py-runserver-80\"><a href=\"#运行Django项目：python-manage-py-runserver-80\" class=\"headerlink\" title=\"运行Django项目：python manage.py runserver 80\"></a>运行Django项目：<code>python manage.py runserver 80</code></h5><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开启一个运行在80端口的http服务，本地运行使用http://localhost即可访问</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"unittest模块的使用——代码示例\"><a href=\"#unittest模块的使用——代码示例\" class=\"headerlink\" title=\"unittest模块的使用——代码示例\"></a>unittest模块的使用——代码示例</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NewVisitorTest</span>(unittest.TestCase):\t<span class=\"comment\">#继承于unittest.TestCase的类</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setUp</span>(<span class=\"params\">self</span>):\t\t\t\t\t<span class=\"comment\">#类似于c++的构造函数，在该类实例化时调用</span></span><br><span class=\"line\">        self.browser = webdriver.Chrome();</span><br><span class=\"line\">        self.browser.implicitly_wait(<span class=\"number\">3</span>)\t\t<span class=\"comment\">#隐式等待，等待3秒，让selenium有充足时间加载</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">tearDown</span>(<span class=\"params\">self</span>):\t\t\t\t\t<span class=\"comment\">#类似于c++的析构函数，在类的实例结束时调用</span></span><br><span class=\"line\">        self.browser.quit()\t\t\t\t<span class=\"comment\">#关闭浏览器</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_can_start_a_list_and_retrieve_it_later</span>(<span class=\"params\">self</span>): <span class=\"comment\">#自定义的测试函数</span></span><br><span class=\"line\">        self.browser.get(<span class=\"string\">&#x27;http://localhost:8000&#x27;</span>)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&#x27;To-Do&#x27;</span>, self.browser.title)</span><br><span class=\"line\">        self.fail(<span class=\"string\">&#x27;Finish th test!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    unittest.main(warnings = <span class=\"string\">&#x27;ignore&#x27;</span>)\t<span class=\"comment\">#用unittest.main启动测试，warnings  = &#x27;ignore&#x27;指忽略警告</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Django应用创建-amp-amp-使用\"><a href=\"#Django应用创建-amp-amp-使用\" class=\"headerlink\" title=\"Django应用创建&amp;&amp;使用\"></a>Django应用创建&amp;&amp;使用</h2><h4 id=\"创建Django的应用：python-manage-py-startapp-app-name\"><a href=\"#创建Django的应用：python-manage-py-startapp-app-name\" class=\"headerlink\" title=\"创建Django的应用：python manage.py startapp app_name\"></a>创建Django的应用：<code>python manage.py startapp app_name</code></h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Django项目的根目录下创建一个名为app<span class=\"emphasis\">_name的文件夹，里面包含一些测试用的占位文件，在 Django 中，每一个应用都是一个 Python 包</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动Django的应用：python-manage-py-test\"><a href=\"#启动Django的应用：python-manage-py-test\" class=\"headerlink\" title=\"启动Django的应用：python manage.py test\"></a>启动Django的应用：<code>python manage.py test</code></h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行app<span class=\"emphasis\">_name下的test.py</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py test\t\t运行功能测试和单元测试</span><br><span class=\"line\">python manage.py test lists\t 指定运行lists应用中的测试\tdjango会自动去找该目录下的tests.py文件执行测试</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ORM——对象关系映射器（模型化数据库，models-py中的一个类就是数据库中的一张表）\"><a href=\"#ORM——对象关系映射器（模型化数据库，models-py中的一个类就是数据库中的一张表）\" class=\"headerlink\" title=\"ORM——对象关系映射器（模型化数据库，models.py中的一个类就是数据库中的一张表）\"></a>ORM——对象关系映射器（模型化数据库，models.py中的一个类就是数据库中的一张表）</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\t在数据库中创建新记录：</span><br><span class=\"line\"><span class=\"code\">\t1.1\t创建一个对象\t如：a = A()\t#A是一个类，实际上就是数据库中的一张表，一个对象就是表中的一行</span></span><br><span class=\"line\"><span class=\"code\">\t1.2 给对象的属性赋值\t如：a.text = &#x27;hello&#x27;</span></span><br><span class=\"line\"><span class=\"code\">\t1.3\t调用save()函数保存到数据库中\t如：a.save()则a的值都会被储存到数据库中</span></span><br><span class=\"line\"><span class=\"code\">\t1.4\tobjects即类属性，使用A.objects.all()取出这个表中的全部记录，得到一个类似于列表的对象，用[]取值</span></span><br><span class=\"line\"><span class=\"code\">\t1.5 count()函数，统计数据库中该类对象的个数</span></span><br><span class=\"line\"><span class=\"code\">\t1.6 get()函数，获取特定的对象，如A.objects.get(id=test_id)，获取id为test_id的那个对象</span></span><br><span class=\"line\"><span class=\"code\">2.\tORM的类要在models.py中声明和定义，且要使用save(),count()这些函数，该类得继承于models.Model</span></span><br><span class=\"line\"><span class=\"code\">\t如：</span></span><br><span class=\"line\"><span class=\"code\">\t\tclass test(models.Model):</span></span><br><span class=\"line\"><span class=\"code\">\t\t\ttext = models.TextField()</span></span><br><span class=\"line\"><span class=\"code\">3.\t创建的类（表）默认有一个id作为主键，其它的属性（列）都需要自定义，（）中加入default=xxx设置缺省值</span></span><br><span class=\"line\"><span class=\"code\">\t3.1\tmodels.TextField()\t\t定义文本字段（无需限制长度）</span></span><br><span class=\"line\"><span class=\"code\">\t3.2 models.IntegerField()\t定义整型字段</span></span><br><span class=\"line\"><span class=\"code\">\t3.3 models.CharField()\t\t定义字符型字段（需要限制长度）</span></span><br><span class=\"line\"><span class=\"code\">\t3.4 models.DateField()\t\t定义时间z</span></span><br><span class=\"line\"><span class=\"code\">4. 通过外键使俩个类关联起来</span></span><br><span class=\"line\"><span class=\"code\">\t即如果要在A类中使用B类作为A类的一个属性则要用models.ForeignKey(B, default=None)来声明</span></span><br><span class=\"line\"><span class=\"code\">\t如：</span></span><br><span class=\"line\"><span class=\"code\">\t\tclass B(models.Model):</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tpass</span></span><br><span class=\"line\"><span class=\"code\">\t\tclass A(models.Model):</span></span><br><span class=\"line\"><span class=\"code\">\t\t\tb = models.ForeignKey(B, on_delete=models.CASCADE)</span></span><br><span class=\"line\"><span class=\"code\">注：定义外键时on_delete必须给值</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"bullet\">5.</span>\tmodels中on<span class=\"emphasis\">_delete的值含义</span></span><br><span class=\"line\"><span class=\"emphasis\">    \ton_</span>delete=None, # 删除关联表中的数据时,当前表与其关联的field的行为</span><br><span class=\"line\"><span class=\"code\">    \ton_delete=models.CASCADE, # 删除关联数据,与之关联也删除</span></span><br><span class=\"line\"><span class=\"code\">    \ton_delete=models.DO_NOTHING, # 删除关联数据,什么也不做</span></span><br><span class=\"line\"><span class=\"code\">    \ton_delete=models.PROTECT, # 删除关联数据,引发错误ProtectedError</span></span><br><span class=\"line\"><span class=\"code\">    # ForeignKey(&#x27;关联表&#x27;, on_delete=models.SET_NULL, blank=True, null=True)</span></span><br><span class=\"line\"><span class=\"code\">    \ton_delete=models.SET_NULL, # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）</span></span><br><span class=\"line\"><span class=\"code\">    # ForeignKey(&#x27;关联表&#x27;, on_delete=models.SET_DEFAULT, default=&#x27;默认值&#x27;)</span></span><br><span class=\"line\"><span class=\"code\">    \ton_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）</span></span><br><span class=\"line\"><span class=\"code\">    \ton_delete=models.SET, # 删除关联数据,</span></span><br><span class=\"line\"><span class=\"code\">    \t\ta.关联的值设置为指定值,设置：models.SET(值)</span></span><br><span class=\"line\"><span class=\"code\">    \t\tb.关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"migration——根据models-py创建数据库\"><a href=\"#migration——根据models-py创建数据库\" class=\"headerlink\" title=\"migration——根据models.py创建数据库\"></a>migration——根据models.py创建数据库</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\tpython manage.py makemigrations #后面可加app<span class=\"emphasis\">_name</span></span><br><span class=\"line\"><span class=\"emphasis\">\t为改动创建迁移记录</span></span><br><span class=\"line\"><span class=\"emphasis\">2.\tpython manage.py migrate</span></span><br><span class=\"line\"><span class=\"emphasis\">\t将操作同步到数据库 \t\t\t\t#建议同步前先把之前的文件删除掉</span></span><br><span class=\"line\"><span class=\"emphasis\">2.\t查看迁移文件</span></span><br><span class=\"line\"><span class=\"emphasis\">\t迁移文件都保存在migrations文件夹中</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"URL解析与正则表达式：\"><a href=\"#URL解析与正则表达式：\" class=\"headerlink\" title=\"URL解析与正则表达式：\"></a>URL解析与正则表达式：</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span>\t使用resolve函数解析URL，</span><br><span class=\"line\">注：resolve函数Django2.0后将django.core.urlresolve包更名为了django.urls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">2.</span>\tdjango中如果url几乎正确，但最后缺少一个 / 则会永久重定向</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">3.</span>\t在项目根目录下的项目名目录下中的urls.py中包含整个项目所有URL解析和对应的调用函数</span><br><span class=\"line\">如：👇</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> lists <span class=\"keyword\">import</span> views <span class=\"keyword\">as</span> lists_view</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [\t\t<span class=\"comment\">#要解析的URL写在这个urlpatterns列表中</span></span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^$&#x27;</span>, lists_view.home_page, name=<span class=\"string\">&#x27;home_page&#x27;</span>),\t<span class=\"comment\"># url第一个参数是对应解析的URL，第二个参数是用于解析的函数，第三个name是这个解析的别名</span></span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^lists/(.+)/$&#x27;</span>, lists_view.view_list, name=<span class=\"string\">&#x27;view_list&#x27;</span>),  <span class=\"comment\"># 使用正则表达式去匹配 (.+) 是捕获组可以匹配/后的任意个字符，捕获到的文本会作为参数传给（视图层）解析函数，传参自带一个request</span></span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^lists/new$&#x27;</span>, lists_view.new_list, name=<span class=\"string\">&#x27;new_list&#x27;</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"静态文件的放置\"><a href=\"#静态文件的放置\" class=\"headerlink\" title=\"静态文件的放置\"></a>静态文件的放置</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以统一放在应用的static文件夹下，在Django的根目录下的项目名文件夹下的setting文件中的STATIC<span class=\"emphasis\">_URL = &#x27;/static/&#x27;</span></span><br><span class=\"line\"><span class=\"emphasis\">指定了Django会在每一个的应用的目录中寻找static文件</span></span><br><span class=\"line\"><span class=\"emphasis\">静态文件使用方法：/static/文件在static文件夹下的路径</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"VSCode环境配置","date":"2022-05-12T01:21:45.000Z","_content":"\n## task.json\n\n```json\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"type\": \"shell\",\n            \"label\": \"task g++\",    //修改此项\n            \"command\": \"F:\\\\Program Files\\\\Cmove\\\\mingw64\\\\bin\\\\g++.exe\",\t//修改为当前g++路径\n            \"args\": [\n                \"-g\",\n                \"${file}\",\n                \"-o\",\n                \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\"\n            ],\n            \"options\": {\n                \"cwd\": \"F:\\\\Program Files\\\\Cmove\\\\mingw64\\\\bin\"\t//修改为当前mingw64路径\n            },\n            \"problemMatcher\": [\n                \"$gcc\"\n            ],\n            \"group\": \"build\"\n        }\n    ]\n}\n```\n\n## launch.json\n\n```json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"g++.exe build and debug active file\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"environment\": [],\n            \"externalConsole\": false,      //修改此项，让其弹出终端\n            \"MIMode\": \"gdb\",\n            \"miDebuggerPath\": \"F:\\\\Program Files\\\\Cmove\\\\mingw64\\\\bin\\\\gdb.exe\", //修改为当前gdb路径\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ],\n            \"preLaunchTask\": \"task g++\" //修改此项\n        }\n    ]\n}\n```\n\n","source":"_posts/VSCode环境配置.md","raw":"---\ntitle: VSCode环境配置\ndate: 2022-05-12 9:21:45\ntag: 其他\n---\n\n## task.json\n\n```json\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"type\": \"shell\",\n            \"label\": \"task g++\",    //修改此项\n            \"command\": \"F:\\\\Program Files\\\\Cmove\\\\mingw64\\\\bin\\\\g++.exe\",\t//修改为当前g++路径\n            \"args\": [\n                \"-g\",\n                \"${file}\",\n                \"-o\",\n                \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\"\n            ],\n            \"options\": {\n                \"cwd\": \"F:\\\\Program Files\\\\Cmove\\\\mingw64\\\\bin\"\t//修改为当前mingw64路径\n            },\n            \"problemMatcher\": [\n                \"$gcc\"\n            ],\n            \"group\": \"build\"\n        }\n    ]\n}\n```\n\n## launch.json\n\n```json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"g++.exe build and debug active file\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"environment\": [],\n            \"externalConsole\": false,      //修改此项，让其弹出终端\n            \"MIMode\": \"gdb\",\n            \"miDebuggerPath\": \"F:\\\\Program Files\\\\Cmove\\\\mingw64\\\\bin\\\\gdb.exe\", //修改为当前gdb路径\n            \"setupCommands\": [\n                {\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                }\n            ],\n            \"preLaunchTask\": \"task g++\" //修改此项\n        }\n    ]\n}\n```\n\n","slug":"VSCode环境配置","published":1,"updated":"2023-02-23T14:55:41.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clehaba91000btcvc2adt4jms","content":"<h2 id=\"task-json\"><a href=\"#task-json\" class=\"headerlink\" title=\"task.json\"></a>task.json</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shell&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;task g++&quot;</span><span class=\"punctuation\">,</span>    <span class=\"comment\">//修改此项</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;F:\\\\Program Files\\\\Cmove\\\\mingw64\\\\bin\\\\g++.exe&quot;</span><span class=\"punctuation\">,</span>\t<span class=\"comment\">//修改为当前g++路径</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;file&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;F:\\\\Program Files\\\\Cmove\\\\mingw64\\\\bin&quot;</span>\t<span class=\"comment\">//修改为当前mingw64路径</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;problemMatcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$gcc&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;group&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"launch-json\"><a href=\"#launch-json\" class=\"headerlink\" title=\"launch.json\"></a>launch.json</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g++.exe build and debug active file&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppdbg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;stopAtEntry&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;environment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;externalConsole&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span>      <span class=\"comment\">//修改此项，让其弹出终端</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;MIMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;miDebuggerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;F:\\\\Program Files\\\\Cmove\\\\mingw64\\\\bin\\\\gdb.exe&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//修改为当前gdb路径</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;setupCommands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Enable pretty-printing for gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-enable-pretty-printing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;ignoreFailures&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;preLaunchTask&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;task g++&quot;</span> <span class=\"comment\">//修改此项</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"widget":{"top":[{"class_name":{"id_name":null,"name":null,"icon":null,"html":null}}],"bottom":[{"class_name":"user-map","id_name":"user-map","name":"访客地图","icon":"fas fa-heartbeat","order":null,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}}},"cover":false,"excerpt":"","more":"<h2 id=\"task-json\"><a href=\"#task-json\" class=\"headerlink\" title=\"task.json\"></a>task.json</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tasks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;shell&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;task g++&quot;</span><span class=\"punctuation\">,</span>    <span class=\"comment\">//修改此项</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;F:\\\\Program Files\\\\Cmove\\\\mingw64\\\\bin\\\\g++.exe&quot;</span><span class=\"punctuation\">,</span>\t<span class=\"comment\">//修改为当前g++路径</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;file&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;-o&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;options&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;F:\\\\Program Files\\\\Cmove\\\\mingw64\\\\bin&quot;</span>\t<span class=\"comment\">//修改为当前mingw64路径</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;problemMatcher&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;$gcc&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;group&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;build&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"launch-json\"><a href=\"#launch-json\" class=\"headerlink\" title=\"launch.json\"></a>launch.json</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g++.exe build and debug active file&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cppdbg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;program&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;stopAtEntry&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;cwd&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;environment&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;externalConsole&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span>      <span class=\"comment\">//修改此项，让其弹出终端</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;MIMode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;miDebuggerPath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;F:\\\\Program Files\\\\Cmove\\\\mingw64\\\\bin\\\\gdb.exe&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//修改为当前gdb路径</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;setupCommands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Enable pretty-printing for gdb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;-enable-pretty-printing&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;ignoreFailures&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;preLaunchTask&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;task g++&quot;</span> <span class=\"comment\">//修改此项</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Hello World","date":"2022-01-16T11:38:28.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2022-01-16 19:38:28\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2023-02-23T16:23:30.401Z","_id":"clehaba93000dtcvcamuqhjwj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"widget":{"top":[{"class_name":{"id_name":null,"name":null,"icon":null,"html":null}}],"bottom":[{"class_name":"user-map","id_name":"user-map","name":"访客地图","icon":"fas fa-heartbeat","order":null,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}}},"cover":false,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"vim基础教程","date":"2022-03-01T07:02:16.000Z","_content":"\n## 基本操作\n\n``` markdown\n终端中使用\tvim 文件名\t打开文件并进入普通模式，可浏览文件内容，复制，粘贴文件内容\n\t在普通模式中输入 i 进入编辑模式\t输入 : + 命令 可执行命令\n常见命令：\n\t:q\t直接退出，一般在没有对文件进行操作时使用\n\t:wq\t保存后退出\n\t:q!\t不保存，直接退出\n```\n\n### 普通模式\n\n```markdown\n移动光标：\n\th\t向左移动\n\tj\t向下移动\n\tk\t向上移动\n\tl\t向右移动\n\t搭配数字使用实现跨跳\n\t如：先按一下 5 在按一下 j 就是向下跳5行\n进阶移动：\t\n\tw\t\t即word跳跃到下一个单词的开头\n\tb\t\t即begin跳跃到上一个单词的开头\n\tgg\t\t跳转到文件的第一行\n\tshift+g\t跳转到文件的最后一行\n\tctrl+u\t向上翻页\n\tctrl+d\t向下翻页\n其他命令：\n\tf\t即find，\t查找离光标最近的匹配项\t\n\t\t使用\tf+r\t跳转到离光标最近的r上\n\ty\t即yank，\t复制。\n\t\t使用\tyaw\t即yank all words 复制整个单词\n\t\t使用\tyy\t复制当前行\n\t\t使用\ty4j\t复制当前行后向下4行的内容\n\td\t即delete，删除，同y，也可搭配其他\n\tc\t即change，改变\n\t\t使用\tcaw 直接删除光标所在的那个单词，并进入输入模式\n\t\t使用\tcc\t直接删除当前行，并进入输入模式\n\t\t使用\tc1j 直接删除当前行和向下1行，并进入输入模式\n\t\t使用\tc4j 直接删除当前行和向下4行，并进入输入模式\n\tp\t即paste，\t粘贴\n\tu\t即undo，\t撤销\n\t\t\n```\n\n### 输入模式\n\n```markdown \n在普通模式中\n\t按下 i 从当前光标位置进入输入模式\n\t按下 a 从当前光标的后一个位置进入输入模式\n\tshift+i 从当前光标所在行的开头进入输入模式\n\tshift+a 从当前光标所在行的末尾进入输入模式\n在输入模式中按 esc 退出输入模式，进入普通模式\n```\n\n### 命令模式\n\n```markdown\n在普通模式下输入\t:命令\t如：\n\t:q\t直接退出\n\t:w\t保存文件\n\t:wq\t保存并退出\n\t:PlugInstall\t安装插件\n\t:插件名\t打开插件\n\t?要搜索的内容\n```\n\n### 可视模式\n\n```markdown\n在普通模式下按\tv\t进入可视模式\t\n\t在可视模式中移动光标就可以选择内容，选中内容后\n\t\t按y复制这段内容\n\t\t按d删除这段内容\n\t\t按c删除这段内容，并进入输入模式\n```\n\n### 其他\n\n```markdown\n在普通模式下使用\t\n\t:version\t查看vim的配置，包括配置文件的位置。\n\t:echo $环境变量名\t来查看对应环境变量位置\n注：\n\tWindows中的用户的_vimrc文件在用户的家目录下，若没有，则手动创建一个即可。\n\t若使用插件则可以使用vim-plug来管理插件，需在_vimrc文件中添加\n\t\tcall plug#begin(\"存放插件的路径，用户自己指定即可\")\n\t\tPlug\t'插件名'\t在vimawesome网站中可以查看\n\t\tcall plug#end()\n\t_vimrc文件也可更改快捷键\t如：\n\t\timap jk <esc>\t用j+k组合键来代替ESC键的功能\n\t\tmap <silent> <C-e> :NERDTreeToggle<CR>\t使用ctrl+e来打开和关闭NERDTreeToggle插件\n```\n\n","source":"_posts/vim基础教程.md","raw":"---\ntitle: vim基础教程\ndate: 2022-03-01 15:02:16\ntag: 其他\n---\n\n## 基本操作\n\n``` markdown\n终端中使用\tvim 文件名\t打开文件并进入普通模式，可浏览文件内容，复制，粘贴文件内容\n\t在普通模式中输入 i 进入编辑模式\t输入 : + 命令 可执行命令\n常见命令：\n\t:q\t直接退出，一般在没有对文件进行操作时使用\n\t:wq\t保存后退出\n\t:q!\t不保存，直接退出\n```\n\n### 普通模式\n\n```markdown\n移动光标：\n\th\t向左移动\n\tj\t向下移动\n\tk\t向上移动\n\tl\t向右移动\n\t搭配数字使用实现跨跳\n\t如：先按一下 5 在按一下 j 就是向下跳5行\n进阶移动：\t\n\tw\t\t即word跳跃到下一个单词的开头\n\tb\t\t即begin跳跃到上一个单词的开头\n\tgg\t\t跳转到文件的第一行\n\tshift+g\t跳转到文件的最后一行\n\tctrl+u\t向上翻页\n\tctrl+d\t向下翻页\n其他命令：\n\tf\t即find，\t查找离光标最近的匹配项\t\n\t\t使用\tf+r\t跳转到离光标最近的r上\n\ty\t即yank，\t复制。\n\t\t使用\tyaw\t即yank all words 复制整个单词\n\t\t使用\tyy\t复制当前行\n\t\t使用\ty4j\t复制当前行后向下4行的内容\n\td\t即delete，删除，同y，也可搭配其他\n\tc\t即change，改变\n\t\t使用\tcaw 直接删除光标所在的那个单词，并进入输入模式\n\t\t使用\tcc\t直接删除当前行，并进入输入模式\n\t\t使用\tc1j 直接删除当前行和向下1行，并进入输入模式\n\t\t使用\tc4j 直接删除当前行和向下4行，并进入输入模式\n\tp\t即paste，\t粘贴\n\tu\t即undo，\t撤销\n\t\t\n```\n\n### 输入模式\n\n```markdown \n在普通模式中\n\t按下 i 从当前光标位置进入输入模式\n\t按下 a 从当前光标的后一个位置进入输入模式\n\tshift+i 从当前光标所在行的开头进入输入模式\n\tshift+a 从当前光标所在行的末尾进入输入模式\n在输入模式中按 esc 退出输入模式，进入普通模式\n```\n\n### 命令模式\n\n```markdown\n在普通模式下输入\t:命令\t如：\n\t:q\t直接退出\n\t:w\t保存文件\n\t:wq\t保存并退出\n\t:PlugInstall\t安装插件\n\t:插件名\t打开插件\n\t?要搜索的内容\n```\n\n### 可视模式\n\n```markdown\n在普通模式下按\tv\t进入可视模式\t\n\t在可视模式中移动光标就可以选择内容，选中内容后\n\t\t按y复制这段内容\n\t\t按d删除这段内容\n\t\t按c删除这段内容，并进入输入模式\n```\n\n### 其他\n\n```markdown\n在普通模式下使用\t\n\t:version\t查看vim的配置，包括配置文件的位置。\n\t:echo $环境变量名\t来查看对应环境变量位置\n注：\n\tWindows中的用户的_vimrc文件在用户的家目录下，若没有，则手动创建一个即可。\n\t若使用插件则可以使用vim-plug来管理插件，需在_vimrc文件中添加\n\t\tcall plug#begin(\"存放插件的路径，用户自己指定即可\")\n\t\tPlug\t'插件名'\t在vimawesome网站中可以查看\n\t\tcall plug#end()\n\t_vimrc文件也可更改快捷键\t如：\n\t\timap jk <esc>\t用j+k组合键来代替ESC键的功能\n\t\tmap <silent> <C-e> :NERDTreeToggle<CR>\t使用ctrl+e来打开和关闭NERDTreeToggle插件\n```\n\n","slug":"vim基础教程","published":1,"updated":"2023-02-23T14:59:09.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clehaba94000ftcvcb08ndqff","content":"<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">终端中使用\tvim 文件名\t打开文件并进入普通模式，可浏览文件内容，复制，粘贴文件内容</span><br><span class=\"line\"><span class=\"code\">\t在普通模式中输入 i 进入编辑模式\t输入 : + 命令 可执行命令</span></span><br><span class=\"line\"><span class=\"code\">常见命令：</span></span><br><span class=\"line\"><span class=\"code\">\t:q\t直接退出，一般在没有对文件进行操作时使用</span></span><br><span class=\"line\"><span class=\"code\">\t:wq\t保存后退出</span></span><br><span class=\"line\"><span class=\"code\">\t:q!\t不保存，直接退出</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"普通模式\"><a href=\"#普通模式\" class=\"headerlink\" title=\"普通模式\"></a>普通模式</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">移动光标：</span><br><span class=\"line\"><span class=\"code\">\th\t向左移动</span></span><br><span class=\"line\"><span class=\"code\">\tj\t向下移动</span></span><br><span class=\"line\"><span class=\"code\">\tk\t向上移动</span></span><br><span class=\"line\"><span class=\"code\">\tl\t向右移动</span></span><br><span class=\"line\"><span class=\"code\">\t搭配数字使用实现跨跳</span></span><br><span class=\"line\"><span class=\"code\">\t如：先按一下 5 在按一下 j 就是向下跳5行</span></span><br><span class=\"line\"><span class=\"code\">进阶移动：\t</span></span><br><span class=\"line\"><span class=\"code\">\tw\t\t即word跳跃到下一个单词的开头</span></span><br><span class=\"line\"><span class=\"code\">\tb\t\t即begin跳跃到上一个单词的开头</span></span><br><span class=\"line\"><span class=\"code\">\tgg\t\t跳转到文件的第一行</span></span><br><span class=\"line\"><span class=\"code\">\tshift+g\t跳转到文件的最后一行</span></span><br><span class=\"line\"><span class=\"code\">\tctrl+u\t向上翻页</span></span><br><span class=\"line\"><span class=\"code\">\tctrl+d\t向下翻页</span></span><br><span class=\"line\"><span class=\"code\">其他命令：</span></span><br><span class=\"line\"><span class=\"code\">\tf\t即find，\t查找离光标最近的匹配项\t</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tf+r\t跳转到离光标最近的r上</span></span><br><span class=\"line\"><span class=\"code\">\ty\t即yank，\t复制。</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tyaw\t即yank all words 复制整个单词</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tyy\t复制当前行</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\ty4j\t复制当前行后向下4行的内容</span></span><br><span class=\"line\"><span class=\"code\">\td\t即delete，删除，同y，也可搭配其他</span></span><br><span class=\"line\"><span class=\"code\">\tc\t即change，改变</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tcaw 直接删除光标所在的那个单词，并进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tcc\t直接删除当前行，并进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tc1j 直接删除当前行和向下1行，并进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tc4j 直接删除当前行和向下4行，并进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\tp\t即paste，\t粘贴</span></span><br><span class=\"line\"><span class=\"code\">\tu\t即undo，\t撤销</span></span><br><span class=\"line\"><span class=\"code\">\t\t</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输入模式\"><a href=\"#输入模式\" class=\"headerlink\" title=\"输入模式\"></a>输入模式</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在普通模式中</span><br><span class=\"line\"><span class=\"code\">\t按下 i 从当前光标位置进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\t按下 a 从当前光标的后一个位置进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\tshift+i 从当前光标所在行的开头进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\tshift+a 从当前光标所在行的末尾进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">在输入模式中按 esc 退出输入模式，进入普通模式</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在普通模式下输入\t:命令\t如：</span><br><span class=\"line\"><span class=\"code\">\t:q\t直接退出</span></span><br><span class=\"line\"><span class=\"code\">\t:w\t保存文件</span></span><br><span class=\"line\"><span class=\"code\">\t:wq\t保存并退出</span></span><br><span class=\"line\"><span class=\"code\">\t:PlugInstall\t安装插件</span></span><br><span class=\"line\"><span class=\"code\">\t:插件名\t打开插件</span></span><br><span class=\"line\"><span class=\"code\">\t?要搜索的内容</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可视模式\"><a href=\"#可视模式\" class=\"headerlink\" title=\"可视模式\"></a>可视模式</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在普通模式下按\tv\t进入可视模式\t</span><br><span class=\"line\"><span class=\"code\">\t在可视模式中移动光标就可以选择内容，选中内容后</span></span><br><span class=\"line\"><span class=\"code\">\t\t按y复制这段内容</span></span><br><span class=\"line\"><span class=\"code\">\t\t按d删除这段内容</span></span><br><span class=\"line\"><span class=\"code\">\t\t按c删除这段内容，并进入输入模式</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在普通模式下使用\t</span><br><span class=\"line\"><span class=\"code\">\t:version\t查看vim的配置，包括配置文件的位置。</span></span><br><span class=\"line\"><span class=\"code\">\t:echo $环境变量名\t来查看对应环境变量位置</span></span><br><span class=\"line\"><span class=\"code\">注：</span></span><br><span class=\"line\"><span class=\"code\">\tWindows中的用户的_vimrc文件在用户的家目录下，若没有，则手动创建一个即可。</span></span><br><span class=\"line\"><span class=\"code\">\t若使用插件则可以使用vim-plug来管理插件，需在_vimrc文件中添加</span></span><br><span class=\"line\"><span class=\"code\">\t\tcall plug#begin(&quot;存放插件的路径，用户自己指定即可&quot;)</span></span><br><span class=\"line\"><span class=\"code\">\t\tPlug\t&#x27;插件名&#x27;\t在vimawesome网站中可以查看</span></span><br><span class=\"line\"><span class=\"code\">\t\tcall plug#end()</span></span><br><span class=\"line\"><span class=\"code\">\t_vimrc文件也可更改快捷键\t如：</span></span><br><span class=\"line\"><span class=\"code\">\t\timap jk &lt;esc&gt;\t用j+k组合键来代替ESC键的功能</span></span><br><span class=\"line\"><span class=\"code\">\t\tmap &lt;silent&gt; &lt;C-e&gt; :NERDTreeToggle&lt;CR&gt;\t使用ctrl+e来打开和关闭NERDTreeToggle插件</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"widget":{"top":[{"class_name":{"id_name":null,"name":null,"icon":null,"html":null}}],"bottom":[{"class_name":"user-map","id_name":"user-map","name":"访客地图","icon":"fas fa-heartbeat","order":null,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}}},"cover":false,"excerpt":"","more":"<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">终端中使用\tvim 文件名\t打开文件并进入普通模式，可浏览文件内容，复制，粘贴文件内容</span><br><span class=\"line\"><span class=\"code\">\t在普通模式中输入 i 进入编辑模式\t输入 : + 命令 可执行命令</span></span><br><span class=\"line\"><span class=\"code\">常见命令：</span></span><br><span class=\"line\"><span class=\"code\">\t:q\t直接退出，一般在没有对文件进行操作时使用</span></span><br><span class=\"line\"><span class=\"code\">\t:wq\t保存后退出</span></span><br><span class=\"line\"><span class=\"code\">\t:q!\t不保存，直接退出</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"普通模式\"><a href=\"#普通模式\" class=\"headerlink\" title=\"普通模式\"></a>普通模式</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">移动光标：</span><br><span class=\"line\"><span class=\"code\">\th\t向左移动</span></span><br><span class=\"line\"><span class=\"code\">\tj\t向下移动</span></span><br><span class=\"line\"><span class=\"code\">\tk\t向上移动</span></span><br><span class=\"line\"><span class=\"code\">\tl\t向右移动</span></span><br><span class=\"line\"><span class=\"code\">\t搭配数字使用实现跨跳</span></span><br><span class=\"line\"><span class=\"code\">\t如：先按一下 5 在按一下 j 就是向下跳5行</span></span><br><span class=\"line\"><span class=\"code\">进阶移动：\t</span></span><br><span class=\"line\"><span class=\"code\">\tw\t\t即word跳跃到下一个单词的开头</span></span><br><span class=\"line\"><span class=\"code\">\tb\t\t即begin跳跃到上一个单词的开头</span></span><br><span class=\"line\"><span class=\"code\">\tgg\t\t跳转到文件的第一行</span></span><br><span class=\"line\"><span class=\"code\">\tshift+g\t跳转到文件的最后一行</span></span><br><span class=\"line\"><span class=\"code\">\tctrl+u\t向上翻页</span></span><br><span class=\"line\"><span class=\"code\">\tctrl+d\t向下翻页</span></span><br><span class=\"line\"><span class=\"code\">其他命令：</span></span><br><span class=\"line\"><span class=\"code\">\tf\t即find，\t查找离光标最近的匹配项\t</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tf+r\t跳转到离光标最近的r上</span></span><br><span class=\"line\"><span class=\"code\">\ty\t即yank，\t复制。</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tyaw\t即yank all words 复制整个单词</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tyy\t复制当前行</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\ty4j\t复制当前行后向下4行的内容</span></span><br><span class=\"line\"><span class=\"code\">\td\t即delete，删除，同y，也可搭配其他</span></span><br><span class=\"line\"><span class=\"code\">\tc\t即change，改变</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tcaw 直接删除光标所在的那个单词，并进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tcc\t直接删除当前行，并进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tc1j 直接删除当前行和向下1行，并进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\t\t使用\tc4j 直接删除当前行和向下4行，并进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\tp\t即paste，\t粘贴</span></span><br><span class=\"line\"><span class=\"code\">\tu\t即undo，\t撤销</span></span><br><span class=\"line\"><span class=\"code\">\t\t</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输入模式\"><a href=\"#输入模式\" class=\"headerlink\" title=\"输入模式\"></a>输入模式</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在普通模式中</span><br><span class=\"line\"><span class=\"code\">\t按下 i 从当前光标位置进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\t按下 a 从当前光标的后一个位置进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\tshift+i 从当前光标所在行的开头进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">\tshift+a 从当前光标所在行的末尾进入输入模式</span></span><br><span class=\"line\"><span class=\"code\">在输入模式中按 esc 退出输入模式，进入普通模式</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在普通模式下输入\t:命令\t如：</span><br><span class=\"line\"><span class=\"code\">\t:q\t直接退出</span></span><br><span class=\"line\"><span class=\"code\">\t:w\t保存文件</span></span><br><span class=\"line\"><span class=\"code\">\t:wq\t保存并退出</span></span><br><span class=\"line\"><span class=\"code\">\t:PlugInstall\t安装插件</span></span><br><span class=\"line\"><span class=\"code\">\t:插件名\t打开插件</span></span><br><span class=\"line\"><span class=\"code\">\t?要搜索的内容</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可视模式\"><a href=\"#可视模式\" class=\"headerlink\" title=\"可视模式\"></a>可视模式</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在普通模式下按\tv\t进入可视模式\t</span><br><span class=\"line\"><span class=\"code\">\t在可视模式中移动光标就可以选择内容，选中内容后</span></span><br><span class=\"line\"><span class=\"code\">\t\t按y复制这段内容</span></span><br><span class=\"line\"><span class=\"code\">\t\t按d删除这段内容</span></span><br><span class=\"line\"><span class=\"code\">\t\t按c删除这段内容，并进入输入模式</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在普通模式下使用\t</span><br><span class=\"line\"><span class=\"code\">\t:version\t查看vim的配置，包括配置文件的位置。</span></span><br><span class=\"line\"><span class=\"code\">\t:echo $环境变量名\t来查看对应环境变量位置</span></span><br><span class=\"line\"><span class=\"code\">注：</span></span><br><span class=\"line\"><span class=\"code\">\tWindows中的用户的_vimrc文件在用户的家目录下，若没有，则手动创建一个即可。</span></span><br><span class=\"line\"><span class=\"code\">\t若使用插件则可以使用vim-plug来管理插件，需在_vimrc文件中添加</span></span><br><span class=\"line\"><span class=\"code\">\t\tcall plug#begin(&quot;存放插件的路径，用户自己指定即可&quot;)</span></span><br><span class=\"line\"><span class=\"code\">\t\tPlug\t&#x27;插件名&#x27;\t在vimawesome网站中可以查看</span></span><br><span class=\"line\"><span class=\"code\">\t\tcall plug#end()</span></span><br><span class=\"line\"><span class=\"code\">\t_vimrc文件也可更改快捷键\t如：</span></span><br><span class=\"line\"><span class=\"code\">\t\timap jk &lt;esc&gt;\t用j+k组合键来代替ESC键的功能</span></span><br><span class=\"line\"><span class=\"code\">\t\tmap &lt;silent&gt; &lt;C-e&gt; :NERDTreeToggle&lt;CR&gt;\t使用ctrl+e来打开和关闭NERDTreeToggle插件</span></span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clehaba8p0001tcvchb2b1npb","tag_id":"clehaba8v0004tcvcdbmi4zck","_id":"clehaba900009tcvc8qbx8fa1"},{"post_id":"clehaba8t0003tcvc4lrbb722","tag_id":"clehaba900008tcvcfqm58gdc","_id":"clehaba94000etcvcfr5w4rvp"},{"post_id":"clehaba8x0005tcvcdjhp6b65","tag_id":"clehaba92000ctcvce4065p0u","_id":"clehaba96000htcvc4dnjcxvb"},{"post_id":"clehaba94000ftcvcb08ndqff","tag_id":"clehaba92000ctcvce4065p0u","_id":"clehaba97000itcvcgbxz7j2h"},{"post_id":"clehaba8y0006tcvc8ale66ea","tag_id":"clehaba92000ctcvce4065p0u","_id":"clehaba97000ktcvc83sqfjho"},{"post_id":"clehaba8z0007tcvcgvja22ks","tag_id":"clehaba900008tcvcfqm58gdc","_id":"clehaba98000mtcvc0ouz6jkm"},{"post_id":"clehaba90000atcvceob93n4w","tag_id":"clehaba92000ctcvce4065p0u","_id":"clehaba98000otcvc5xcid6tx"},{"post_id":"clehaba91000btcvc2adt4jms","tag_id":"clehaba92000ctcvce4065p0u","_id":"clehaba98000ptcvcabewdh10"}],"Tag":[{"name":"算法","_id":"clehaba8v0004tcvcdbmi4zck"},{"name":"计算机语言","_id":"clehaba900008tcvcfqm58gdc"},{"name":"其他","_id":"clehaba92000ctcvce4065p0u"}]}}